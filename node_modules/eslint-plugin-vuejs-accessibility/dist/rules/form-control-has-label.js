"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = require("../utils");
function isLabelElement(node) {
    return node.type === "VElement" && (0, utils_1.getElementType)(node) === "label";
}
function hasLabelElement(node) {
    const { parent } = node;
    return ([parent, ...parent.children].some(isLabelElement) ||
        (parent && parent.type === "VElement" && hasLabelElement(parent)));
}
const rule = {
    meta: {
        type: "problem",
        docs: {
            url: (0, utils_1.makeDocsURL)("form-has-label")
        },
        messages: {
            default: "Each form element must have a programmatically associated label element."
        },
        schema: []
    },
    create(context) {
        return (0, utils_1.defineTemplateBodyVisitor)(context, {
            VElement(node) {
                const elementType = (0, utils_1.getElementType)(node);
                if (!["input", "textarea"].includes(elementType)) {
                    return;
                }
                if (elementType === "input") {
                    const type = (0, utils_1.getElementAttributeValue)(node, "type");
                    if (!type ||
                        ["hidden", "button", "image", "submit", "reset"].includes(type)) {
                        return;
                    }
                }
                if (!(0, utils_1.isAriaHidden)(node) &&
                    !(0, utils_1.hasAriaLabel)(node) &&
                    !hasLabelElement(node)) {
                    context.report({ node: node, messageId: "default" });
                }
            }
        });
    }
};
exports.default = rule;
