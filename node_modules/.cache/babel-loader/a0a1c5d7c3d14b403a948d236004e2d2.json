{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/home/thomas/Code/BingoFerrand/node_modules/@babel/runtime/helpers/classCallCheck.js\")[\"default\"];\n\nvar _createClass = require(\"/home/thomas/Code/BingoFerrand/node_modules/@babel/runtime/helpers/createClass.js\")[\"default\"];\n\nrequire(\"core-js/modules/es.function.name.js\");\n\nvar Preprocessor = require('./preprocessor');\n\nvar unicode = require('../common/unicode');\n\nvar neTree = require('./named-entity-data');\n\nvar ERR = require('../common/error-codes'); //Aliases\n\n\nvar $ = unicode.CODE_POINTS;\nvar $$ = unicode.CODE_POINT_SEQUENCES; //C1 Unicode control character reference replacements\n\nvar C1_CONTROLS_REFERENCE_REPLACEMENTS = {\n  0x80: 0x20ac,\n  0x82: 0x201a,\n  0x83: 0x0192,\n  0x84: 0x201e,\n  0x85: 0x2026,\n  0x86: 0x2020,\n  0x87: 0x2021,\n  0x88: 0x02c6,\n  0x89: 0x2030,\n  0x8a: 0x0160,\n  0x8b: 0x2039,\n  0x8c: 0x0152,\n  0x8e: 0x017d,\n  0x91: 0x2018,\n  0x92: 0x2019,\n  0x93: 0x201c,\n  0x94: 0x201d,\n  0x95: 0x2022,\n  0x96: 0x2013,\n  0x97: 0x2014,\n  0x98: 0x02dc,\n  0x99: 0x2122,\n  0x9a: 0x0161,\n  0x9b: 0x203a,\n  0x9c: 0x0153,\n  0x9e: 0x017e,\n  0x9f: 0x0178\n}; // Named entity tree flags\n\nvar HAS_DATA_FLAG = 1 << 0;\nvar DATA_DUPLET_FLAG = 1 << 1;\nvar HAS_BRANCHES_FLAG = 1 << 2;\nvar MAX_BRANCH_MARKER_VALUE = HAS_DATA_FLAG | DATA_DUPLET_FLAG | HAS_BRANCHES_FLAG; //States\n\nvar DATA_STATE = 'DATA_STATE';\nvar RCDATA_STATE = 'RCDATA_STATE';\nvar RAWTEXT_STATE = 'RAWTEXT_STATE';\nvar SCRIPT_DATA_STATE = 'SCRIPT_DATA_STATE';\nvar PLAINTEXT_STATE = 'PLAINTEXT_STATE';\nvar TAG_OPEN_STATE = 'TAG_OPEN_STATE';\nvar END_TAG_OPEN_STATE = 'END_TAG_OPEN_STATE';\nvar TAG_NAME_STATE = 'TAG_NAME_STATE';\nvar RCDATA_LESS_THAN_SIGN_STATE = 'RCDATA_LESS_THAN_SIGN_STATE';\nvar RCDATA_END_TAG_OPEN_STATE = 'RCDATA_END_TAG_OPEN_STATE';\nvar RCDATA_END_TAG_NAME_STATE = 'RCDATA_END_TAG_NAME_STATE';\nvar RAWTEXT_LESS_THAN_SIGN_STATE = 'RAWTEXT_LESS_THAN_SIGN_STATE';\nvar RAWTEXT_END_TAG_OPEN_STATE = 'RAWTEXT_END_TAG_OPEN_STATE';\nvar RAWTEXT_END_TAG_NAME_STATE = 'RAWTEXT_END_TAG_NAME_STATE';\nvar SCRIPT_DATA_LESS_THAN_SIGN_STATE = 'SCRIPT_DATA_LESS_THAN_SIGN_STATE';\nvar SCRIPT_DATA_END_TAG_OPEN_STATE = 'SCRIPT_DATA_END_TAG_OPEN_STATE';\nvar SCRIPT_DATA_END_TAG_NAME_STATE = 'SCRIPT_DATA_END_TAG_NAME_STATE';\nvar SCRIPT_DATA_ESCAPE_START_STATE = 'SCRIPT_DATA_ESCAPE_START_STATE';\nvar SCRIPT_DATA_ESCAPE_START_DASH_STATE = 'SCRIPT_DATA_ESCAPE_START_DASH_STATE';\nvar SCRIPT_DATA_ESCAPED_STATE = 'SCRIPT_DATA_ESCAPED_STATE';\nvar SCRIPT_DATA_ESCAPED_DASH_STATE = 'SCRIPT_DATA_ESCAPED_DASH_STATE';\nvar SCRIPT_DATA_ESCAPED_DASH_DASH_STATE = 'SCRIPT_DATA_ESCAPED_DASH_DASH_STATE';\nvar SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE = 'SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE';\nvar SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE = 'SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE';\nvar SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE = 'SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE';\nvar SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE = 'SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE';\nvar SCRIPT_DATA_DOUBLE_ESCAPED_STATE = 'SCRIPT_DATA_DOUBLE_ESCAPED_STATE';\nvar SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE = 'SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE';\nvar SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE = 'SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE';\nvar SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE = 'SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE';\nvar SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE = 'SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE';\nvar BEFORE_ATTRIBUTE_NAME_STATE = 'BEFORE_ATTRIBUTE_NAME_STATE';\nvar ATTRIBUTE_NAME_STATE = 'ATTRIBUTE_NAME_STATE';\nvar AFTER_ATTRIBUTE_NAME_STATE = 'AFTER_ATTRIBUTE_NAME_STATE';\nvar BEFORE_ATTRIBUTE_VALUE_STATE = 'BEFORE_ATTRIBUTE_VALUE_STATE';\nvar ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE = 'ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE';\nvar ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE = 'ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE';\nvar ATTRIBUTE_VALUE_UNQUOTED_STATE = 'ATTRIBUTE_VALUE_UNQUOTED_STATE';\nvar AFTER_ATTRIBUTE_VALUE_QUOTED_STATE = 'AFTER_ATTRIBUTE_VALUE_QUOTED_STATE';\nvar SELF_CLOSING_START_TAG_STATE = 'SELF_CLOSING_START_TAG_STATE';\nvar BOGUS_COMMENT_STATE = 'BOGUS_COMMENT_STATE';\nvar MARKUP_DECLARATION_OPEN_STATE = 'MARKUP_DECLARATION_OPEN_STATE';\nvar COMMENT_START_STATE = 'COMMENT_START_STATE';\nvar COMMENT_START_DASH_STATE = 'COMMENT_START_DASH_STATE';\nvar COMMENT_STATE = 'COMMENT_STATE';\nvar COMMENT_LESS_THAN_SIGN_STATE = 'COMMENT_LESS_THAN_SIGN_STATE';\nvar COMMENT_LESS_THAN_SIGN_BANG_STATE = 'COMMENT_LESS_THAN_SIGN_BANG_STATE';\nvar COMMENT_LESS_THAN_SIGN_BANG_DASH_STATE = 'COMMENT_LESS_THAN_SIGN_BANG_DASH_STATE';\nvar COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH_STATE = 'COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH_STATE';\nvar COMMENT_END_DASH_STATE = 'COMMENT_END_DASH_STATE';\nvar COMMENT_END_STATE = 'COMMENT_END_STATE';\nvar COMMENT_END_BANG_STATE = 'COMMENT_END_BANG_STATE';\nvar DOCTYPE_STATE = 'DOCTYPE_STATE';\nvar BEFORE_DOCTYPE_NAME_STATE = 'BEFORE_DOCTYPE_NAME_STATE';\nvar DOCTYPE_NAME_STATE = 'DOCTYPE_NAME_STATE';\nvar AFTER_DOCTYPE_NAME_STATE = 'AFTER_DOCTYPE_NAME_STATE';\nvar AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE = 'AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE';\nvar BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE = 'BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE';\nvar DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE = 'DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE';\nvar DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE = 'DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE';\nvar AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE = 'AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE';\nvar BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE = 'BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE';\nvar AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE = 'AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE';\nvar BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE = 'BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE';\nvar DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE = 'DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE';\nvar DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE = 'DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE';\nvar AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE = 'AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE';\nvar BOGUS_DOCTYPE_STATE = 'BOGUS_DOCTYPE_STATE';\nvar CDATA_SECTION_STATE = 'CDATA_SECTION_STATE';\nvar CDATA_SECTION_BRACKET_STATE = 'CDATA_SECTION_BRACKET_STATE';\nvar CDATA_SECTION_END_STATE = 'CDATA_SECTION_END_STATE';\nvar CHARACTER_REFERENCE_STATE = 'CHARACTER_REFERENCE_STATE';\nvar NAMED_CHARACTER_REFERENCE_STATE = 'NAMED_CHARACTER_REFERENCE_STATE';\nvar AMBIGUOUS_AMPERSAND_STATE = 'AMBIGUOS_AMPERSAND_STATE';\nvar NUMERIC_CHARACTER_REFERENCE_STATE = 'NUMERIC_CHARACTER_REFERENCE_STATE';\nvar HEXADEMICAL_CHARACTER_REFERENCE_START_STATE = 'HEXADEMICAL_CHARACTER_REFERENCE_START_STATE';\nvar DECIMAL_CHARACTER_REFERENCE_START_STATE = 'DECIMAL_CHARACTER_REFERENCE_START_STATE';\nvar HEXADEMICAL_CHARACTER_REFERENCE_STATE = 'HEXADEMICAL_CHARACTER_REFERENCE_STATE';\nvar DECIMAL_CHARACTER_REFERENCE_STATE = 'DECIMAL_CHARACTER_REFERENCE_STATE';\nvar NUMERIC_CHARACTER_REFERENCE_END_STATE = 'NUMERIC_CHARACTER_REFERENCE_END_STATE'; //Utils\n//OPTIMIZATION: these utility functions should not be moved out of this module. V8 Crankshaft will not inline\n//this functions if they will be situated in another module due to context switch.\n//Always perform inlining check before modifying this functions ('node --trace-inlining').\n\nfunction isWhitespace(cp) {\n  return cp === $.SPACE || cp === $.LINE_FEED || cp === $.TABULATION || cp === $.FORM_FEED;\n}\n\nfunction isAsciiDigit(cp) {\n  return cp >= $.DIGIT_0 && cp <= $.DIGIT_9;\n}\n\nfunction isAsciiUpper(cp) {\n  return cp >= $.LATIN_CAPITAL_A && cp <= $.LATIN_CAPITAL_Z;\n}\n\nfunction isAsciiLower(cp) {\n  return cp >= $.LATIN_SMALL_A && cp <= $.LATIN_SMALL_Z;\n}\n\nfunction isAsciiLetter(cp) {\n  return isAsciiLower(cp) || isAsciiUpper(cp);\n}\n\nfunction isAsciiAlphaNumeric(cp) {\n  return isAsciiLetter(cp) || isAsciiDigit(cp);\n}\n\nfunction isAsciiUpperHexDigit(cp) {\n  return cp >= $.LATIN_CAPITAL_A && cp <= $.LATIN_CAPITAL_F;\n}\n\nfunction isAsciiLowerHexDigit(cp) {\n  return cp >= $.LATIN_SMALL_A && cp <= $.LATIN_SMALL_F;\n}\n\nfunction isAsciiHexDigit(cp) {\n  return isAsciiDigit(cp) || isAsciiUpperHexDigit(cp) || isAsciiLowerHexDigit(cp);\n}\n\nfunction toAsciiLowerCodePoint(cp) {\n  return cp + 0x0020;\n} //NOTE: String.fromCharCode() function can handle only characters from BMP subset.\n//So, we need to workaround this manually.\n//(see: https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/String/fromCharCode#Getting_it_to_work_with_higher_values)\n\n\nfunction toChar(cp) {\n  if (cp <= 0xffff) {\n    return String.fromCharCode(cp);\n  }\n\n  cp -= 0x10000;\n  return String.fromCharCode(cp >>> 10 & 0x3ff | 0xd800) + String.fromCharCode(0xdc00 | cp & 0x3ff);\n}\n\nfunction toAsciiLowerChar(cp) {\n  return String.fromCharCode(toAsciiLowerCodePoint(cp));\n}\n\nfunction findNamedEntityTreeBranch(nodeIx, cp) {\n  var branchCount = neTree[++nodeIx];\n  var lo = ++nodeIx;\n  var hi = lo + branchCount - 1;\n\n  while (lo <= hi) {\n    var mid = lo + hi >>> 1;\n    var midCp = neTree[mid];\n\n    if (midCp < cp) {\n      lo = mid + 1;\n    } else if (midCp > cp) {\n      hi = mid - 1;\n    } else {\n      return neTree[mid + branchCount];\n    }\n  }\n\n  return -1;\n} //Tokenizer\n\n\nvar Tokenizer = /*#__PURE__*/function () {\n  function Tokenizer() {\n    _classCallCheck(this, Tokenizer);\n\n    this.preprocessor = new Preprocessor();\n    this.tokenQueue = [];\n    this.allowCDATA = false;\n    this.state = DATA_STATE;\n    this.returnState = '';\n    this.charRefCode = -1;\n    this.tempBuff = [];\n    this.lastStartTagName = '';\n    this.consumedAfterSnapshot = -1;\n    this.active = false;\n    this.currentCharacterToken = null;\n    this.currentToken = null;\n    this.currentAttr = null;\n  } //Errors\n\n\n  _createClass(Tokenizer, [{\n    key: \"_err\",\n    value: function _err() {// NOTE: err reporting is noop by default. Enabled by mixin.\n    }\n  }, {\n    key: \"_errOnNextCodePoint\",\n    value: function _errOnNextCodePoint(err) {\n      this._consume();\n\n      this._err(err);\n\n      this._unconsume();\n    } //API\n\n  }, {\n    key: \"getNextToken\",\n    value: function getNextToken() {\n      while (!this.tokenQueue.length && this.active) {\n        this.consumedAfterSnapshot = 0;\n\n        var cp = this._consume();\n\n        if (!this._ensureHibernation()) {\n          this[this.state](cp);\n        }\n      }\n\n      return this.tokenQueue.shift();\n    }\n  }, {\n    key: \"write\",\n    value: function write(chunk, isLastChunk) {\n      this.active = true;\n      this.preprocessor.write(chunk, isLastChunk);\n    }\n  }, {\n    key: \"insertHtmlAtCurrentPos\",\n    value: function insertHtmlAtCurrentPos(chunk) {\n      this.active = true;\n      this.preprocessor.insertHtmlAtCurrentPos(chunk);\n    } //Hibernation\n\n  }, {\n    key: \"_ensureHibernation\",\n    value: function _ensureHibernation() {\n      if (this.preprocessor.endOfChunkHit) {\n        for (; this.consumedAfterSnapshot > 0; this.consumedAfterSnapshot--) {\n          this.preprocessor.retreat();\n        }\n\n        this.active = false;\n        this.tokenQueue.push({\n          type: Tokenizer.HIBERNATION_TOKEN\n        });\n        return true;\n      }\n\n      return false;\n    } //Consumption\n\n  }, {\n    key: \"_consume\",\n    value: function _consume() {\n      this.consumedAfterSnapshot++;\n      return this.preprocessor.advance();\n    }\n  }, {\n    key: \"_unconsume\",\n    value: function _unconsume() {\n      this.consumedAfterSnapshot--;\n      this.preprocessor.retreat();\n    }\n  }, {\n    key: \"_reconsumeInState\",\n    value: function _reconsumeInState(state) {\n      this.state = state;\n\n      this._unconsume();\n    }\n  }, {\n    key: \"_consumeSequenceIfMatch\",\n    value: function _consumeSequenceIfMatch(pattern, startCp, caseSensitive) {\n      var consumedCount = 0;\n      var isMatch = true;\n      var patternLength = pattern.length;\n      var patternPos = 0;\n      var cp = startCp;\n      var patternCp = void 0;\n\n      for (; patternPos < patternLength; patternPos++) {\n        if (patternPos > 0) {\n          cp = this._consume();\n          consumedCount++;\n        }\n\n        if (cp === $.EOF) {\n          isMatch = false;\n          break;\n        }\n\n        patternCp = pattern[patternPos];\n\n        if (cp !== patternCp && (caseSensitive || cp !== toAsciiLowerCodePoint(patternCp))) {\n          isMatch = false;\n          break;\n        }\n      }\n\n      if (!isMatch) {\n        while (consumedCount--) {\n          this._unconsume();\n        }\n      }\n\n      return isMatch;\n    } //Temp buffer\n\n  }, {\n    key: \"_isTempBufferEqualToScriptString\",\n    value: function _isTempBufferEqualToScriptString() {\n      if (this.tempBuff.length !== $$.SCRIPT_STRING.length) {\n        return false;\n      }\n\n      for (var i = 0; i < this.tempBuff.length; i++) {\n        if (this.tempBuff[i] !== $$.SCRIPT_STRING[i]) {\n          return false;\n        }\n      }\n\n      return true;\n    } //Token creation\n\n  }, {\n    key: \"_createStartTagToken\",\n    value: function _createStartTagToken() {\n      this.currentToken = {\n        type: Tokenizer.START_TAG_TOKEN,\n        tagName: '',\n        selfClosing: false,\n        ackSelfClosing: false,\n        attrs: []\n      };\n    }\n  }, {\n    key: \"_createEndTagToken\",\n    value: function _createEndTagToken() {\n      this.currentToken = {\n        type: Tokenizer.END_TAG_TOKEN,\n        tagName: '',\n        selfClosing: false,\n        attrs: []\n      };\n    }\n  }, {\n    key: \"_createCommentToken\",\n    value: function _createCommentToken() {\n      this.currentToken = {\n        type: Tokenizer.COMMENT_TOKEN,\n        data: ''\n      };\n    }\n  }, {\n    key: \"_createDoctypeToken\",\n    value: function _createDoctypeToken(initialName) {\n      this.currentToken = {\n        type: Tokenizer.DOCTYPE_TOKEN,\n        name: initialName,\n        forceQuirks: false,\n        publicId: null,\n        systemId: null\n      };\n    }\n  }, {\n    key: \"_createCharacterToken\",\n    value: function _createCharacterToken(type, ch) {\n      this.currentCharacterToken = {\n        type: type,\n        chars: ch\n      };\n    }\n  }, {\n    key: \"_createEOFToken\",\n    value: function _createEOFToken() {\n      this.currentToken = {\n        type: Tokenizer.EOF_TOKEN\n      };\n    } //Tag attributes\n\n  }, {\n    key: \"_createAttr\",\n    value: function _createAttr(attrNameFirstCh) {\n      this.currentAttr = {\n        name: attrNameFirstCh,\n        value: ''\n      };\n    }\n  }, {\n    key: \"_leaveAttrName\",\n    value: function _leaveAttrName(toState) {\n      if (Tokenizer.getTokenAttr(this.currentToken, this.currentAttr.name) === null) {\n        this.currentToken.attrs.push(this.currentAttr);\n      } else {\n        this._err(ERR.duplicateAttribute);\n      }\n\n      this.state = toState;\n    }\n  }, {\n    key: \"_leaveAttrValue\",\n    value: function _leaveAttrValue(toState) {\n      this.state = toState;\n    } //Token emission\n\n  }, {\n    key: \"_emitCurrentToken\",\n    value: function _emitCurrentToken() {\n      this._emitCurrentCharacterToken();\n\n      var ct = this.currentToken;\n      this.currentToken = null; //NOTE: store emited start tag's tagName to determine is the following end tag token is appropriate.\n\n      if (ct.type === Tokenizer.START_TAG_TOKEN) {\n        this.lastStartTagName = ct.tagName;\n      } else if (ct.type === Tokenizer.END_TAG_TOKEN) {\n        if (ct.attrs.length > 0) {\n          this._err(ERR.endTagWithAttributes);\n        }\n\n        if (ct.selfClosing) {\n          this._err(ERR.endTagWithTrailingSolidus);\n        }\n      }\n\n      this.tokenQueue.push(ct);\n    }\n  }, {\n    key: \"_emitCurrentCharacterToken\",\n    value: function _emitCurrentCharacterToken() {\n      if (this.currentCharacterToken) {\n        this.tokenQueue.push(this.currentCharacterToken);\n        this.currentCharacterToken = null;\n      }\n    }\n  }, {\n    key: \"_emitEOFToken\",\n    value: function _emitEOFToken() {\n      this._createEOFToken();\n\n      this._emitCurrentToken();\n    } //Characters emission\n    //OPTIMIZATION: specification uses only one type of character tokens (one token per character).\n    //This causes a huge memory overhead and a lot of unnecessary parser loops. parse5 uses 3 groups of characters.\n    //If we have a sequence of characters that belong to the same group, parser can process it\n    //as a single solid character token.\n    //So, there are 3 types of character tokens in parse5:\n    //1)NULL_CHARACTER_TOKEN - \\u0000-character sequences (e.g. '\\u0000\\u0000\\u0000')\n    //2)WHITESPACE_CHARACTER_TOKEN - any whitespace/new-line character sequences (e.g. '\\n  \\r\\t   \\f')\n    //3)CHARACTER_TOKEN - any character sequence which don't belong to groups 1 and 2 (e.g. 'abcdef1234@@#$%^')\n\n  }, {\n    key: \"_appendCharToCurrentCharacterToken\",\n    value: function _appendCharToCurrentCharacterToken(type, ch) {\n      if (this.currentCharacterToken && this.currentCharacterToken.type !== type) {\n        this._emitCurrentCharacterToken();\n      }\n\n      if (this.currentCharacterToken) {\n        this.currentCharacterToken.chars += ch;\n      } else {\n        this._createCharacterToken(type, ch);\n      }\n    }\n  }, {\n    key: \"_emitCodePoint\",\n    value: function _emitCodePoint(cp) {\n      var type = Tokenizer.CHARACTER_TOKEN;\n\n      if (isWhitespace(cp)) {\n        type = Tokenizer.WHITESPACE_CHARACTER_TOKEN;\n      } else if (cp === $.NULL) {\n        type = Tokenizer.NULL_CHARACTER_TOKEN;\n      }\n\n      this._appendCharToCurrentCharacterToken(type, toChar(cp));\n    }\n  }, {\n    key: \"_emitSeveralCodePoints\",\n    value: function _emitSeveralCodePoints(codePoints) {\n      for (var i = 0; i < codePoints.length; i++) {\n        this._emitCodePoint(codePoints[i]);\n      }\n    } //NOTE: used then we emit character explicitly. This is always a non-whitespace and a non-null character.\n    //So we can avoid additional checks here.\n\n  }, {\n    key: \"_emitChars\",\n    value: function _emitChars(ch) {\n      this._appendCharToCurrentCharacterToken(Tokenizer.CHARACTER_TOKEN, ch);\n    } // Character reference helpers\n\n  }, {\n    key: \"_matchNamedCharacterReference\",\n    value: function _matchNamedCharacterReference(startCp) {\n      var result = null;\n      var excess = 1;\n      var i = findNamedEntityTreeBranch(0, startCp);\n      this.tempBuff.push(startCp);\n\n      while (i > -1) {\n        var current = neTree[i];\n        var inNode = current < MAX_BRANCH_MARKER_VALUE;\n        var nodeWithData = inNode && current & HAS_DATA_FLAG;\n\n        if (nodeWithData) {\n          //NOTE: we use greedy search, so we continue lookup at this point\n          result = current & DATA_DUPLET_FLAG ? [neTree[++i], neTree[++i]] : [neTree[++i]];\n          excess = 0;\n        }\n\n        var cp = this._consume();\n\n        this.tempBuff.push(cp);\n        excess++;\n\n        if (cp === $.EOF) {\n          break;\n        }\n\n        if (inNode) {\n          i = current & HAS_BRANCHES_FLAG ? findNamedEntityTreeBranch(i, cp) : -1;\n        } else {\n          i = cp === current ? ++i : -1;\n        }\n      }\n\n      while (excess--) {\n        this.tempBuff.pop();\n\n        this._unconsume();\n      }\n\n      return result;\n    }\n  }, {\n    key: \"_isCharacterReferenceInAttribute\",\n    value: function _isCharacterReferenceInAttribute() {\n      return this.returnState === ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE || this.returnState === ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE || this.returnState === ATTRIBUTE_VALUE_UNQUOTED_STATE;\n    }\n  }, {\n    key: \"_isCharacterReferenceAttributeQuirk\",\n    value: function _isCharacterReferenceAttributeQuirk(withSemicolon) {\n      if (!withSemicolon && this._isCharacterReferenceInAttribute()) {\n        var nextCp = this._consume();\n\n        this._unconsume();\n\n        return nextCp === $.EQUALS_SIGN || isAsciiAlphaNumeric(nextCp);\n      }\n\n      return false;\n    }\n  }, {\n    key: \"_flushCodePointsConsumedAsCharacterReference\",\n    value: function _flushCodePointsConsumedAsCharacterReference() {\n      if (this._isCharacterReferenceInAttribute()) {\n        for (var i = 0; i < this.tempBuff.length; i++) {\n          this.currentAttr.value += toChar(this.tempBuff[i]);\n        }\n      } else {\n        this._emitSeveralCodePoints(this.tempBuff);\n      }\n\n      this.tempBuff = [];\n    } // State machine\n    // Data state\n    //------------------------------------------------------------------\n\n  }, {\n    key: DATA_STATE,\n    value: function value(cp) {\n      this.preprocessor.dropParsedChunk();\n\n      if (cp === $.LESS_THAN_SIGN) {\n        this.state = TAG_OPEN_STATE;\n      } else if (cp === $.AMPERSAND) {\n        this.returnState = DATA_STATE;\n        this.state = CHARACTER_REFERENCE_STATE;\n      } else if (cp === $.NULL) {\n        this._err(ERR.unexpectedNullCharacter);\n\n        this._emitCodePoint(cp);\n      } else if (cp === $.EOF) {\n        this._emitEOFToken();\n      } else {\n        this._emitCodePoint(cp);\n      }\n    } //  RCDATA state\n    //------------------------------------------------------------------\n\n  }, {\n    key: RCDATA_STATE,\n    value: function value(cp) {\n      this.preprocessor.dropParsedChunk();\n\n      if (cp === $.AMPERSAND) {\n        this.returnState = RCDATA_STATE;\n        this.state = CHARACTER_REFERENCE_STATE;\n      } else if (cp === $.LESS_THAN_SIGN) {\n        this.state = RCDATA_LESS_THAN_SIGN_STATE;\n      } else if (cp === $.NULL) {\n        this._err(ERR.unexpectedNullCharacter);\n\n        this._emitChars(unicode.REPLACEMENT_CHARACTER);\n      } else if (cp === $.EOF) {\n        this._emitEOFToken();\n      } else {\n        this._emitCodePoint(cp);\n      }\n    } // RAWTEXT state\n    //------------------------------------------------------------------\n\n  }, {\n    key: RAWTEXT_STATE,\n    value: function value(cp) {\n      this.preprocessor.dropParsedChunk();\n\n      if (cp === $.LESS_THAN_SIGN) {\n        this.state = RAWTEXT_LESS_THAN_SIGN_STATE;\n      } else if (cp === $.NULL) {\n        this._err(ERR.unexpectedNullCharacter);\n\n        this._emitChars(unicode.REPLACEMENT_CHARACTER);\n      } else if (cp === $.EOF) {\n        this._emitEOFToken();\n      } else {\n        this._emitCodePoint(cp);\n      }\n    } // Script data state\n    //------------------------------------------------------------------\n\n  }, {\n    key: SCRIPT_DATA_STATE,\n    value: function value(cp) {\n      this.preprocessor.dropParsedChunk();\n\n      if (cp === $.LESS_THAN_SIGN) {\n        this.state = SCRIPT_DATA_LESS_THAN_SIGN_STATE;\n      } else if (cp === $.NULL) {\n        this._err(ERR.unexpectedNullCharacter);\n\n        this._emitChars(unicode.REPLACEMENT_CHARACTER);\n      } else if (cp === $.EOF) {\n        this._emitEOFToken();\n      } else {\n        this._emitCodePoint(cp);\n      }\n    } // PLAINTEXT state\n    //------------------------------------------------------------------\n\n  }, {\n    key: PLAINTEXT_STATE,\n    value: function value(cp) {\n      this.preprocessor.dropParsedChunk();\n\n      if (cp === $.NULL) {\n        this._err(ERR.unexpectedNullCharacter);\n\n        this._emitChars(unicode.REPLACEMENT_CHARACTER);\n      } else if (cp === $.EOF) {\n        this._emitEOFToken();\n      } else {\n        this._emitCodePoint(cp);\n      }\n    } // Tag open state\n    //------------------------------------------------------------------\n\n  }, {\n    key: TAG_OPEN_STATE,\n    value: function value(cp) {\n      if (cp === $.EXCLAMATION_MARK) {\n        this.state = MARKUP_DECLARATION_OPEN_STATE;\n      } else if (cp === $.SOLIDUS) {\n        this.state = END_TAG_OPEN_STATE;\n      } else if (isAsciiLetter(cp)) {\n        this._createStartTagToken();\n\n        this._reconsumeInState(TAG_NAME_STATE);\n      } else if (cp === $.QUESTION_MARK) {\n        this._err(ERR.unexpectedQuestionMarkInsteadOfTagName);\n\n        this._createCommentToken();\n\n        this._reconsumeInState(BOGUS_COMMENT_STATE);\n      } else if (cp === $.EOF) {\n        this._err(ERR.eofBeforeTagName);\n\n        this._emitChars('<');\n\n        this._emitEOFToken();\n      } else {\n        this._err(ERR.invalidFirstCharacterOfTagName);\n\n        this._emitChars('<');\n\n        this._reconsumeInState(DATA_STATE);\n      }\n    } // End tag open state\n    //------------------------------------------------------------------\n\n  }, {\n    key: END_TAG_OPEN_STATE,\n    value: function value(cp) {\n      if (isAsciiLetter(cp)) {\n        this._createEndTagToken();\n\n        this._reconsumeInState(TAG_NAME_STATE);\n      } else if (cp === $.GREATER_THAN_SIGN) {\n        this._err(ERR.missingEndTagName);\n\n        this.state = DATA_STATE;\n      } else if (cp === $.EOF) {\n        this._err(ERR.eofBeforeTagName);\n\n        this._emitChars('</');\n\n        this._emitEOFToken();\n      } else {\n        this._err(ERR.invalidFirstCharacterOfTagName);\n\n        this._createCommentToken();\n\n        this._reconsumeInState(BOGUS_COMMENT_STATE);\n      }\n    } // Tag name state\n    //------------------------------------------------------------------\n\n  }, {\n    key: TAG_NAME_STATE,\n    value: function value(cp) {\n      if (isWhitespace(cp)) {\n        this.state = BEFORE_ATTRIBUTE_NAME_STATE;\n      } else if (cp === $.SOLIDUS) {\n        this.state = SELF_CLOSING_START_TAG_STATE;\n      } else if (cp === $.GREATER_THAN_SIGN) {\n        this.state = DATA_STATE;\n\n        this._emitCurrentToken();\n      } else if (isAsciiUpper(cp)) {\n        this.currentToken.tagName += toAsciiLowerChar(cp);\n      } else if (cp === $.NULL) {\n        this._err(ERR.unexpectedNullCharacter);\n\n        this.currentToken.tagName += unicode.REPLACEMENT_CHARACTER;\n      } else if (cp === $.EOF) {\n        this._err(ERR.eofInTag);\n\n        this._emitEOFToken();\n      } else {\n        this.currentToken.tagName += toChar(cp);\n      }\n    } // RCDATA less-than sign state\n    //------------------------------------------------------------------\n\n  }, {\n    key: RCDATA_LESS_THAN_SIGN_STATE,\n    value: function value(cp) {\n      if (cp === $.SOLIDUS) {\n        this.tempBuff = [];\n        this.state = RCDATA_END_TAG_OPEN_STATE;\n      } else {\n        this._emitChars('<');\n\n        this._reconsumeInState(RCDATA_STATE);\n      }\n    } // RCDATA end tag open state\n    //------------------------------------------------------------------\n\n  }, {\n    key: RCDATA_END_TAG_OPEN_STATE,\n    value: function value(cp) {\n      if (isAsciiLetter(cp)) {\n        this._createEndTagToken();\n\n        this._reconsumeInState(RCDATA_END_TAG_NAME_STATE);\n      } else {\n        this._emitChars('</');\n\n        this._reconsumeInState(RCDATA_STATE);\n      }\n    } // RCDATA end tag name state\n    //------------------------------------------------------------------\n\n  }, {\n    key: RCDATA_END_TAG_NAME_STATE,\n    value: function value(cp) {\n      if (isAsciiUpper(cp)) {\n        this.currentToken.tagName += toAsciiLowerChar(cp);\n        this.tempBuff.push(cp);\n      } else if (isAsciiLower(cp)) {\n        this.currentToken.tagName += toChar(cp);\n        this.tempBuff.push(cp);\n      } else {\n        if (this.lastStartTagName === this.currentToken.tagName) {\n          if (isWhitespace(cp)) {\n            this.state = BEFORE_ATTRIBUTE_NAME_STATE;\n            return;\n          }\n\n          if (cp === $.SOLIDUS) {\n            this.state = SELF_CLOSING_START_TAG_STATE;\n            return;\n          }\n\n          if (cp === $.GREATER_THAN_SIGN) {\n            this.state = DATA_STATE;\n\n            this._emitCurrentToken();\n\n            return;\n          }\n        }\n\n        this._emitChars('</');\n\n        this._emitSeveralCodePoints(this.tempBuff);\n\n        this._reconsumeInState(RCDATA_STATE);\n      }\n    } // RAWTEXT less-than sign state\n    //------------------------------------------------------------------\n\n  }, {\n    key: RAWTEXT_LESS_THAN_SIGN_STATE,\n    value: function value(cp) {\n      if (cp === $.SOLIDUS) {\n        this.tempBuff = [];\n        this.state = RAWTEXT_END_TAG_OPEN_STATE;\n      } else {\n        this._emitChars('<');\n\n        this._reconsumeInState(RAWTEXT_STATE);\n      }\n    } // RAWTEXT end tag open state\n    //------------------------------------------------------------------\n\n  }, {\n    key: RAWTEXT_END_TAG_OPEN_STATE,\n    value: function value(cp) {\n      if (isAsciiLetter(cp)) {\n        this._createEndTagToken();\n\n        this._reconsumeInState(RAWTEXT_END_TAG_NAME_STATE);\n      } else {\n        this._emitChars('</');\n\n        this._reconsumeInState(RAWTEXT_STATE);\n      }\n    } // RAWTEXT end tag name state\n    //------------------------------------------------------------------\n\n  }, {\n    key: RAWTEXT_END_TAG_NAME_STATE,\n    value: function value(cp) {\n      if (isAsciiUpper(cp)) {\n        this.currentToken.tagName += toAsciiLowerChar(cp);\n        this.tempBuff.push(cp);\n      } else if (isAsciiLower(cp)) {\n        this.currentToken.tagName += toChar(cp);\n        this.tempBuff.push(cp);\n      } else {\n        if (this.lastStartTagName === this.currentToken.tagName) {\n          if (isWhitespace(cp)) {\n            this.state = BEFORE_ATTRIBUTE_NAME_STATE;\n            return;\n          }\n\n          if (cp === $.SOLIDUS) {\n            this.state = SELF_CLOSING_START_TAG_STATE;\n            return;\n          }\n\n          if (cp === $.GREATER_THAN_SIGN) {\n            this._emitCurrentToken();\n\n            this.state = DATA_STATE;\n            return;\n          }\n        }\n\n        this._emitChars('</');\n\n        this._emitSeveralCodePoints(this.tempBuff);\n\n        this._reconsumeInState(RAWTEXT_STATE);\n      }\n    } // Script data less-than sign state\n    //------------------------------------------------------------------\n\n  }, {\n    key: SCRIPT_DATA_LESS_THAN_SIGN_STATE,\n    value: function value(cp) {\n      if (cp === $.SOLIDUS) {\n        this.tempBuff = [];\n        this.state = SCRIPT_DATA_END_TAG_OPEN_STATE;\n      } else if (cp === $.EXCLAMATION_MARK) {\n        this.state = SCRIPT_DATA_ESCAPE_START_STATE;\n\n        this._emitChars('<!');\n      } else {\n        this._emitChars('<');\n\n        this._reconsumeInState(SCRIPT_DATA_STATE);\n      }\n    } // Script data end tag open state\n    //------------------------------------------------------------------\n\n  }, {\n    key: SCRIPT_DATA_END_TAG_OPEN_STATE,\n    value: function value(cp) {\n      if (isAsciiLetter(cp)) {\n        this._createEndTagToken();\n\n        this._reconsumeInState(SCRIPT_DATA_END_TAG_NAME_STATE);\n      } else {\n        this._emitChars('</');\n\n        this._reconsumeInState(SCRIPT_DATA_STATE);\n      }\n    } // Script data end tag name state\n    //------------------------------------------------------------------\n\n  }, {\n    key: SCRIPT_DATA_END_TAG_NAME_STATE,\n    value: function value(cp) {\n      if (isAsciiUpper(cp)) {\n        this.currentToken.tagName += toAsciiLowerChar(cp);\n        this.tempBuff.push(cp);\n      } else if (isAsciiLower(cp)) {\n        this.currentToken.tagName += toChar(cp);\n        this.tempBuff.push(cp);\n      } else {\n        if (this.lastStartTagName === this.currentToken.tagName) {\n          if (isWhitespace(cp)) {\n            this.state = BEFORE_ATTRIBUTE_NAME_STATE;\n            return;\n          } else if (cp === $.SOLIDUS) {\n            this.state = SELF_CLOSING_START_TAG_STATE;\n            return;\n          } else if (cp === $.GREATER_THAN_SIGN) {\n            this._emitCurrentToken();\n\n            this.state = DATA_STATE;\n            return;\n          }\n        }\n\n        this._emitChars('</');\n\n        this._emitSeveralCodePoints(this.tempBuff);\n\n        this._reconsumeInState(SCRIPT_DATA_STATE);\n      }\n    } // Script data escape start state\n    //------------------------------------------------------------------\n\n  }, {\n    key: SCRIPT_DATA_ESCAPE_START_STATE,\n    value: function value(cp) {\n      if (cp === $.HYPHEN_MINUS) {\n        this.state = SCRIPT_DATA_ESCAPE_START_DASH_STATE;\n\n        this._emitChars('-');\n      } else {\n        this._reconsumeInState(SCRIPT_DATA_STATE);\n      }\n    } // Script data escape start dash state\n    //------------------------------------------------------------------\n\n  }, {\n    key: SCRIPT_DATA_ESCAPE_START_DASH_STATE,\n    value: function value(cp) {\n      if (cp === $.HYPHEN_MINUS) {\n        this.state = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;\n\n        this._emitChars('-');\n      } else {\n        this._reconsumeInState(SCRIPT_DATA_STATE);\n      }\n    } // Script data escaped state\n    //------------------------------------------------------------------\n\n  }, {\n    key: SCRIPT_DATA_ESCAPED_STATE,\n    value: function value(cp) {\n      if (cp === $.HYPHEN_MINUS) {\n        this.state = SCRIPT_DATA_ESCAPED_DASH_STATE;\n\n        this._emitChars('-');\n      } else if (cp === $.LESS_THAN_SIGN) {\n        this.state = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;\n      } else if (cp === $.NULL) {\n        this._err(ERR.unexpectedNullCharacter);\n\n        this._emitChars(unicode.REPLACEMENT_CHARACTER);\n      } else if (cp === $.EOF) {\n        this._err(ERR.eofInScriptHtmlCommentLikeText);\n\n        this._emitEOFToken();\n      } else {\n        this._emitCodePoint(cp);\n      }\n    } // Script data escaped dash state\n    //------------------------------------------------------------------\n\n  }, {\n    key: SCRIPT_DATA_ESCAPED_DASH_STATE,\n    value: function value(cp) {\n      if (cp === $.HYPHEN_MINUS) {\n        this.state = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;\n\n        this._emitChars('-');\n      } else if (cp === $.LESS_THAN_SIGN) {\n        this.state = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;\n      } else if (cp === $.NULL) {\n        this._err(ERR.unexpectedNullCharacter);\n\n        this.state = SCRIPT_DATA_ESCAPED_STATE;\n\n        this._emitChars(unicode.REPLACEMENT_CHARACTER);\n      } else if (cp === $.EOF) {\n        this._err(ERR.eofInScriptHtmlCommentLikeText);\n\n        this._emitEOFToken();\n      } else {\n        this.state = SCRIPT_DATA_ESCAPED_STATE;\n\n        this._emitCodePoint(cp);\n      }\n    } // Script data escaped dash dash state\n    //------------------------------------------------------------------\n\n  }, {\n    key: SCRIPT_DATA_ESCAPED_DASH_DASH_STATE,\n    value: function value(cp) {\n      if (cp === $.HYPHEN_MINUS) {\n        this._emitChars('-');\n      } else if (cp === $.LESS_THAN_SIGN) {\n        this.state = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;\n      } else if (cp === $.GREATER_THAN_SIGN) {\n        this.state = SCRIPT_DATA_STATE;\n\n        this._emitChars('>');\n      } else if (cp === $.NULL) {\n        this._err(ERR.unexpectedNullCharacter);\n\n        this.state = SCRIPT_DATA_ESCAPED_STATE;\n\n        this._emitChars(unicode.REPLACEMENT_CHARACTER);\n      } else if (cp === $.EOF) {\n        this._err(ERR.eofInScriptHtmlCommentLikeText);\n\n        this._emitEOFToken();\n      } else {\n        this.state = SCRIPT_DATA_ESCAPED_STATE;\n\n        this._emitCodePoint(cp);\n      }\n    } // Script data escaped less-than sign state\n    //------------------------------------------------------------------\n\n  }, {\n    key: SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE,\n    value: function value(cp) {\n      if (cp === $.SOLIDUS) {\n        this.tempBuff = [];\n        this.state = SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE;\n      } else if (isAsciiLetter(cp)) {\n        this.tempBuff = [];\n\n        this._emitChars('<');\n\n        this._reconsumeInState(SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE);\n      } else {\n        this._emitChars('<');\n\n        this._reconsumeInState(SCRIPT_DATA_ESCAPED_STATE);\n      }\n    } // Script data escaped end tag open state\n    //------------------------------------------------------------------\n\n  }, {\n    key: SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE,\n    value: function value(cp) {\n      if (isAsciiLetter(cp)) {\n        this._createEndTagToken();\n\n        this._reconsumeInState(SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE);\n      } else {\n        this._emitChars('</');\n\n        this._reconsumeInState(SCRIPT_DATA_ESCAPED_STATE);\n      }\n    } // Script data escaped end tag name state\n    //------------------------------------------------------------------\n\n  }, {\n    key: SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE,\n    value: function value(cp) {\n      if (isAsciiUpper(cp)) {\n        this.currentToken.tagName += toAsciiLowerChar(cp);\n        this.tempBuff.push(cp);\n      } else if (isAsciiLower(cp)) {\n        this.currentToken.tagName += toChar(cp);\n        this.tempBuff.push(cp);\n      } else {\n        if (this.lastStartTagName === this.currentToken.tagName) {\n          if (isWhitespace(cp)) {\n            this.state = BEFORE_ATTRIBUTE_NAME_STATE;\n            return;\n          }\n\n          if (cp === $.SOLIDUS) {\n            this.state = SELF_CLOSING_START_TAG_STATE;\n            return;\n          }\n\n          if (cp === $.GREATER_THAN_SIGN) {\n            this._emitCurrentToken();\n\n            this.state = DATA_STATE;\n            return;\n          }\n        }\n\n        this._emitChars('</');\n\n        this._emitSeveralCodePoints(this.tempBuff);\n\n        this._reconsumeInState(SCRIPT_DATA_ESCAPED_STATE);\n      }\n    } // Script data double escape start state\n    //------------------------------------------------------------------\n\n  }, {\n    key: SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE,\n    value: function value(cp) {\n      if (isWhitespace(cp) || cp === $.SOLIDUS || cp === $.GREATER_THAN_SIGN) {\n        this.state = this._isTempBufferEqualToScriptString() ? SCRIPT_DATA_DOUBLE_ESCAPED_STATE : SCRIPT_DATA_ESCAPED_STATE;\n\n        this._emitCodePoint(cp);\n      } else if (isAsciiUpper(cp)) {\n        this.tempBuff.push(toAsciiLowerCodePoint(cp));\n\n        this._emitCodePoint(cp);\n      } else if (isAsciiLower(cp)) {\n        this.tempBuff.push(cp);\n\n        this._emitCodePoint(cp);\n      } else {\n        this._reconsumeInState(SCRIPT_DATA_ESCAPED_STATE);\n      }\n    } // Script data double escaped state\n    //------------------------------------------------------------------\n\n  }, {\n    key: SCRIPT_DATA_DOUBLE_ESCAPED_STATE,\n    value: function value(cp) {\n      if (cp === $.HYPHEN_MINUS) {\n        this.state = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE;\n\n        this._emitChars('-');\n      } else if (cp === $.LESS_THAN_SIGN) {\n        this.state = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;\n\n        this._emitChars('<');\n      } else if (cp === $.NULL) {\n        this._err(ERR.unexpectedNullCharacter);\n\n        this._emitChars(unicode.REPLACEMENT_CHARACTER);\n      } else if (cp === $.EOF) {\n        this._err(ERR.eofInScriptHtmlCommentLikeText);\n\n        this._emitEOFToken();\n      } else {\n        this._emitCodePoint(cp);\n      }\n    } // Script data double escaped dash state\n    //------------------------------------------------------------------\n\n  }, {\n    key: SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE,\n    value: function value(cp) {\n      if (cp === $.HYPHEN_MINUS) {\n        this.state = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE;\n\n        this._emitChars('-');\n      } else if (cp === $.LESS_THAN_SIGN) {\n        this.state = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;\n\n        this._emitChars('<');\n      } else if (cp === $.NULL) {\n        this._err(ERR.unexpectedNullCharacter);\n\n        this.state = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;\n\n        this._emitChars(unicode.REPLACEMENT_CHARACTER);\n      } else if (cp === $.EOF) {\n        this._err(ERR.eofInScriptHtmlCommentLikeText);\n\n        this._emitEOFToken();\n      } else {\n        this.state = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;\n\n        this._emitCodePoint(cp);\n      }\n    } // Script data double escaped dash dash state\n    //------------------------------------------------------------------\n\n  }, {\n    key: SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE,\n    value: function value(cp) {\n      if (cp === $.HYPHEN_MINUS) {\n        this._emitChars('-');\n      } else if (cp === $.LESS_THAN_SIGN) {\n        this.state = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;\n\n        this._emitChars('<');\n      } else if (cp === $.GREATER_THAN_SIGN) {\n        this.state = SCRIPT_DATA_STATE;\n\n        this._emitChars('>');\n      } else if (cp === $.NULL) {\n        this._err(ERR.unexpectedNullCharacter);\n\n        this.state = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;\n\n        this._emitChars(unicode.REPLACEMENT_CHARACTER);\n      } else if (cp === $.EOF) {\n        this._err(ERR.eofInScriptHtmlCommentLikeText);\n\n        this._emitEOFToken();\n      } else {\n        this.state = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;\n\n        this._emitCodePoint(cp);\n      }\n    } // Script data double escaped less-than sign state\n    //------------------------------------------------------------------\n\n  }, {\n    key: SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE,\n    value: function value(cp) {\n      if (cp === $.SOLIDUS) {\n        this.tempBuff = [];\n        this.state = SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE;\n\n        this._emitChars('/');\n      } else {\n        this._reconsumeInState(SCRIPT_DATA_DOUBLE_ESCAPED_STATE);\n      }\n    } // Script data double escape end state\n    //------------------------------------------------------------------\n\n  }, {\n    key: SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE,\n    value: function value(cp) {\n      if (isWhitespace(cp) || cp === $.SOLIDUS || cp === $.GREATER_THAN_SIGN) {\n        this.state = this._isTempBufferEqualToScriptString() ? SCRIPT_DATA_ESCAPED_STATE : SCRIPT_DATA_DOUBLE_ESCAPED_STATE;\n\n        this._emitCodePoint(cp);\n      } else if (isAsciiUpper(cp)) {\n        this.tempBuff.push(toAsciiLowerCodePoint(cp));\n\n        this._emitCodePoint(cp);\n      } else if (isAsciiLower(cp)) {\n        this.tempBuff.push(cp);\n\n        this._emitCodePoint(cp);\n      } else {\n        this._reconsumeInState(SCRIPT_DATA_DOUBLE_ESCAPED_STATE);\n      }\n    } // Before attribute name state\n    //------------------------------------------------------------------\n\n  }, {\n    key: BEFORE_ATTRIBUTE_NAME_STATE,\n    value: function value(cp) {\n      if (isWhitespace(cp)) {\n        return;\n      }\n\n      if (cp === $.SOLIDUS || cp === $.GREATER_THAN_SIGN || cp === $.EOF) {\n        this._reconsumeInState(AFTER_ATTRIBUTE_NAME_STATE);\n      } else if (cp === $.EQUALS_SIGN) {\n        this._err(ERR.unexpectedEqualsSignBeforeAttributeName);\n\n        this._createAttr('=');\n\n        this.state = ATTRIBUTE_NAME_STATE;\n      } else {\n        this._createAttr('');\n\n        this._reconsumeInState(ATTRIBUTE_NAME_STATE);\n      }\n    } // Attribute name state\n    //------------------------------------------------------------------\n\n  }, {\n    key: ATTRIBUTE_NAME_STATE,\n    value: function value(cp) {\n      if (isWhitespace(cp) || cp === $.SOLIDUS || cp === $.GREATER_THAN_SIGN || cp === $.EOF) {\n        this._leaveAttrName(AFTER_ATTRIBUTE_NAME_STATE);\n\n        this._unconsume();\n      } else if (cp === $.EQUALS_SIGN) {\n        this._leaveAttrName(BEFORE_ATTRIBUTE_VALUE_STATE);\n      } else if (isAsciiUpper(cp)) {\n        this.currentAttr.name += toAsciiLowerChar(cp);\n      } else if (cp === $.QUOTATION_MARK || cp === $.APOSTROPHE || cp === $.LESS_THAN_SIGN) {\n        this._err(ERR.unexpectedCharacterInAttributeName);\n\n        this.currentAttr.name += toChar(cp);\n      } else if (cp === $.NULL) {\n        this._err(ERR.unexpectedNullCharacter);\n\n        this.currentAttr.name += unicode.REPLACEMENT_CHARACTER;\n      } else {\n        this.currentAttr.name += toChar(cp);\n      }\n    } // After attribute name state\n    //------------------------------------------------------------------\n\n  }, {\n    key: AFTER_ATTRIBUTE_NAME_STATE,\n    value: function value(cp) {\n      if (isWhitespace(cp)) {\n        return;\n      }\n\n      if (cp === $.SOLIDUS) {\n        this.state = SELF_CLOSING_START_TAG_STATE;\n      } else if (cp === $.EQUALS_SIGN) {\n        this.state = BEFORE_ATTRIBUTE_VALUE_STATE;\n      } else if (cp === $.GREATER_THAN_SIGN) {\n        this.state = DATA_STATE;\n\n        this._emitCurrentToken();\n      } else if (cp === $.EOF) {\n        this._err(ERR.eofInTag);\n\n        this._emitEOFToken();\n      } else {\n        this._createAttr('');\n\n        this._reconsumeInState(ATTRIBUTE_NAME_STATE);\n      }\n    } // Before attribute value state\n    //------------------------------------------------------------------\n\n  }, {\n    key: BEFORE_ATTRIBUTE_VALUE_STATE,\n    value: function value(cp) {\n      if (isWhitespace(cp)) {\n        return;\n      }\n\n      if (cp === $.QUOTATION_MARK) {\n        this.state = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;\n      } else if (cp === $.APOSTROPHE) {\n        this.state = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;\n      } else if (cp === $.GREATER_THAN_SIGN) {\n        this._err(ERR.missingAttributeValue);\n\n        this.state = DATA_STATE;\n\n        this._emitCurrentToken();\n      } else {\n        this._reconsumeInState(ATTRIBUTE_VALUE_UNQUOTED_STATE);\n      }\n    } // Attribute value (double-quoted) state\n    //------------------------------------------------------------------\n\n  }, {\n    key: ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE,\n    value: function value(cp) {\n      if (cp === $.QUOTATION_MARK) {\n        this.state = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;\n      } else if (cp === $.AMPERSAND) {\n        this.returnState = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;\n        this.state = CHARACTER_REFERENCE_STATE;\n      } else if (cp === $.NULL) {\n        this._err(ERR.unexpectedNullCharacter);\n\n        this.currentAttr.value += unicode.REPLACEMENT_CHARACTER;\n      } else if (cp === $.EOF) {\n        this._err(ERR.eofInTag);\n\n        this._emitEOFToken();\n      } else {\n        this.currentAttr.value += toChar(cp);\n      }\n    } // Attribute value (single-quoted) state\n    //------------------------------------------------------------------\n\n  }, {\n    key: ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE,\n    value: function value(cp) {\n      if (cp === $.APOSTROPHE) {\n        this.state = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;\n      } else if (cp === $.AMPERSAND) {\n        this.returnState = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;\n        this.state = CHARACTER_REFERENCE_STATE;\n      } else if (cp === $.NULL) {\n        this._err(ERR.unexpectedNullCharacter);\n\n        this.currentAttr.value += unicode.REPLACEMENT_CHARACTER;\n      } else if (cp === $.EOF) {\n        this._err(ERR.eofInTag);\n\n        this._emitEOFToken();\n      } else {\n        this.currentAttr.value += toChar(cp);\n      }\n    } // Attribute value (unquoted) state\n    //------------------------------------------------------------------\n\n  }, {\n    key: ATTRIBUTE_VALUE_UNQUOTED_STATE,\n    value: function value(cp) {\n      if (isWhitespace(cp)) {\n        this._leaveAttrValue(BEFORE_ATTRIBUTE_NAME_STATE);\n      } else if (cp === $.AMPERSAND) {\n        this.returnState = ATTRIBUTE_VALUE_UNQUOTED_STATE;\n        this.state = CHARACTER_REFERENCE_STATE;\n      } else if (cp === $.GREATER_THAN_SIGN) {\n        this._leaveAttrValue(DATA_STATE);\n\n        this._emitCurrentToken();\n      } else if (cp === $.NULL) {\n        this._err(ERR.unexpectedNullCharacter);\n\n        this.currentAttr.value += unicode.REPLACEMENT_CHARACTER;\n      } else if (cp === $.QUOTATION_MARK || cp === $.APOSTROPHE || cp === $.LESS_THAN_SIGN || cp === $.EQUALS_SIGN || cp === $.GRAVE_ACCENT) {\n        this._err(ERR.unexpectedCharacterInUnquotedAttributeValue);\n\n        this.currentAttr.value += toChar(cp);\n      } else if (cp === $.EOF) {\n        this._err(ERR.eofInTag);\n\n        this._emitEOFToken();\n      } else {\n        this.currentAttr.value += toChar(cp);\n      }\n    } // After attribute value (quoted) state\n    //------------------------------------------------------------------\n\n  }, {\n    key: AFTER_ATTRIBUTE_VALUE_QUOTED_STATE,\n    value: function value(cp) {\n      if (isWhitespace(cp)) {\n        this._leaveAttrValue(BEFORE_ATTRIBUTE_NAME_STATE);\n      } else if (cp === $.SOLIDUS) {\n        this._leaveAttrValue(SELF_CLOSING_START_TAG_STATE);\n      } else if (cp === $.GREATER_THAN_SIGN) {\n        this._leaveAttrValue(DATA_STATE);\n\n        this._emitCurrentToken();\n      } else if (cp === $.EOF) {\n        this._err(ERR.eofInTag);\n\n        this._emitEOFToken();\n      } else {\n        this._err(ERR.missingWhitespaceBetweenAttributes);\n\n        this._reconsumeInState(BEFORE_ATTRIBUTE_NAME_STATE);\n      }\n    } // Self-closing start tag state\n    //------------------------------------------------------------------\n\n  }, {\n    key: SELF_CLOSING_START_TAG_STATE,\n    value: function value(cp) {\n      if (cp === $.GREATER_THAN_SIGN) {\n        this.currentToken.selfClosing = true;\n        this.state = DATA_STATE;\n\n        this._emitCurrentToken();\n      } else if (cp === $.EOF) {\n        this._err(ERR.eofInTag);\n\n        this._emitEOFToken();\n      } else {\n        this._err(ERR.unexpectedSolidusInTag);\n\n        this._reconsumeInState(BEFORE_ATTRIBUTE_NAME_STATE);\n      }\n    } // Bogus comment state\n    //------------------------------------------------------------------\n\n  }, {\n    key: BOGUS_COMMENT_STATE,\n    value: function value(cp) {\n      if (cp === $.GREATER_THAN_SIGN) {\n        this.state = DATA_STATE;\n\n        this._emitCurrentToken();\n      } else if (cp === $.EOF) {\n        this._emitCurrentToken();\n\n        this._emitEOFToken();\n      } else if (cp === $.NULL) {\n        this._err(ERR.unexpectedNullCharacter);\n\n        this.currentToken.data += unicode.REPLACEMENT_CHARACTER;\n      } else {\n        this.currentToken.data += toChar(cp);\n      }\n    } // Markup declaration open state\n    //------------------------------------------------------------------\n\n  }, {\n    key: MARKUP_DECLARATION_OPEN_STATE,\n    value: function value(cp) {\n      if (this._consumeSequenceIfMatch($$.DASH_DASH_STRING, cp, true)) {\n        this._createCommentToken();\n\n        this.state = COMMENT_START_STATE;\n      } else if (this._consumeSequenceIfMatch($$.DOCTYPE_STRING, cp, false)) {\n        this.state = DOCTYPE_STATE;\n      } else if (this._consumeSequenceIfMatch($$.CDATA_START_STRING, cp, true)) {\n        if (this.allowCDATA) {\n          this.state = CDATA_SECTION_STATE;\n        } else {\n          this._err(ERR.cdataInHtmlContent);\n\n          this._createCommentToken();\n\n          this.currentToken.data = '[CDATA[';\n          this.state = BOGUS_COMMENT_STATE;\n        }\n      } //NOTE: sequence lookup can be abrupted by hibernation. In that case lookup\n      //results are no longer valid and we will need to start over.\n      else if (!this._ensureHibernation()) {\n        this._err(ERR.incorrectlyOpenedComment);\n\n        this._createCommentToken();\n\n        this._reconsumeInState(BOGUS_COMMENT_STATE);\n      }\n    } // Comment start state\n    //------------------------------------------------------------------\n\n  }, {\n    key: COMMENT_START_STATE,\n    value: function value(cp) {\n      if (cp === $.HYPHEN_MINUS) {\n        this.state = COMMENT_START_DASH_STATE;\n      } else if (cp === $.GREATER_THAN_SIGN) {\n        this._err(ERR.abruptClosingOfEmptyComment);\n\n        this.state = DATA_STATE;\n\n        this._emitCurrentToken();\n      } else {\n        this._reconsumeInState(COMMENT_STATE);\n      }\n    } // Comment start dash state\n    //------------------------------------------------------------------\n\n  }, {\n    key: COMMENT_START_DASH_STATE,\n    value: function value(cp) {\n      if (cp === $.HYPHEN_MINUS) {\n        this.state = COMMENT_END_STATE;\n      } else if (cp === $.GREATER_THAN_SIGN) {\n        this._err(ERR.abruptClosingOfEmptyComment);\n\n        this.state = DATA_STATE;\n\n        this._emitCurrentToken();\n      } else if (cp === $.EOF) {\n        this._err(ERR.eofInComment);\n\n        this._emitCurrentToken();\n\n        this._emitEOFToken();\n      } else {\n        this.currentToken.data += '-';\n\n        this._reconsumeInState(COMMENT_STATE);\n      }\n    } // Comment state\n    //------------------------------------------------------------------\n\n  }, {\n    key: COMMENT_STATE,\n    value: function value(cp) {\n      if (cp === $.HYPHEN_MINUS) {\n        this.state = COMMENT_END_DASH_STATE;\n      } else if (cp === $.LESS_THAN_SIGN) {\n        this.currentToken.data += '<';\n        this.state = COMMENT_LESS_THAN_SIGN_STATE;\n      } else if (cp === $.NULL) {\n        this._err(ERR.unexpectedNullCharacter);\n\n        this.currentToken.data += unicode.REPLACEMENT_CHARACTER;\n      } else if (cp === $.EOF) {\n        this._err(ERR.eofInComment);\n\n        this._emitCurrentToken();\n\n        this._emitEOFToken();\n      } else {\n        this.currentToken.data += toChar(cp);\n      }\n    } // Comment less-than sign state\n    //------------------------------------------------------------------\n\n  }, {\n    key: COMMENT_LESS_THAN_SIGN_STATE,\n    value: function value(cp) {\n      if (cp === $.EXCLAMATION_MARK) {\n        this.currentToken.data += '!';\n        this.state = COMMENT_LESS_THAN_SIGN_BANG_STATE;\n      } else if (cp === $.LESS_THAN_SIGN) {\n        this.currentToken.data += '!';\n      } else {\n        this._reconsumeInState(COMMENT_STATE);\n      }\n    } // Comment less-than sign bang state\n    //------------------------------------------------------------------\n\n  }, {\n    key: COMMENT_LESS_THAN_SIGN_BANG_STATE,\n    value: function value(cp) {\n      if (cp === $.HYPHEN_MINUS) {\n        this.state = COMMENT_LESS_THAN_SIGN_BANG_DASH_STATE;\n      } else {\n        this._reconsumeInState(COMMENT_STATE);\n      }\n    } // Comment less-than sign bang dash state\n    //------------------------------------------------------------------\n\n  }, {\n    key: COMMENT_LESS_THAN_SIGN_BANG_DASH_STATE,\n    value: function value(cp) {\n      if (cp === $.HYPHEN_MINUS) {\n        this.state = COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH_STATE;\n      } else {\n        this._reconsumeInState(COMMENT_END_DASH_STATE);\n      }\n    } // Comment less-than sign bang dash dash state\n    //------------------------------------------------------------------\n\n  }, {\n    key: COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH_STATE,\n    value: function value(cp) {\n      if (cp !== $.GREATER_THAN_SIGN && cp !== $.EOF) {\n        this._err(ERR.nestedComment);\n      }\n\n      this._reconsumeInState(COMMENT_END_STATE);\n    } // Comment end dash state\n    //------------------------------------------------------------------\n\n  }, {\n    key: COMMENT_END_DASH_STATE,\n    value: function value(cp) {\n      if (cp === $.HYPHEN_MINUS) {\n        this.state = COMMENT_END_STATE;\n      } else if (cp === $.EOF) {\n        this._err(ERR.eofInComment);\n\n        this._emitCurrentToken();\n\n        this._emitEOFToken();\n      } else {\n        this.currentToken.data += '-';\n\n        this._reconsumeInState(COMMENT_STATE);\n      }\n    } // Comment end state\n    //------------------------------------------------------------------\n\n  }, {\n    key: COMMENT_END_STATE,\n    value: function value(cp) {\n      if (cp === $.GREATER_THAN_SIGN) {\n        this.state = DATA_STATE;\n\n        this._emitCurrentToken();\n      } else if (cp === $.EXCLAMATION_MARK) {\n        this.state = COMMENT_END_BANG_STATE;\n      } else if (cp === $.HYPHEN_MINUS) {\n        this.currentToken.data += '-';\n      } else if (cp === $.EOF) {\n        this._err(ERR.eofInComment);\n\n        this._emitCurrentToken();\n\n        this._emitEOFToken();\n      } else {\n        this.currentToken.data += '--';\n\n        this._reconsumeInState(COMMENT_STATE);\n      }\n    } // Comment end bang state\n    //------------------------------------------------------------------\n\n  }, {\n    key: COMMENT_END_BANG_STATE,\n    value: function value(cp) {\n      if (cp === $.HYPHEN_MINUS) {\n        this.currentToken.data += '--!';\n        this.state = COMMENT_END_DASH_STATE;\n      } else if (cp === $.GREATER_THAN_SIGN) {\n        this._err(ERR.incorrectlyClosedComment);\n\n        this.state = DATA_STATE;\n\n        this._emitCurrentToken();\n      } else if (cp === $.EOF) {\n        this._err(ERR.eofInComment);\n\n        this._emitCurrentToken();\n\n        this._emitEOFToken();\n      } else {\n        this.currentToken.data += '--!';\n\n        this._reconsumeInState(COMMENT_STATE);\n      }\n    } // DOCTYPE state\n    //------------------------------------------------------------------\n\n  }, {\n    key: DOCTYPE_STATE,\n    value: function value(cp) {\n      if (isWhitespace(cp)) {\n        this.state = BEFORE_DOCTYPE_NAME_STATE;\n      } else if (cp === $.GREATER_THAN_SIGN) {\n        this._reconsumeInState(BEFORE_DOCTYPE_NAME_STATE);\n      } else if (cp === $.EOF) {\n        this._err(ERR.eofInDoctype);\n\n        this._createDoctypeToken(null);\n\n        this.currentToken.forceQuirks = true;\n\n        this._emitCurrentToken();\n\n        this._emitEOFToken();\n      } else {\n        this._err(ERR.missingWhitespaceBeforeDoctypeName);\n\n        this._reconsumeInState(BEFORE_DOCTYPE_NAME_STATE);\n      }\n    } // Before DOCTYPE name state\n    //------------------------------------------------------------------\n\n  }, {\n    key: BEFORE_DOCTYPE_NAME_STATE,\n    value: function value(cp) {\n      if (isWhitespace(cp)) {\n        return;\n      }\n\n      if (isAsciiUpper(cp)) {\n        this._createDoctypeToken(toAsciiLowerChar(cp));\n\n        this.state = DOCTYPE_NAME_STATE;\n      } else if (cp === $.NULL) {\n        this._err(ERR.unexpectedNullCharacter);\n\n        this._createDoctypeToken(unicode.REPLACEMENT_CHARACTER);\n\n        this.state = DOCTYPE_NAME_STATE;\n      } else if (cp === $.GREATER_THAN_SIGN) {\n        this._err(ERR.missingDoctypeName);\n\n        this._createDoctypeToken(null);\n\n        this.currentToken.forceQuirks = true;\n\n        this._emitCurrentToken();\n\n        this.state = DATA_STATE;\n      } else if (cp === $.EOF) {\n        this._err(ERR.eofInDoctype);\n\n        this._createDoctypeToken(null);\n\n        this.currentToken.forceQuirks = true;\n\n        this._emitCurrentToken();\n\n        this._emitEOFToken();\n      } else {\n        this._createDoctypeToken(toChar(cp));\n\n        this.state = DOCTYPE_NAME_STATE;\n      }\n    } // DOCTYPE name state\n    //------------------------------------------------------------------\n\n  }, {\n    key: DOCTYPE_NAME_STATE,\n    value: function value(cp) {\n      if (isWhitespace(cp)) {\n        this.state = AFTER_DOCTYPE_NAME_STATE;\n      } else if (cp === $.GREATER_THAN_SIGN) {\n        this.state = DATA_STATE;\n\n        this._emitCurrentToken();\n      } else if (isAsciiUpper(cp)) {\n        this.currentToken.name += toAsciiLowerChar(cp);\n      } else if (cp === $.NULL) {\n        this._err(ERR.unexpectedNullCharacter);\n\n        this.currentToken.name += unicode.REPLACEMENT_CHARACTER;\n      } else if (cp === $.EOF) {\n        this._err(ERR.eofInDoctype);\n\n        this.currentToken.forceQuirks = true;\n\n        this._emitCurrentToken();\n\n        this._emitEOFToken();\n      } else {\n        this.currentToken.name += toChar(cp);\n      }\n    } // After DOCTYPE name state\n    //------------------------------------------------------------------\n\n  }, {\n    key: AFTER_DOCTYPE_NAME_STATE,\n    value: function value(cp) {\n      if (isWhitespace(cp)) {\n        return;\n      }\n\n      if (cp === $.GREATER_THAN_SIGN) {\n        this.state = DATA_STATE;\n\n        this._emitCurrentToken();\n      } else if (cp === $.EOF) {\n        this._err(ERR.eofInDoctype);\n\n        this.currentToken.forceQuirks = true;\n\n        this._emitCurrentToken();\n\n        this._emitEOFToken();\n      } else if (this._consumeSequenceIfMatch($$.PUBLIC_STRING, cp, false)) {\n        this.state = AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE;\n      } else if (this._consumeSequenceIfMatch($$.SYSTEM_STRING, cp, false)) {\n        this.state = AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE;\n      } //NOTE: sequence lookup can be abrupted by hibernation. In that case lookup\n      //results are no longer valid and we will need to start over.\n      else if (!this._ensureHibernation()) {\n        this._err(ERR.invalidCharacterSequenceAfterDoctypeName);\n\n        this.currentToken.forceQuirks = true;\n\n        this._reconsumeInState(BOGUS_DOCTYPE_STATE);\n      }\n    } // After DOCTYPE public keyword state\n    //------------------------------------------------------------------\n\n  }, {\n    key: AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE,\n    value: function value(cp) {\n      if (isWhitespace(cp)) {\n        this.state = BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE;\n      } else if (cp === $.QUOTATION_MARK) {\n        this._err(ERR.missingWhitespaceAfterDoctypePublicKeyword);\n\n        this.currentToken.publicId = '';\n        this.state = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;\n      } else if (cp === $.APOSTROPHE) {\n        this._err(ERR.missingWhitespaceAfterDoctypePublicKeyword);\n\n        this.currentToken.publicId = '';\n        this.state = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;\n      } else if (cp === $.GREATER_THAN_SIGN) {\n        this._err(ERR.missingDoctypePublicIdentifier);\n\n        this.currentToken.forceQuirks = true;\n        this.state = DATA_STATE;\n\n        this._emitCurrentToken();\n      } else if (cp === $.EOF) {\n        this._err(ERR.eofInDoctype);\n\n        this.currentToken.forceQuirks = true;\n\n        this._emitCurrentToken();\n\n        this._emitEOFToken();\n      } else {\n        this._err(ERR.missingQuoteBeforeDoctypePublicIdentifier);\n\n        this.currentToken.forceQuirks = true;\n\n        this._reconsumeInState(BOGUS_DOCTYPE_STATE);\n      }\n    } // Before DOCTYPE public identifier state\n    //------------------------------------------------------------------\n\n  }, {\n    key: BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE,\n    value: function value(cp) {\n      if (isWhitespace(cp)) {\n        return;\n      }\n\n      if (cp === $.QUOTATION_MARK) {\n        this.currentToken.publicId = '';\n        this.state = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;\n      } else if (cp === $.APOSTROPHE) {\n        this.currentToken.publicId = '';\n        this.state = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;\n      } else if (cp === $.GREATER_THAN_SIGN) {\n        this._err(ERR.missingDoctypePublicIdentifier);\n\n        this.currentToken.forceQuirks = true;\n        this.state = DATA_STATE;\n\n        this._emitCurrentToken();\n      } else if (cp === $.EOF) {\n        this._err(ERR.eofInDoctype);\n\n        this.currentToken.forceQuirks = true;\n\n        this._emitCurrentToken();\n\n        this._emitEOFToken();\n      } else {\n        this._err(ERR.missingQuoteBeforeDoctypePublicIdentifier);\n\n        this.currentToken.forceQuirks = true;\n\n        this._reconsumeInState(BOGUS_DOCTYPE_STATE);\n      }\n    } // DOCTYPE public identifier (double-quoted) state\n    //------------------------------------------------------------------\n\n  }, {\n    key: DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE,\n    value: function value(cp) {\n      if (cp === $.QUOTATION_MARK) {\n        this.state = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE;\n      } else if (cp === $.NULL) {\n        this._err(ERR.unexpectedNullCharacter);\n\n        this.currentToken.publicId += unicode.REPLACEMENT_CHARACTER;\n      } else if (cp === $.GREATER_THAN_SIGN) {\n        this._err(ERR.abruptDoctypePublicIdentifier);\n\n        this.currentToken.forceQuirks = true;\n\n        this._emitCurrentToken();\n\n        this.state = DATA_STATE;\n      } else if (cp === $.EOF) {\n        this._err(ERR.eofInDoctype);\n\n        this.currentToken.forceQuirks = true;\n\n        this._emitCurrentToken();\n\n        this._emitEOFToken();\n      } else {\n        this.currentToken.publicId += toChar(cp);\n      }\n    } // DOCTYPE public identifier (single-quoted) state\n    //------------------------------------------------------------------\n\n  }, {\n    key: DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE,\n    value: function value(cp) {\n      if (cp === $.APOSTROPHE) {\n        this.state = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE;\n      } else if (cp === $.NULL) {\n        this._err(ERR.unexpectedNullCharacter);\n\n        this.currentToken.publicId += unicode.REPLACEMENT_CHARACTER;\n      } else if (cp === $.GREATER_THAN_SIGN) {\n        this._err(ERR.abruptDoctypePublicIdentifier);\n\n        this.currentToken.forceQuirks = true;\n\n        this._emitCurrentToken();\n\n        this.state = DATA_STATE;\n      } else if (cp === $.EOF) {\n        this._err(ERR.eofInDoctype);\n\n        this.currentToken.forceQuirks = true;\n\n        this._emitCurrentToken();\n\n        this._emitEOFToken();\n      } else {\n        this.currentToken.publicId += toChar(cp);\n      }\n    } // After DOCTYPE public identifier state\n    //------------------------------------------------------------------\n\n  }, {\n    key: AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE,\n    value: function value(cp) {\n      if (isWhitespace(cp)) {\n        this.state = BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE;\n      } else if (cp === $.GREATER_THAN_SIGN) {\n        this.state = DATA_STATE;\n\n        this._emitCurrentToken();\n      } else if (cp === $.QUOTATION_MARK) {\n        this._err(ERR.missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers);\n\n        this.currentToken.systemId = '';\n        this.state = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;\n      } else if (cp === $.APOSTROPHE) {\n        this._err(ERR.missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers);\n\n        this.currentToken.systemId = '';\n        this.state = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;\n      } else if (cp === $.EOF) {\n        this._err(ERR.eofInDoctype);\n\n        this.currentToken.forceQuirks = true;\n\n        this._emitCurrentToken();\n\n        this._emitEOFToken();\n      } else {\n        this._err(ERR.missingQuoteBeforeDoctypeSystemIdentifier);\n\n        this.currentToken.forceQuirks = true;\n\n        this._reconsumeInState(BOGUS_DOCTYPE_STATE);\n      }\n    } // Between DOCTYPE public and system identifiers state\n    //------------------------------------------------------------------\n\n  }, {\n    key: BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE,\n    value: function value(cp) {\n      if (isWhitespace(cp)) {\n        return;\n      }\n\n      if (cp === $.GREATER_THAN_SIGN) {\n        this._emitCurrentToken();\n\n        this.state = DATA_STATE;\n      } else if (cp === $.QUOTATION_MARK) {\n        this.currentToken.systemId = '';\n        this.state = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;\n      } else if (cp === $.APOSTROPHE) {\n        this.currentToken.systemId = '';\n        this.state = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;\n      } else if (cp === $.EOF) {\n        this._err(ERR.eofInDoctype);\n\n        this.currentToken.forceQuirks = true;\n\n        this._emitCurrentToken();\n\n        this._emitEOFToken();\n      } else {\n        this._err(ERR.missingQuoteBeforeDoctypeSystemIdentifier);\n\n        this.currentToken.forceQuirks = true;\n\n        this._reconsumeInState(BOGUS_DOCTYPE_STATE);\n      }\n    } // After DOCTYPE system keyword state\n    //------------------------------------------------------------------\n\n  }, {\n    key: AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE,\n    value: function value(cp) {\n      if (isWhitespace(cp)) {\n        this.state = BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE;\n      } else if (cp === $.QUOTATION_MARK) {\n        this._err(ERR.missingWhitespaceAfterDoctypeSystemKeyword);\n\n        this.currentToken.systemId = '';\n        this.state = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;\n      } else if (cp === $.APOSTROPHE) {\n        this._err(ERR.missingWhitespaceAfterDoctypeSystemKeyword);\n\n        this.currentToken.systemId = '';\n        this.state = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;\n      } else if (cp === $.GREATER_THAN_SIGN) {\n        this._err(ERR.missingDoctypeSystemIdentifier);\n\n        this.currentToken.forceQuirks = true;\n        this.state = DATA_STATE;\n\n        this._emitCurrentToken();\n      } else if (cp === $.EOF) {\n        this._err(ERR.eofInDoctype);\n\n        this.currentToken.forceQuirks = true;\n\n        this._emitCurrentToken();\n\n        this._emitEOFToken();\n      } else {\n        this._err(ERR.missingQuoteBeforeDoctypeSystemIdentifier);\n\n        this.currentToken.forceQuirks = true;\n\n        this._reconsumeInState(BOGUS_DOCTYPE_STATE);\n      }\n    } // Before DOCTYPE system identifier state\n    //------------------------------------------------------------------\n\n  }, {\n    key: BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE,\n    value: function value(cp) {\n      if (isWhitespace(cp)) {\n        return;\n      }\n\n      if (cp === $.QUOTATION_MARK) {\n        this.currentToken.systemId = '';\n        this.state = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;\n      } else if (cp === $.APOSTROPHE) {\n        this.currentToken.systemId = '';\n        this.state = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;\n      } else if (cp === $.GREATER_THAN_SIGN) {\n        this._err(ERR.missingDoctypeSystemIdentifier);\n\n        this.currentToken.forceQuirks = true;\n        this.state = DATA_STATE;\n\n        this._emitCurrentToken();\n      } else if (cp === $.EOF) {\n        this._err(ERR.eofInDoctype);\n\n        this.currentToken.forceQuirks = true;\n\n        this._emitCurrentToken();\n\n        this._emitEOFToken();\n      } else {\n        this._err(ERR.missingQuoteBeforeDoctypeSystemIdentifier);\n\n        this.currentToken.forceQuirks = true;\n\n        this._reconsumeInState(BOGUS_DOCTYPE_STATE);\n      }\n    } // DOCTYPE system identifier (double-quoted) state\n    //------------------------------------------------------------------\n\n  }, {\n    key: DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE,\n    value: function value(cp) {\n      if (cp === $.QUOTATION_MARK) {\n        this.state = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;\n      } else if (cp === $.NULL) {\n        this._err(ERR.unexpectedNullCharacter);\n\n        this.currentToken.systemId += unicode.REPLACEMENT_CHARACTER;\n      } else if (cp === $.GREATER_THAN_SIGN) {\n        this._err(ERR.abruptDoctypeSystemIdentifier);\n\n        this.currentToken.forceQuirks = true;\n\n        this._emitCurrentToken();\n\n        this.state = DATA_STATE;\n      } else if (cp === $.EOF) {\n        this._err(ERR.eofInDoctype);\n\n        this.currentToken.forceQuirks = true;\n\n        this._emitCurrentToken();\n\n        this._emitEOFToken();\n      } else {\n        this.currentToken.systemId += toChar(cp);\n      }\n    } // DOCTYPE system identifier (single-quoted) state\n    //------------------------------------------------------------------\n\n  }, {\n    key: DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE,\n    value: function value(cp) {\n      if (cp === $.APOSTROPHE) {\n        this.state = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;\n      } else if (cp === $.NULL) {\n        this._err(ERR.unexpectedNullCharacter);\n\n        this.currentToken.systemId += unicode.REPLACEMENT_CHARACTER;\n      } else if (cp === $.GREATER_THAN_SIGN) {\n        this._err(ERR.abruptDoctypeSystemIdentifier);\n\n        this.currentToken.forceQuirks = true;\n\n        this._emitCurrentToken();\n\n        this.state = DATA_STATE;\n      } else if (cp === $.EOF) {\n        this._err(ERR.eofInDoctype);\n\n        this.currentToken.forceQuirks = true;\n\n        this._emitCurrentToken();\n\n        this._emitEOFToken();\n      } else {\n        this.currentToken.systemId += toChar(cp);\n      }\n    } // After DOCTYPE system identifier state\n    //------------------------------------------------------------------\n\n  }, {\n    key: AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE,\n    value: function value(cp) {\n      if (isWhitespace(cp)) {\n        return;\n      }\n\n      if (cp === $.GREATER_THAN_SIGN) {\n        this._emitCurrentToken();\n\n        this.state = DATA_STATE;\n      } else if (cp === $.EOF) {\n        this._err(ERR.eofInDoctype);\n\n        this.currentToken.forceQuirks = true;\n\n        this._emitCurrentToken();\n\n        this._emitEOFToken();\n      } else {\n        this._err(ERR.unexpectedCharacterAfterDoctypeSystemIdentifier);\n\n        this._reconsumeInState(BOGUS_DOCTYPE_STATE);\n      }\n    } // Bogus DOCTYPE state\n    //------------------------------------------------------------------\n\n  }, {\n    key: BOGUS_DOCTYPE_STATE,\n    value: function value(cp) {\n      if (cp === $.GREATER_THAN_SIGN) {\n        this._emitCurrentToken();\n\n        this.state = DATA_STATE;\n      } else if (cp === $.NULL) {\n        this._err(ERR.unexpectedNullCharacter);\n      } else if (cp === $.EOF) {\n        this._emitCurrentToken();\n\n        this._emitEOFToken();\n      }\n    } // CDATA section state\n    //------------------------------------------------------------------\n\n  }, {\n    key: CDATA_SECTION_STATE,\n    value: function value(cp) {\n      if (cp === $.RIGHT_SQUARE_BRACKET) {\n        this.state = CDATA_SECTION_BRACKET_STATE;\n      } else if (cp === $.EOF) {\n        this._err(ERR.eofInCdata);\n\n        this._emitEOFToken();\n      } else {\n        this._emitCodePoint(cp);\n      }\n    } // CDATA section bracket state\n    //------------------------------------------------------------------\n\n  }, {\n    key: CDATA_SECTION_BRACKET_STATE,\n    value: function value(cp) {\n      if (cp === $.RIGHT_SQUARE_BRACKET) {\n        this.state = CDATA_SECTION_END_STATE;\n      } else {\n        this._emitChars(']');\n\n        this._reconsumeInState(CDATA_SECTION_STATE);\n      }\n    } // CDATA section end state\n    //------------------------------------------------------------------\n\n  }, {\n    key: CDATA_SECTION_END_STATE,\n    value: function value(cp) {\n      if (cp === $.GREATER_THAN_SIGN) {\n        this.state = DATA_STATE;\n      } else if (cp === $.RIGHT_SQUARE_BRACKET) {\n        this._emitChars(']');\n      } else {\n        this._emitChars(']]');\n\n        this._reconsumeInState(CDATA_SECTION_STATE);\n      }\n    } // Character reference state\n    //------------------------------------------------------------------\n\n  }, {\n    key: CHARACTER_REFERENCE_STATE,\n    value: function value(cp) {\n      this.tempBuff = [$.AMPERSAND];\n\n      if (cp === $.NUMBER_SIGN) {\n        this.tempBuff.push(cp);\n        this.state = NUMERIC_CHARACTER_REFERENCE_STATE;\n      } else if (isAsciiAlphaNumeric(cp)) {\n        this._reconsumeInState(NAMED_CHARACTER_REFERENCE_STATE);\n      } else {\n        this._flushCodePointsConsumedAsCharacterReference();\n\n        this._reconsumeInState(this.returnState);\n      }\n    } // Named character reference state\n    //------------------------------------------------------------------\n\n  }, {\n    key: NAMED_CHARACTER_REFERENCE_STATE,\n    value: function value(cp) {\n      var matchResult = this._matchNamedCharacterReference(cp); //NOTE: matching can be abrupted by hibernation. In that case match\n      //results are no longer valid and we will need to start over.\n\n\n      if (this._ensureHibernation()) {\n        this.tempBuff = [$.AMPERSAND];\n      } else if (matchResult) {\n        var withSemicolon = this.tempBuff[this.tempBuff.length - 1] === $.SEMICOLON;\n\n        if (!this._isCharacterReferenceAttributeQuirk(withSemicolon)) {\n          if (!withSemicolon) {\n            this._errOnNextCodePoint(ERR.missingSemicolonAfterCharacterReference);\n          }\n\n          this.tempBuff = matchResult;\n        }\n\n        this._flushCodePointsConsumedAsCharacterReference();\n\n        this.state = this.returnState;\n      } else {\n        this._flushCodePointsConsumedAsCharacterReference();\n\n        this.state = AMBIGUOUS_AMPERSAND_STATE;\n      }\n    } // Ambiguos ampersand state\n    //------------------------------------------------------------------\n\n  }, {\n    key: AMBIGUOUS_AMPERSAND_STATE,\n    value: function value(cp) {\n      if (isAsciiAlphaNumeric(cp)) {\n        if (this._isCharacterReferenceInAttribute()) {\n          this.currentAttr.value += toChar(cp);\n        } else {\n          this._emitCodePoint(cp);\n        }\n      } else {\n        if (cp === $.SEMICOLON) {\n          this._err(ERR.unknownNamedCharacterReference);\n        }\n\n        this._reconsumeInState(this.returnState);\n      }\n    } // Numeric character reference state\n    //------------------------------------------------------------------\n\n  }, {\n    key: NUMERIC_CHARACTER_REFERENCE_STATE,\n    value: function value(cp) {\n      this.charRefCode = 0;\n\n      if (cp === $.LATIN_SMALL_X || cp === $.LATIN_CAPITAL_X) {\n        this.tempBuff.push(cp);\n        this.state = HEXADEMICAL_CHARACTER_REFERENCE_START_STATE;\n      } else {\n        this._reconsumeInState(DECIMAL_CHARACTER_REFERENCE_START_STATE);\n      }\n    } // Hexademical character reference start state\n    //------------------------------------------------------------------\n\n  }, {\n    key: HEXADEMICAL_CHARACTER_REFERENCE_START_STATE,\n    value: function value(cp) {\n      if (isAsciiHexDigit(cp)) {\n        this._reconsumeInState(HEXADEMICAL_CHARACTER_REFERENCE_STATE);\n      } else {\n        this._err(ERR.absenceOfDigitsInNumericCharacterReference);\n\n        this._flushCodePointsConsumedAsCharacterReference();\n\n        this._reconsumeInState(this.returnState);\n      }\n    } // Decimal character reference start state\n    //------------------------------------------------------------------\n\n  }, {\n    key: DECIMAL_CHARACTER_REFERENCE_START_STATE,\n    value: function value(cp) {\n      if (isAsciiDigit(cp)) {\n        this._reconsumeInState(DECIMAL_CHARACTER_REFERENCE_STATE);\n      } else {\n        this._err(ERR.absenceOfDigitsInNumericCharacterReference);\n\n        this._flushCodePointsConsumedAsCharacterReference();\n\n        this._reconsumeInState(this.returnState);\n      }\n    } // Hexademical character reference state\n    //------------------------------------------------------------------\n\n  }, {\n    key: HEXADEMICAL_CHARACTER_REFERENCE_STATE,\n    value: function value(cp) {\n      if (isAsciiUpperHexDigit(cp)) {\n        this.charRefCode = this.charRefCode * 16 + cp - 0x37;\n      } else if (isAsciiLowerHexDigit(cp)) {\n        this.charRefCode = this.charRefCode * 16 + cp - 0x57;\n      } else if (isAsciiDigit(cp)) {\n        this.charRefCode = this.charRefCode * 16 + cp - 0x30;\n      } else if (cp === $.SEMICOLON) {\n        this.state = NUMERIC_CHARACTER_REFERENCE_END_STATE;\n      } else {\n        this._err(ERR.missingSemicolonAfterCharacterReference);\n\n        this._reconsumeInState(NUMERIC_CHARACTER_REFERENCE_END_STATE);\n      }\n    } // Decimal character reference state\n    //------------------------------------------------------------------\n\n  }, {\n    key: DECIMAL_CHARACTER_REFERENCE_STATE,\n    value: function value(cp) {\n      if (isAsciiDigit(cp)) {\n        this.charRefCode = this.charRefCode * 10 + cp - 0x30;\n      } else if (cp === $.SEMICOLON) {\n        this.state = NUMERIC_CHARACTER_REFERENCE_END_STATE;\n      } else {\n        this._err(ERR.missingSemicolonAfterCharacterReference);\n\n        this._reconsumeInState(NUMERIC_CHARACTER_REFERENCE_END_STATE);\n      }\n    } // Numeric character reference end state\n    //------------------------------------------------------------------\n\n  }, {\n    key: NUMERIC_CHARACTER_REFERENCE_END_STATE,\n    value: function value() {\n      if (this.charRefCode === $.NULL) {\n        this._err(ERR.nullCharacterReference);\n\n        this.charRefCode = $.REPLACEMENT_CHARACTER;\n      } else if (this.charRefCode > 0x10ffff) {\n        this._err(ERR.characterReferenceOutsideUnicodeRange);\n\n        this.charRefCode = $.REPLACEMENT_CHARACTER;\n      } else if (unicode.isSurrogate(this.charRefCode)) {\n        this._err(ERR.surrogateCharacterReference);\n\n        this.charRefCode = $.REPLACEMENT_CHARACTER;\n      } else if (unicode.isUndefinedCodePoint(this.charRefCode)) {\n        this._err(ERR.noncharacterCharacterReference);\n      } else if (unicode.isControlCodePoint(this.charRefCode) || this.charRefCode === $.CARRIAGE_RETURN) {\n        this._err(ERR.controlCharacterReference);\n\n        var replacement = C1_CONTROLS_REFERENCE_REPLACEMENTS[this.charRefCode];\n\n        if (replacement) {\n          this.charRefCode = replacement;\n        }\n      }\n\n      this.tempBuff = [this.charRefCode];\n\n      this._flushCodePointsConsumedAsCharacterReference();\n\n      this._reconsumeInState(this.returnState);\n    }\n  }]);\n\n  return Tokenizer;\n}(); //Token types\n\n\nTokenizer.CHARACTER_TOKEN = 'CHARACTER_TOKEN';\nTokenizer.NULL_CHARACTER_TOKEN = 'NULL_CHARACTER_TOKEN';\nTokenizer.WHITESPACE_CHARACTER_TOKEN = 'WHITESPACE_CHARACTER_TOKEN';\nTokenizer.START_TAG_TOKEN = 'START_TAG_TOKEN';\nTokenizer.END_TAG_TOKEN = 'END_TAG_TOKEN';\nTokenizer.COMMENT_TOKEN = 'COMMENT_TOKEN';\nTokenizer.DOCTYPE_TOKEN = 'DOCTYPE_TOKEN';\nTokenizer.EOF_TOKEN = 'EOF_TOKEN';\nTokenizer.HIBERNATION_TOKEN = 'HIBERNATION_TOKEN'; //Tokenizer initial states for different modes\n\nTokenizer.MODE = {\n  DATA: DATA_STATE,\n  RCDATA: RCDATA_STATE,\n  RAWTEXT: RAWTEXT_STATE,\n  SCRIPT_DATA: SCRIPT_DATA_STATE,\n  PLAINTEXT: PLAINTEXT_STATE\n}; //Static\n\nTokenizer.getTokenAttr = function (token, attrName) {\n  for (var i = token.attrs.length - 1; i >= 0; i--) {\n    if (token.attrs[i].name === attrName) {\n      return token.attrs[i].value;\n    }\n  }\n\n  return null;\n};\n\nmodule.exports = Tokenizer;","map":{"version":3,"sources":["/home/thomas/Code/BingoFerrand/node_modules/cheerio/node_modules/parse5/lib/tokenizer/index.js"],"names":["Preprocessor","require","unicode","neTree","ERR","$","CODE_POINTS","$$","CODE_POINT_SEQUENCES","C1_CONTROLS_REFERENCE_REPLACEMENTS","HAS_DATA_FLAG","DATA_DUPLET_FLAG","HAS_BRANCHES_FLAG","MAX_BRANCH_MARKER_VALUE","DATA_STATE","RCDATA_STATE","RAWTEXT_STATE","SCRIPT_DATA_STATE","PLAINTEXT_STATE","TAG_OPEN_STATE","END_TAG_OPEN_STATE","TAG_NAME_STATE","RCDATA_LESS_THAN_SIGN_STATE","RCDATA_END_TAG_OPEN_STATE","RCDATA_END_TAG_NAME_STATE","RAWTEXT_LESS_THAN_SIGN_STATE","RAWTEXT_END_TAG_OPEN_STATE","RAWTEXT_END_TAG_NAME_STATE","SCRIPT_DATA_LESS_THAN_SIGN_STATE","SCRIPT_DATA_END_TAG_OPEN_STATE","SCRIPT_DATA_END_TAG_NAME_STATE","SCRIPT_DATA_ESCAPE_START_STATE","SCRIPT_DATA_ESCAPE_START_DASH_STATE","SCRIPT_DATA_ESCAPED_STATE","SCRIPT_DATA_ESCAPED_DASH_STATE","SCRIPT_DATA_ESCAPED_DASH_DASH_STATE","SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE","SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE","SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE","SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE","SCRIPT_DATA_DOUBLE_ESCAPED_STATE","SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE","SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE","SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE","SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE","BEFORE_ATTRIBUTE_NAME_STATE","ATTRIBUTE_NAME_STATE","AFTER_ATTRIBUTE_NAME_STATE","BEFORE_ATTRIBUTE_VALUE_STATE","ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE","ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE","ATTRIBUTE_VALUE_UNQUOTED_STATE","AFTER_ATTRIBUTE_VALUE_QUOTED_STATE","SELF_CLOSING_START_TAG_STATE","BOGUS_COMMENT_STATE","MARKUP_DECLARATION_OPEN_STATE","COMMENT_START_STATE","COMMENT_START_DASH_STATE","COMMENT_STATE","COMMENT_LESS_THAN_SIGN_STATE","COMMENT_LESS_THAN_SIGN_BANG_STATE","COMMENT_LESS_THAN_SIGN_BANG_DASH_STATE","COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH_STATE","COMMENT_END_DASH_STATE","COMMENT_END_STATE","COMMENT_END_BANG_STATE","DOCTYPE_STATE","BEFORE_DOCTYPE_NAME_STATE","DOCTYPE_NAME_STATE","AFTER_DOCTYPE_NAME_STATE","AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE","BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE","DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE","DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE","AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE","BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE","AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE","BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE","DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE","DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE","AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE","BOGUS_DOCTYPE_STATE","CDATA_SECTION_STATE","CDATA_SECTION_BRACKET_STATE","CDATA_SECTION_END_STATE","CHARACTER_REFERENCE_STATE","NAMED_CHARACTER_REFERENCE_STATE","AMBIGUOUS_AMPERSAND_STATE","NUMERIC_CHARACTER_REFERENCE_STATE","HEXADEMICAL_CHARACTER_REFERENCE_START_STATE","DECIMAL_CHARACTER_REFERENCE_START_STATE","HEXADEMICAL_CHARACTER_REFERENCE_STATE","DECIMAL_CHARACTER_REFERENCE_STATE","NUMERIC_CHARACTER_REFERENCE_END_STATE","isWhitespace","cp","SPACE","LINE_FEED","TABULATION","FORM_FEED","isAsciiDigit","DIGIT_0","DIGIT_9","isAsciiUpper","LATIN_CAPITAL_A","LATIN_CAPITAL_Z","isAsciiLower","LATIN_SMALL_A","LATIN_SMALL_Z","isAsciiLetter","isAsciiAlphaNumeric","isAsciiUpperHexDigit","LATIN_CAPITAL_F","isAsciiLowerHexDigit","LATIN_SMALL_F","isAsciiHexDigit","toAsciiLowerCodePoint","toChar","String","fromCharCode","toAsciiLowerChar","findNamedEntityTreeBranch","nodeIx","branchCount","lo","hi","mid","midCp","Tokenizer","preprocessor","tokenQueue","allowCDATA","state","returnState","charRefCode","tempBuff","lastStartTagName","consumedAfterSnapshot","active","currentCharacterToken","currentToken","currentAttr","err","_consume","_err","_unconsume","length","_ensureHibernation","shift","chunk","isLastChunk","write","insertHtmlAtCurrentPos","endOfChunkHit","retreat","push","type","HIBERNATION_TOKEN","advance","pattern","startCp","caseSensitive","consumedCount","isMatch","patternLength","patternPos","patternCp","EOF","SCRIPT_STRING","i","START_TAG_TOKEN","tagName","selfClosing","ackSelfClosing","attrs","END_TAG_TOKEN","COMMENT_TOKEN","data","initialName","DOCTYPE_TOKEN","name","forceQuirks","publicId","systemId","ch","chars","EOF_TOKEN","attrNameFirstCh","value","toState","getTokenAttr","duplicateAttribute","_emitCurrentCharacterToken","ct","endTagWithAttributes","endTagWithTrailingSolidus","_createEOFToken","_emitCurrentToken","_createCharacterToken","CHARACTER_TOKEN","WHITESPACE_CHARACTER_TOKEN","NULL","NULL_CHARACTER_TOKEN","_appendCharToCurrentCharacterToken","codePoints","_emitCodePoint","result","excess","current","inNode","nodeWithData","pop","withSemicolon","_isCharacterReferenceInAttribute","nextCp","EQUALS_SIGN","_emitSeveralCodePoints","dropParsedChunk","LESS_THAN_SIGN","AMPERSAND","unexpectedNullCharacter","_emitEOFToken","_emitChars","REPLACEMENT_CHARACTER","EXCLAMATION_MARK","SOLIDUS","_createStartTagToken","_reconsumeInState","QUESTION_MARK","unexpectedQuestionMarkInsteadOfTagName","_createCommentToken","eofBeforeTagName","invalidFirstCharacterOfTagName","_createEndTagToken","GREATER_THAN_SIGN","missingEndTagName","eofInTag","HYPHEN_MINUS","eofInScriptHtmlCommentLikeText","_isTempBufferEqualToScriptString","unexpectedEqualsSignBeforeAttributeName","_createAttr","_leaveAttrName","QUOTATION_MARK","APOSTROPHE","unexpectedCharacterInAttributeName","missingAttributeValue","_leaveAttrValue","GRAVE_ACCENT","unexpectedCharacterInUnquotedAttributeValue","missingWhitespaceBetweenAttributes","unexpectedSolidusInTag","_consumeSequenceIfMatch","DASH_DASH_STRING","DOCTYPE_STRING","CDATA_START_STRING","cdataInHtmlContent","incorrectlyOpenedComment","abruptClosingOfEmptyComment","eofInComment","nestedComment","incorrectlyClosedComment","eofInDoctype","_createDoctypeToken","missingWhitespaceBeforeDoctypeName","missingDoctypeName","PUBLIC_STRING","SYSTEM_STRING","invalidCharacterSequenceAfterDoctypeName","missingWhitespaceAfterDoctypePublicKeyword","missingDoctypePublicIdentifier","missingQuoteBeforeDoctypePublicIdentifier","abruptDoctypePublicIdentifier","missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers","missingQuoteBeforeDoctypeSystemIdentifier","missingWhitespaceAfterDoctypeSystemKeyword","missingDoctypeSystemIdentifier","abruptDoctypeSystemIdentifier","unexpectedCharacterAfterDoctypeSystemIdentifier","RIGHT_SQUARE_BRACKET","eofInCdata","NUMBER_SIGN","_flushCodePointsConsumedAsCharacterReference","matchResult","_matchNamedCharacterReference","SEMICOLON","_isCharacterReferenceAttributeQuirk","_errOnNextCodePoint","missingSemicolonAfterCharacterReference","unknownNamedCharacterReference","LATIN_SMALL_X","LATIN_CAPITAL_X","absenceOfDigitsInNumericCharacterReference","nullCharacterReference","characterReferenceOutsideUnicodeRange","isSurrogate","surrogateCharacterReference","isUndefinedCodePoint","noncharacterCharacterReference","isControlCodePoint","CARRIAGE_RETURN","controlCharacterReference","replacement","MODE","DATA","RCDATA","RAWTEXT","SCRIPT_DATA","PLAINTEXT","token","attrName","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nconst Preprocessor = require('./preprocessor');\nconst unicode = require('../common/unicode');\nconst neTree = require('./named-entity-data');\nconst ERR = require('../common/error-codes');\n\n//Aliases\nconst $ = unicode.CODE_POINTS;\nconst $$ = unicode.CODE_POINT_SEQUENCES;\n\n//C1 Unicode control character reference replacements\nconst C1_CONTROLS_REFERENCE_REPLACEMENTS = {\n    0x80: 0x20ac,\n    0x82: 0x201a,\n    0x83: 0x0192,\n    0x84: 0x201e,\n    0x85: 0x2026,\n    0x86: 0x2020,\n    0x87: 0x2021,\n    0x88: 0x02c6,\n    0x89: 0x2030,\n    0x8a: 0x0160,\n    0x8b: 0x2039,\n    0x8c: 0x0152,\n    0x8e: 0x017d,\n    0x91: 0x2018,\n    0x92: 0x2019,\n    0x93: 0x201c,\n    0x94: 0x201d,\n    0x95: 0x2022,\n    0x96: 0x2013,\n    0x97: 0x2014,\n    0x98: 0x02dc,\n    0x99: 0x2122,\n    0x9a: 0x0161,\n    0x9b: 0x203a,\n    0x9c: 0x0153,\n    0x9e: 0x017e,\n    0x9f: 0x0178\n};\n\n// Named entity tree flags\nconst HAS_DATA_FLAG = 1 << 0;\nconst DATA_DUPLET_FLAG = 1 << 1;\nconst HAS_BRANCHES_FLAG = 1 << 2;\nconst MAX_BRANCH_MARKER_VALUE = HAS_DATA_FLAG | DATA_DUPLET_FLAG | HAS_BRANCHES_FLAG;\n\n//States\nconst DATA_STATE = 'DATA_STATE';\nconst RCDATA_STATE = 'RCDATA_STATE';\nconst RAWTEXT_STATE = 'RAWTEXT_STATE';\nconst SCRIPT_DATA_STATE = 'SCRIPT_DATA_STATE';\nconst PLAINTEXT_STATE = 'PLAINTEXT_STATE';\nconst TAG_OPEN_STATE = 'TAG_OPEN_STATE';\nconst END_TAG_OPEN_STATE = 'END_TAG_OPEN_STATE';\nconst TAG_NAME_STATE = 'TAG_NAME_STATE';\nconst RCDATA_LESS_THAN_SIGN_STATE = 'RCDATA_LESS_THAN_SIGN_STATE';\nconst RCDATA_END_TAG_OPEN_STATE = 'RCDATA_END_TAG_OPEN_STATE';\nconst RCDATA_END_TAG_NAME_STATE = 'RCDATA_END_TAG_NAME_STATE';\nconst RAWTEXT_LESS_THAN_SIGN_STATE = 'RAWTEXT_LESS_THAN_SIGN_STATE';\nconst RAWTEXT_END_TAG_OPEN_STATE = 'RAWTEXT_END_TAG_OPEN_STATE';\nconst RAWTEXT_END_TAG_NAME_STATE = 'RAWTEXT_END_TAG_NAME_STATE';\nconst SCRIPT_DATA_LESS_THAN_SIGN_STATE = 'SCRIPT_DATA_LESS_THAN_SIGN_STATE';\nconst SCRIPT_DATA_END_TAG_OPEN_STATE = 'SCRIPT_DATA_END_TAG_OPEN_STATE';\nconst SCRIPT_DATA_END_TAG_NAME_STATE = 'SCRIPT_DATA_END_TAG_NAME_STATE';\nconst SCRIPT_DATA_ESCAPE_START_STATE = 'SCRIPT_DATA_ESCAPE_START_STATE';\nconst SCRIPT_DATA_ESCAPE_START_DASH_STATE = 'SCRIPT_DATA_ESCAPE_START_DASH_STATE';\nconst SCRIPT_DATA_ESCAPED_STATE = 'SCRIPT_DATA_ESCAPED_STATE';\nconst SCRIPT_DATA_ESCAPED_DASH_STATE = 'SCRIPT_DATA_ESCAPED_DASH_STATE';\nconst SCRIPT_DATA_ESCAPED_DASH_DASH_STATE = 'SCRIPT_DATA_ESCAPED_DASH_DASH_STATE';\nconst SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE = 'SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE';\nconst SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE = 'SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE';\nconst SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE = 'SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE';\nconst SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE = 'SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE';\nconst SCRIPT_DATA_DOUBLE_ESCAPED_STATE = 'SCRIPT_DATA_DOUBLE_ESCAPED_STATE';\nconst SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE = 'SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE';\nconst SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE = 'SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE';\nconst SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE = 'SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE';\nconst SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE = 'SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE';\nconst BEFORE_ATTRIBUTE_NAME_STATE = 'BEFORE_ATTRIBUTE_NAME_STATE';\nconst ATTRIBUTE_NAME_STATE = 'ATTRIBUTE_NAME_STATE';\nconst AFTER_ATTRIBUTE_NAME_STATE = 'AFTER_ATTRIBUTE_NAME_STATE';\nconst BEFORE_ATTRIBUTE_VALUE_STATE = 'BEFORE_ATTRIBUTE_VALUE_STATE';\nconst ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE = 'ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE';\nconst ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE = 'ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE';\nconst ATTRIBUTE_VALUE_UNQUOTED_STATE = 'ATTRIBUTE_VALUE_UNQUOTED_STATE';\nconst AFTER_ATTRIBUTE_VALUE_QUOTED_STATE = 'AFTER_ATTRIBUTE_VALUE_QUOTED_STATE';\nconst SELF_CLOSING_START_TAG_STATE = 'SELF_CLOSING_START_TAG_STATE';\nconst BOGUS_COMMENT_STATE = 'BOGUS_COMMENT_STATE';\nconst MARKUP_DECLARATION_OPEN_STATE = 'MARKUP_DECLARATION_OPEN_STATE';\nconst COMMENT_START_STATE = 'COMMENT_START_STATE';\nconst COMMENT_START_DASH_STATE = 'COMMENT_START_DASH_STATE';\nconst COMMENT_STATE = 'COMMENT_STATE';\nconst COMMENT_LESS_THAN_SIGN_STATE = 'COMMENT_LESS_THAN_SIGN_STATE';\nconst COMMENT_LESS_THAN_SIGN_BANG_STATE = 'COMMENT_LESS_THAN_SIGN_BANG_STATE';\nconst COMMENT_LESS_THAN_SIGN_BANG_DASH_STATE = 'COMMENT_LESS_THAN_SIGN_BANG_DASH_STATE';\nconst COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH_STATE = 'COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH_STATE';\nconst COMMENT_END_DASH_STATE = 'COMMENT_END_DASH_STATE';\nconst COMMENT_END_STATE = 'COMMENT_END_STATE';\nconst COMMENT_END_BANG_STATE = 'COMMENT_END_BANG_STATE';\nconst DOCTYPE_STATE = 'DOCTYPE_STATE';\nconst BEFORE_DOCTYPE_NAME_STATE = 'BEFORE_DOCTYPE_NAME_STATE';\nconst DOCTYPE_NAME_STATE = 'DOCTYPE_NAME_STATE';\nconst AFTER_DOCTYPE_NAME_STATE = 'AFTER_DOCTYPE_NAME_STATE';\nconst AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE = 'AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE';\nconst BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE = 'BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE';\nconst DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE = 'DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE';\nconst DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE = 'DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE';\nconst AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE = 'AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE';\nconst BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE = 'BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE';\nconst AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE = 'AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE';\nconst BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE = 'BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE';\nconst DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE = 'DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE';\nconst DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE = 'DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE';\nconst AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE = 'AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE';\nconst BOGUS_DOCTYPE_STATE = 'BOGUS_DOCTYPE_STATE';\nconst CDATA_SECTION_STATE = 'CDATA_SECTION_STATE';\nconst CDATA_SECTION_BRACKET_STATE = 'CDATA_SECTION_BRACKET_STATE';\nconst CDATA_SECTION_END_STATE = 'CDATA_SECTION_END_STATE';\nconst CHARACTER_REFERENCE_STATE = 'CHARACTER_REFERENCE_STATE';\nconst NAMED_CHARACTER_REFERENCE_STATE = 'NAMED_CHARACTER_REFERENCE_STATE';\nconst AMBIGUOUS_AMPERSAND_STATE = 'AMBIGUOS_AMPERSAND_STATE';\nconst NUMERIC_CHARACTER_REFERENCE_STATE = 'NUMERIC_CHARACTER_REFERENCE_STATE';\nconst HEXADEMICAL_CHARACTER_REFERENCE_START_STATE = 'HEXADEMICAL_CHARACTER_REFERENCE_START_STATE';\nconst DECIMAL_CHARACTER_REFERENCE_START_STATE = 'DECIMAL_CHARACTER_REFERENCE_START_STATE';\nconst HEXADEMICAL_CHARACTER_REFERENCE_STATE = 'HEXADEMICAL_CHARACTER_REFERENCE_STATE';\nconst DECIMAL_CHARACTER_REFERENCE_STATE = 'DECIMAL_CHARACTER_REFERENCE_STATE';\nconst NUMERIC_CHARACTER_REFERENCE_END_STATE = 'NUMERIC_CHARACTER_REFERENCE_END_STATE';\n\n//Utils\n\n//OPTIMIZATION: these utility functions should not be moved out of this module. V8 Crankshaft will not inline\n//this functions if they will be situated in another module due to context switch.\n//Always perform inlining check before modifying this functions ('node --trace-inlining').\nfunction isWhitespace(cp) {\n    return cp === $.SPACE || cp === $.LINE_FEED || cp === $.TABULATION || cp === $.FORM_FEED;\n}\n\nfunction isAsciiDigit(cp) {\n    return cp >= $.DIGIT_0 && cp <= $.DIGIT_9;\n}\n\nfunction isAsciiUpper(cp) {\n    return cp >= $.LATIN_CAPITAL_A && cp <= $.LATIN_CAPITAL_Z;\n}\n\nfunction isAsciiLower(cp) {\n    return cp >= $.LATIN_SMALL_A && cp <= $.LATIN_SMALL_Z;\n}\n\nfunction isAsciiLetter(cp) {\n    return isAsciiLower(cp) || isAsciiUpper(cp);\n}\n\nfunction isAsciiAlphaNumeric(cp) {\n    return isAsciiLetter(cp) || isAsciiDigit(cp);\n}\n\nfunction isAsciiUpperHexDigit(cp) {\n    return cp >= $.LATIN_CAPITAL_A && cp <= $.LATIN_CAPITAL_F;\n}\n\nfunction isAsciiLowerHexDigit(cp) {\n    return cp >= $.LATIN_SMALL_A && cp <= $.LATIN_SMALL_F;\n}\n\nfunction isAsciiHexDigit(cp) {\n    return isAsciiDigit(cp) || isAsciiUpperHexDigit(cp) || isAsciiLowerHexDigit(cp);\n}\n\nfunction toAsciiLowerCodePoint(cp) {\n    return cp + 0x0020;\n}\n\n//NOTE: String.fromCharCode() function can handle only characters from BMP subset.\n//So, we need to workaround this manually.\n//(see: https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/String/fromCharCode#Getting_it_to_work_with_higher_values)\nfunction toChar(cp) {\n    if (cp <= 0xffff) {\n        return String.fromCharCode(cp);\n    }\n\n    cp -= 0x10000;\n    return String.fromCharCode(((cp >>> 10) & 0x3ff) | 0xd800) + String.fromCharCode(0xdc00 | (cp & 0x3ff));\n}\n\nfunction toAsciiLowerChar(cp) {\n    return String.fromCharCode(toAsciiLowerCodePoint(cp));\n}\n\nfunction findNamedEntityTreeBranch(nodeIx, cp) {\n    const branchCount = neTree[++nodeIx];\n    let lo = ++nodeIx;\n    let hi = lo + branchCount - 1;\n\n    while (lo <= hi) {\n        const mid = (lo + hi) >>> 1;\n        const midCp = neTree[mid];\n\n        if (midCp < cp) {\n            lo = mid + 1;\n        } else if (midCp > cp) {\n            hi = mid - 1;\n        } else {\n            return neTree[mid + branchCount];\n        }\n    }\n\n    return -1;\n}\n\n//Tokenizer\nclass Tokenizer {\n    constructor() {\n        this.preprocessor = new Preprocessor();\n\n        this.tokenQueue = [];\n\n        this.allowCDATA = false;\n\n        this.state = DATA_STATE;\n        this.returnState = '';\n\n        this.charRefCode = -1;\n        this.tempBuff = [];\n        this.lastStartTagName = '';\n\n        this.consumedAfterSnapshot = -1;\n        this.active = false;\n\n        this.currentCharacterToken = null;\n        this.currentToken = null;\n        this.currentAttr = null;\n    }\n\n    //Errors\n    _err() {\n        // NOTE: err reporting is noop by default. Enabled by mixin.\n    }\n\n    _errOnNextCodePoint(err) {\n        this._consume();\n        this._err(err);\n        this._unconsume();\n    }\n\n    //API\n    getNextToken() {\n        while (!this.tokenQueue.length && this.active) {\n            this.consumedAfterSnapshot = 0;\n\n            const cp = this._consume();\n\n            if (!this._ensureHibernation()) {\n                this[this.state](cp);\n            }\n        }\n\n        return this.tokenQueue.shift();\n    }\n\n    write(chunk, isLastChunk) {\n        this.active = true;\n        this.preprocessor.write(chunk, isLastChunk);\n    }\n\n    insertHtmlAtCurrentPos(chunk) {\n        this.active = true;\n        this.preprocessor.insertHtmlAtCurrentPos(chunk);\n    }\n\n    //Hibernation\n    _ensureHibernation() {\n        if (this.preprocessor.endOfChunkHit) {\n            for (; this.consumedAfterSnapshot > 0; this.consumedAfterSnapshot--) {\n                this.preprocessor.retreat();\n            }\n\n            this.active = false;\n            this.tokenQueue.push({ type: Tokenizer.HIBERNATION_TOKEN });\n\n            return true;\n        }\n\n        return false;\n    }\n\n    //Consumption\n    _consume() {\n        this.consumedAfterSnapshot++;\n        return this.preprocessor.advance();\n    }\n\n    _unconsume() {\n        this.consumedAfterSnapshot--;\n        this.preprocessor.retreat();\n    }\n\n    _reconsumeInState(state) {\n        this.state = state;\n        this._unconsume();\n    }\n\n    _consumeSequenceIfMatch(pattern, startCp, caseSensitive) {\n        let consumedCount = 0;\n        let isMatch = true;\n        const patternLength = pattern.length;\n        let patternPos = 0;\n        let cp = startCp;\n        let patternCp = void 0;\n\n        for (; patternPos < patternLength; patternPos++) {\n            if (patternPos > 0) {\n                cp = this._consume();\n                consumedCount++;\n            }\n\n            if (cp === $.EOF) {\n                isMatch = false;\n                break;\n            }\n\n            patternCp = pattern[patternPos];\n\n            if (cp !== patternCp && (caseSensitive || cp !== toAsciiLowerCodePoint(patternCp))) {\n                isMatch = false;\n                break;\n            }\n        }\n\n        if (!isMatch) {\n            while (consumedCount--) {\n                this._unconsume();\n            }\n        }\n\n        return isMatch;\n    }\n\n    //Temp buffer\n    _isTempBufferEqualToScriptString() {\n        if (this.tempBuff.length !== $$.SCRIPT_STRING.length) {\n            return false;\n        }\n\n        for (let i = 0; i < this.tempBuff.length; i++) {\n            if (this.tempBuff[i] !== $$.SCRIPT_STRING[i]) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    //Token creation\n    _createStartTagToken() {\n        this.currentToken = {\n            type: Tokenizer.START_TAG_TOKEN,\n            tagName: '',\n            selfClosing: false,\n            ackSelfClosing: false,\n            attrs: []\n        };\n    }\n\n    _createEndTagToken() {\n        this.currentToken = {\n            type: Tokenizer.END_TAG_TOKEN,\n            tagName: '',\n            selfClosing: false,\n            attrs: []\n        };\n    }\n\n    _createCommentToken() {\n        this.currentToken = {\n            type: Tokenizer.COMMENT_TOKEN,\n            data: ''\n        };\n    }\n\n    _createDoctypeToken(initialName) {\n        this.currentToken = {\n            type: Tokenizer.DOCTYPE_TOKEN,\n            name: initialName,\n            forceQuirks: false,\n            publicId: null,\n            systemId: null\n        };\n    }\n\n    _createCharacterToken(type, ch) {\n        this.currentCharacterToken = {\n            type: type,\n            chars: ch\n        };\n    }\n\n    _createEOFToken() {\n        this.currentToken = { type: Tokenizer.EOF_TOKEN };\n    }\n\n    //Tag attributes\n    _createAttr(attrNameFirstCh) {\n        this.currentAttr = {\n            name: attrNameFirstCh,\n            value: ''\n        };\n    }\n\n    _leaveAttrName(toState) {\n        if (Tokenizer.getTokenAttr(this.currentToken, this.currentAttr.name) === null) {\n            this.currentToken.attrs.push(this.currentAttr);\n        } else {\n            this._err(ERR.duplicateAttribute);\n        }\n\n        this.state = toState;\n    }\n\n    _leaveAttrValue(toState) {\n        this.state = toState;\n    }\n\n    //Token emission\n    _emitCurrentToken() {\n        this._emitCurrentCharacterToken();\n\n        const ct = this.currentToken;\n\n        this.currentToken = null;\n\n        //NOTE: store emited start tag's tagName to determine is the following end tag token is appropriate.\n        if (ct.type === Tokenizer.START_TAG_TOKEN) {\n            this.lastStartTagName = ct.tagName;\n        } else if (ct.type === Tokenizer.END_TAG_TOKEN) {\n            if (ct.attrs.length > 0) {\n                this._err(ERR.endTagWithAttributes);\n            }\n\n            if (ct.selfClosing) {\n                this._err(ERR.endTagWithTrailingSolidus);\n            }\n        }\n\n        this.tokenQueue.push(ct);\n    }\n\n    _emitCurrentCharacterToken() {\n        if (this.currentCharacterToken) {\n            this.tokenQueue.push(this.currentCharacterToken);\n            this.currentCharacterToken = null;\n        }\n    }\n\n    _emitEOFToken() {\n        this._createEOFToken();\n        this._emitCurrentToken();\n    }\n\n    //Characters emission\n\n    //OPTIMIZATION: specification uses only one type of character tokens (one token per character).\n    //This causes a huge memory overhead and a lot of unnecessary parser loops. parse5 uses 3 groups of characters.\n    //If we have a sequence of characters that belong to the same group, parser can process it\n    //as a single solid character token.\n    //So, there are 3 types of character tokens in parse5:\n    //1)NULL_CHARACTER_TOKEN - \\u0000-character sequences (e.g. '\\u0000\\u0000\\u0000')\n    //2)WHITESPACE_CHARACTER_TOKEN - any whitespace/new-line character sequences (e.g. '\\n  \\r\\t   \\f')\n    //3)CHARACTER_TOKEN - any character sequence which don't belong to groups 1 and 2 (e.g. 'abcdef1234@@#$%^')\n    _appendCharToCurrentCharacterToken(type, ch) {\n        if (this.currentCharacterToken && this.currentCharacterToken.type !== type) {\n            this._emitCurrentCharacterToken();\n        }\n\n        if (this.currentCharacterToken) {\n            this.currentCharacterToken.chars += ch;\n        } else {\n            this._createCharacterToken(type, ch);\n        }\n    }\n\n    _emitCodePoint(cp) {\n        let type = Tokenizer.CHARACTER_TOKEN;\n\n        if (isWhitespace(cp)) {\n            type = Tokenizer.WHITESPACE_CHARACTER_TOKEN;\n        } else if (cp === $.NULL) {\n            type = Tokenizer.NULL_CHARACTER_TOKEN;\n        }\n\n        this._appendCharToCurrentCharacterToken(type, toChar(cp));\n    }\n\n    _emitSeveralCodePoints(codePoints) {\n        for (let i = 0; i < codePoints.length; i++) {\n            this._emitCodePoint(codePoints[i]);\n        }\n    }\n\n    //NOTE: used then we emit character explicitly. This is always a non-whitespace and a non-null character.\n    //So we can avoid additional checks here.\n    _emitChars(ch) {\n        this._appendCharToCurrentCharacterToken(Tokenizer.CHARACTER_TOKEN, ch);\n    }\n\n    // Character reference helpers\n    _matchNamedCharacterReference(startCp) {\n        let result = null;\n        let excess = 1;\n        let i = findNamedEntityTreeBranch(0, startCp);\n\n        this.tempBuff.push(startCp);\n\n        while (i > -1) {\n            const current = neTree[i];\n            const inNode = current < MAX_BRANCH_MARKER_VALUE;\n            const nodeWithData = inNode && current & HAS_DATA_FLAG;\n\n            if (nodeWithData) {\n                //NOTE: we use greedy search, so we continue lookup at this point\n                result = current & DATA_DUPLET_FLAG ? [neTree[++i], neTree[++i]] : [neTree[++i]];\n                excess = 0;\n            }\n\n            const cp = this._consume();\n\n            this.tempBuff.push(cp);\n            excess++;\n\n            if (cp === $.EOF) {\n                break;\n            }\n\n            if (inNode) {\n                i = current & HAS_BRANCHES_FLAG ? findNamedEntityTreeBranch(i, cp) : -1;\n            } else {\n                i = cp === current ? ++i : -1;\n            }\n        }\n\n        while (excess--) {\n            this.tempBuff.pop();\n            this._unconsume();\n        }\n\n        return result;\n    }\n\n    _isCharacterReferenceInAttribute() {\n        return (\n            this.returnState === ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE ||\n            this.returnState === ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE ||\n            this.returnState === ATTRIBUTE_VALUE_UNQUOTED_STATE\n        );\n    }\n\n    _isCharacterReferenceAttributeQuirk(withSemicolon) {\n        if (!withSemicolon && this._isCharacterReferenceInAttribute()) {\n            const nextCp = this._consume();\n\n            this._unconsume();\n\n            return nextCp === $.EQUALS_SIGN || isAsciiAlphaNumeric(nextCp);\n        }\n\n        return false;\n    }\n\n    _flushCodePointsConsumedAsCharacterReference() {\n        if (this._isCharacterReferenceInAttribute()) {\n            for (let i = 0; i < this.tempBuff.length; i++) {\n                this.currentAttr.value += toChar(this.tempBuff[i]);\n            }\n        } else {\n            this._emitSeveralCodePoints(this.tempBuff);\n        }\n\n        this.tempBuff = [];\n    }\n\n    // State machine\n\n    // Data state\n    //------------------------------------------------------------------\n    [DATA_STATE](cp) {\n        this.preprocessor.dropParsedChunk();\n\n        if (cp === $.LESS_THAN_SIGN) {\n            this.state = TAG_OPEN_STATE;\n        } else if (cp === $.AMPERSAND) {\n            this.returnState = DATA_STATE;\n            this.state = CHARACTER_REFERENCE_STATE;\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this._emitCodePoint(cp);\n        } else if (cp === $.EOF) {\n            this._emitEOFToken();\n        } else {\n            this._emitCodePoint(cp);\n        }\n    }\n\n    //  RCDATA state\n    //------------------------------------------------------------------\n    [RCDATA_STATE](cp) {\n        this.preprocessor.dropParsedChunk();\n\n        if (cp === $.AMPERSAND) {\n            this.returnState = RCDATA_STATE;\n            this.state = CHARACTER_REFERENCE_STATE;\n        } else if (cp === $.LESS_THAN_SIGN) {\n            this.state = RCDATA_LESS_THAN_SIGN_STATE;\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this._emitChars(unicode.REPLACEMENT_CHARACTER);\n        } else if (cp === $.EOF) {\n            this._emitEOFToken();\n        } else {\n            this._emitCodePoint(cp);\n        }\n    }\n\n    // RAWTEXT state\n    //------------------------------------------------------------------\n    [RAWTEXT_STATE](cp) {\n        this.preprocessor.dropParsedChunk();\n\n        if (cp === $.LESS_THAN_SIGN) {\n            this.state = RAWTEXT_LESS_THAN_SIGN_STATE;\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this._emitChars(unicode.REPLACEMENT_CHARACTER);\n        } else if (cp === $.EOF) {\n            this._emitEOFToken();\n        } else {\n            this._emitCodePoint(cp);\n        }\n    }\n\n    // Script data state\n    //------------------------------------------------------------------\n    [SCRIPT_DATA_STATE](cp) {\n        this.preprocessor.dropParsedChunk();\n\n        if (cp === $.LESS_THAN_SIGN) {\n            this.state = SCRIPT_DATA_LESS_THAN_SIGN_STATE;\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this._emitChars(unicode.REPLACEMENT_CHARACTER);\n        } else if (cp === $.EOF) {\n            this._emitEOFToken();\n        } else {\n            this._emitCodePoint(cp);\n        }\n    }\n\n    // PLAINTEXT state\n    //------------------------------------------------------------------\n    [PLAINTEXT_STATE](cp) {\n        this.preprocessor.dropParsedChunk();\n\n        if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this._emitChars(unicode.REPLACEMENT_CHARACTER);\n        } else if (cp === $.EOF) {\n            this._emitEOFToken();\n        } else {\n            this._emitCodePoint(cp);\n        }\n    }\n\n    // Tag open state\n    //------------------------------------------------------------------\n    [TAG_OPEN_STATE](cp) {\n        if (cp === $.EXCLAMATION_MARK) {\n            this.state = MARKUP_DECLARATION_OPEN_STATE;\n        } else if (cp === $.SOLIDUS) {\n            this.state = END_TAG_OPEN_STATE;\n        } else if (isAsciiLetter(cp)) {\n            this._createStartTagToken();\n            this._reconsumeInState(TAG_NAME_STATE);\n        } else if (cp === $.QUESTION_MARK) {\n            this._err(ERR.unexpectedQuestionMarkInsteadOfTagName);\n            this._createCommentToken();\n            this._reconsumeInState(BOGUS_COMMENT_STATE);\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofBeforeTagName);\n            this._emitChars('<');\n            this._emitEOFToken();\n        } else {\n            this._err(ERR.invalidFirstCharacterOfTagName);\n            this._emitChars('<');\n            this._reconsumeInState(DATA_STATE);\n        }\n    }\n\n    // End tag open state\n    //------------------------------------------------------------------\n    [END_TAG_OPEN_STATE](cp) {\n        if (isAsciiLetter(cp)) {\n            this._createEndTagToken();\n            this._reconsumeInState(TAG_NAME_STATE);\n        } else if (cp === $.GREATER_THAN_SIGN) {\n            this._err(ERR.missingEndTagName);\n            this.state = DATA_STATE;\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofBeforeTagName);\n            this._emitChars('</');\n            this._emitEOFToken();\n        } else {\n            this._err(ERR.invalidFirstCharacterOfTagName);\n            this._createCommentToken();\n            this._reconsumeInState(BOGUS_COMMENT_STATE);\n        }\n    }\n\n    // Tag name state\n    //------------------------------------------------------------------\n    [TAG_NAME_STATE](cp) {\n        if (isWhitespace(cp)) {\n            this.state = BEFORE_ATTRIBUTE_NAME_STATE;\n        } else if (cp === $.SOLIDUS) {\n            this.state = SELF_CLOSING_START_TAG_STATE;\n        } else if (cp === $.GREATER_THAN_SIGN) {\n            this.state = DATA_STATE;\n            this._emitCurrentToken();\n        } else if (isAsciiUpper(cp)) {\n            this.currentToken.tagName += toAsciiLowerChar(cp);\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this.currentToken.tagName += unicode.REPLACEMENT_CHARACTER;\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInTag);\n            this._emitEOFToken();\n        } else {\n            this.currentToken.tagName += toChar(cp);\n        }\n    }\n\n    // RCDATA less-than sign state\n    //------------------------------------------------------------------\n    [RCDATA_LESS_THAN_SIGN_STATE](cp) {\n        if (cp === $.SOLIDUS) {\n            this.tempBuff = [];\n            this.state = RCDATA_END_TAG_OPEN_STATE;\n        } else {\n            this._emitChars('<');\n            this._reconsumeInState(RCDATA_STATE);\n        }\n    }\n\n    // RCDATA end tag open state\n    //------------------------------------------------------------------\n    [RCDATA_END_TAG_OPEN_STATE](cp) {\n        if (isAsciiLetter(cp)) {\n            this._createEndTagToken();\n            this._reconsumeInState(RCDATA_END_TAG_NAME_STATE);\n        } else {\n            this._emitChars('</');\n            this._reconsumeInState(RCDATA_STATE);\n        }\n    }\n\n    // RCDATA end tag name state\n    //------------------------------------------------------------------\n    [RCDATA_END_TAG_NAME_STATE](cp) {\n        if (isAsciiUpper(cp)) {\n            this.currentToken.tagName += toAsciiLowerChar(cp);\n            this.tempBuff.push(cp);\n        } else if (isAsciiLower(cp)) {\n            this.currentToken.tagName += toChar(cp);\n            this.tempBuff.push(cp);\n        } else {\n            if (this.lastStartTagName === this.currentToken.tagName) {\n                if (isWhitespace(cp)) {\n                    this.state = BEFORE_ATTRIBUTE_NAME_STATE;\n                    return;\n                }\n\n                if (cp === $.SOLIDUS) {\n                    this.state = SELF_CLOSING_START_TAG_STATE;\n                    return;\n                }\n\n                if (cp === $.GREATER_THAN_SIGN) {\n                    this.state = DATA_STATE;\n                    this._emitCurrentToken();\n                    return;\n                }\n            }\n\n            this._emitChars('</');\n            this._emitSeveralCodePoints(this.tempBuff);\n            this._reconsumeInState(RCDATA_STATE);\n        }\n    }\n\n    // RAWTEXT less-than sign state\n    //------------------------------------------------------------------\n    [RAWTEXT_LESS_THAN_SIGN_STATE](cp) {\n        if (cp === $.SOLIDUS) {\n            this.tempBuff = [];\n            this.state = RAWTEXT_END_TAG_OPEN_STATE;\n        } else {\n            this._emitChars('<');\n            this._reconsumeInState(RAWTEXT_STATE);\n        }\n    }\n\n    // RAWTEXT end tag open state\n    //------------------------------------------------------------------\n    [RAWTEXT_END_TAG_OPEN_STATE](cp) {\n        if (isAsciiLetter(cp)) {\n            this._createEndTagToken();\n            this._reconsumeInState(RAWTEXT_END_TAG_NAME_STATE);\n        } else {\n            this._emitChars('</');\n            this._reconsumeInState(RAWTEXT_STATE);\n        }\n    }\n\n    // RAWTEXT end tag name state\n    //------------------------------------------------------------------\n    [RAWTEXT_END_TAG_NAME_STATE](cp) {\n        if (isAsciiUpper(cp)) {\n            this.currentToken.tagName += toAsciiLowerChar(cp);\n            this.tempBuff.push(cp);\n        } else if (isAsciiLower(cp)) {\n            this.currentToken.tagName += toChar(cp);\n            this.tempBuff.push(cp);\n        } else {\n            if (this.lastStartTagName === this.currentToken.tagName) {\n                if (isWhitespace(cp)) {\n                    this.state = BEFORE_ATTRIBUTE_NAME_STATE;\n                    return;\n                }\n\n                if (cp === $.SOLIDUS) {\n                    this.state = SELF_CLOSING_START_TAG_STATE;\n                    return;\n                }\n\n                if (cp === $.GREATER_THAN_SIGN) {\n                    this._emitCurrentToken();\n                    this.state = DATA_STATE;\n                    return;\n                }\n            }\n\n            this._emitChars('</');\n            this._emitSeveralCodePoints(this.tempBuff);\n            this._reconsumeInState(RAWTEXT_STATE);\n        }\n    }\n\n    // Script data less-than sign state\n    //------------------------------------------------------------------\n    [SCRIPT_DATA_LESS_THAN_SIGN_STATE](cp) {\n        if (cp === $.SOLIDUS) {\n            this.tempBuff = [];\n            this.state = SCRIPT_DATA_END_TAG_OPEN_STATE;\n        } else if (cp === $.EXCLAMATION_MARK) {\n            this.state = SCRIPT_DATA_ESCAPE_START_STATE;\n            this._emitChars('<!');\n        } else {\n            this._emitChars('<');\n            this._reconsumeInState(SCRIPT_DATA_STATE);\n        }\n    }\n\n    // Script data end tag open state\n    //------------------------------------------------------------------\n    [SCRIPT_DATA_END_TAG_OPEN_STATE](cp) {\n        if (isAsciiLetter(cp)) {\n            this._createEndTagToken();\n            this._reconsumeInState(SCRIPT_DATA_END_TAG_NAME_STATE);\n        } else {\n            this._emitChars('</');\n            this._reconsumeInState(SCRIPT_DATA_STATE);\n        }\n    }\n\n    // Script data end tag name state\n    //------------------------------------------------------------------\n    [SCRIPT_DATA_END_TAG_NAME_STATE](cp) {\n        if (isAsciiUpper(cp)) {\n            this.currentToken.tagName += toAsciiLowerChar(cp);\n            this.tempBuff.push(cp);\n        } else if (isAsciiLower(cp)) {\n            this.currentToken.tagName += toChar(cp);\n            this.tempBuff.push(cp);\n        } else {\n            if (this.lastStartTagName === this.currentToken.tagName) {\n                if (isWhitespace(cp)) {\n                    this.state = BEFORE_ATTRIBUTE_NAME_STATE;\n                    return;\n                } else if (cp === $.SOLIDUS) {\n                    this.state = SELF_CLOSING_START_TAG_STATE;\n                    return;\n                } else if (cp === $.GREATER_THAN_SIGN) {\n                    this._emitCurrentToken();\n                    this.state = DATA_STATE;\n                    return;\n                }\n            }\n\n            this._emitChars('</');\n            this._emitSeveralCodePoints(this.tempBuff);\n            this._reconsumeInState(SCRIPT_DATA_STATE);\n        }\n    }\n\n    // Script data escape start state\n    //------------------------------------------------------------------\n    [SCRIPT_DATA_ESCAPE_START_STATE](cp) {\n        if (cp === $.HYPHEN_MINUS) {\n            this.state = SCRIPT_DATA_ESCAPE_START_DASH_STATE;\n            this._emitChars('-');\n        } else {\n            this._reconsumeInState(SCRIPT_DATA_STATE);\n        }\n    }\n\n    // Script data escape start dash state\n    //------------------------------------------------------------------\n    [SCRIPT_DATA_ESCAPE_START_DASH_STATE](cp) {\n        if (cp === $.HYPHEN_MINUS) {\n            this.state = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;\n            this._emitChars('-');\n        } else {\n            this._reconsumeInState(SCRIPT_DATA_STATE);\n        }\n    }\n\n    // Script data escaped state\n    //------------------------------------------------------------------\n    [SCRIPT_DATA_ESCAPED_STATE](cp) {\n        if (cp === $.HYPHEN_MINUS) {\n            this.state = SCRIPT_DATA_ESCAPED_DASH_STATE;\n            this._emitChars('-');\n        } else if (cp === $.LESS_THAN_SIGN) {\n            this.state = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this._emitChars(unicode.REPLACEMENT_CHARACTER);\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInScriptHtmlCommentLikeText);\n            this._emitEOFToken();\n        } else {\n            this._emitCodePoint(cp);\n        }\n    }\n\n    // Script data escaped dash state\n    //------------------------------------------------------------------\n    [SCRIPT_DATA_ESCAPED_DASH_STATE](cp) {\n        if (cp === $.HYPHEN_MINUS) {\n            this.state = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;\n            this._emitChars('-');\n        } else if (cp === $.LESS_THAN_SIGN) {\n            this.state = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this.state = SCRIPT_DATA_ESCAPED_STATE;\n            this._emitChars(unicode.REPLACEMENT_CHARACTER);\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInScriptHtmlCommentLikeText);\n            this._emitEOFToken();\n        } else {\n            this.state = SCRIPT_DATA_ESCAPED_STATE;\n            this._emitCodePoint(cp);\n        }\n    }\n\n    // Script data escaped dash dash state\n    //------------------------------------------------------------------\n    [SCRIPT_DATA_ESCAPED_DASH_DASH_STATE](cp) {\n        if (cp === $.HYPHEN_MINUS) {\n            this._emitChars('-');\n        } else if (cp === $.LESS_THAN_SIGN) {\n            this.state = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;\n        } else if (cp === $.GREATER_THAN_SIGN) {\n            this.state = SCRIPT_DATA_STATE;\n            this._emitChars('>');\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this.state = SCRIPT_DATA_ESCAPED_STATE;\n            this._emitChars(unicode.REPLACEMENT_CHARACTER);\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInScriptHtmlCommentLikeText);\n            this._emitEOFToken();\n        } else {\n            this.state = SCRIPT_DATA_ESCAPED_STATE;\n            this._emitCodePoint(cp);\n        }\n    }\n\n    // Script data escaped less-than sign state\n    //------------------------------------------------------------------\n    [SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE](cp) {\n        if (cp === $.SOLIDUS) {\n            this.tempBuff = [];\n            this.state = SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE;\n        } else if (isAsciiLetter(cp)) {\n            this.tempBuff = [];\n            this._emitChars('<');\n            this._reconsumeInState(SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE);\n        } else {\n            this._emitChars('<');\n            this._reconsumeInState(SCRIPT_DATA_ESCAPED_STATE);\n        }\n    }\n\n    // Script data escaped end tag open state\n    //------------------------------------------------------------------\n    [SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE](cp) {\n        if (isAsciiLetter(cp)) {\n            this._createEndTagToken();\n            this._reconsumeInState(SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE);\n        } else {\n            this._emitChars('</');\n            this._reconsumeInState(SCRIPT_DATA_ESCAPED_STATE);\n        }\n    }\n\n    // Script data escaped end tag name state\n    //------------------------------------------------------------------\n    [SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE](cp) {\n        if (isAsciiUpper(cp)) {\n            this.currentToken.tagName += toAsciiLowerChar(cp);\n            this.tempBuff.push(cp);\n        } else if (isAsciiLower(cp)) {\n            this.currentToken.tagName += toChar(cp);\n            this.tempBuff.push(cp);\n        } else {\n            if (this.lastStartTagName === this.currentToken.tagName) {\n                if (isWhitespace(cp)) {\n                    this.state = BEFORE_ATTRIBUTE_NAME_STATE;\n                    return;\n                }\n\n                if (cp === $.SOLIDUS) {\n                    this.state = SELF_CLOSING_START_TAG_STATE;\n                    return;\n                }\n\n                if (cp === $.GREATER_THAN_SIGN) {\n                    this._emitCurrentToken();\n                    this.state = DATA_STATE;\n                    return;\n                }\n            }\n\n            this._emitChars('</');\n            this._emitSeveralCodePoints(this.tempBuff);\n            this._reconsumeInState(SCRIPT_DATA_ESCAPED_STATE);\n        }\n    }\n\n    // Script data double escape start state\n    //------------------------------------------------------------------\n    [SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE](cp) {\n        if (isWhitespace(cp) || cp === $.SOLIDUS || cp === $.GREATER_THAN_SIGN) {\n            this.state = this._isTempBufferEqualToScriptString()\n                ? SCRIPT_DATA_DOUBLE_ESCAPED_STATE\n                : SCRIPT_DATA_ESCAPED_STATE;\n            this._emitCodePoint(cp);\n        } else if (isAsciiUpper(cp)) {\n            this.tempBuff.push(toAsciiLowerCodePoint(cp));\n            this._emitCodePoint(cp);\n        } else if (isAsciiLower(cp)) {\n            this.tempBuff.push(cp);\n            this._emitCodePoint(cp);\n        } else {\n            this._reconsumeInState(SCRIPT_DATA_ESCAPED_STATE);\n        }\n    }\n\n    // Script data double escaped state\n    //------------------------------------------------------------------\n    [SCRIPT_DATA_DOUBLE_ESCAPED_STATE](cp) {\n        if (cp === $.HYPHEN_MINUS) {\n            this.state = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE;\n            this._emitChars('-');\n        } else if (cp === $.LESS_THAN_SIGN) {\n            this.state = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;\n            this._emitChars('<');\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this._emitChars(unicode.REPLACEMENT_CHARACTER);\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInScriptHtmlCommentLikeText);\n            this._emitEOFToken();\n        } else {\n            this._emitCodePoint(cp);\n        }\n    }\n\n    // Script data double escaped dash state\n    //------------------------------------------------------------------\n    [SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE](cp) {\n        if (cp === $.HYPHEN_MINUS) {\n            this.state = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE;\n            this._emitChars('-');\n        } else if (cp === $.LESS_THAN_SIGN) {\n            this.state = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;\n            this._emitChars('<');\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this.state = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;\n            this._emitChars(unicode.REPLACEMENT_CHARACTER);\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInScriptHtmlCommentLikeText);\n            this._emitEOFToken();\n        } else {\n            this.state = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;\n            this._emitCodePoint(cp);\n        }\n    }\n\n    // Script data double escaped dash dash state\n    //------------------------------------------------------------------\n    [SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE](cp) {\n        if (cp === $.HYPHEN_MINUS) {\n            this._emitChars('-');\n        } else if (cp === $.LESS_THAN_SIGN) {\n            this.state = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;\n            this._emitChars('<');\n        } else if (cp === $.GREATER_THAN_SIGN) {\n            this.state = SCRIPT_DATA_STATE;\n            this._emitChars('>');\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this.state = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;\n            this._emitChars(unicode.REPLACEMENT_CHARACTER);\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInScriptHtmlCommentLikeText);\n            this._emitEOFToken();\n        } else {\n            this.state = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;\n            this._emitCodePoint(cp);\n        }\n    }\n\n    // Script data double escaped less-than sign state\n    //------------------------------------------------------------------\n    [SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE](cp) {\n        if (cp === $.SOLIDUS) {\n            this.tempBuff = [];\n            this.state = SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE;\n            this._emitChars('/');\n        } else {\n            this._reconsumeInState(SCRIPT_DATA_DOUBLE_ESCAPED_STATE);\n        }\n    }\n\n    // Script data double escape end state\n    //------------------------------------------------------------------\n    [SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE](cp) {\n        if (isWhitespace(cp) || cp === $.SOLIDUS || cp === $.GREATER_THAN_SIGN) {\n            this.state = this._isTempBufferEqualToScriptString()\n                ? SCRIPT_DATA_ESCAPED_STATE\n                : SCRIPT_DATA_DOUBLE_ESCAPED_STATE;\n\n            this._emitCodePoint(cp);\n        } else if (isAsciiUpper(cp)) {\n            this.tempBuff.push(toAsciiLowerCodePoint(cp));\n            this._emitCodePoint(cp);\n        } else if (isAsciiLower(cp)) {\n            this.tempBuff.push(cp);\n            this._emitCodePoint(cp);\n        } else {\n            this._reconsumeInState(SCRIPT_DATA_DOUBLE_ESCAPED_STATE);\n        }\n    }\n\n    // Before attribute name state\n    //------------------------------------------------------------------\n    [BEFORE_ATTRIBUTE_NAME_STATE](cp) {\n        if (isWhitespace(cp)) {\n            return;\n        }\n\n        if (cp === $.SOLIDUS || cp === $.GREATER_THAN_SIGN || cp === $.EOF) {\n            this._reconsumeInState(AFTER_ATTRIBUTE_NAME_STATE);\n        } else if (cp === $.EQUALS_SIGN) {\n            this._err(ERR.unexpectedEqualsSignBeforeAttributeName);\n            this._createAttr('=');\n            this.state = ATTRIBUTE_NAME_STATE;\n        } else {\n            this._createAttr('');\n            this._reconsumeInState(ATTRIBUTE_NAME_STATE);\n        }\n    }\n\n    // Attribute name state\n    //------------------------------------------------------------------\n    [ATTRIBUTE_NAME_STATE](cp) {\n        if (isWhitespace(cp) || cp === $.SOLIDUS || cp === $.GREATER_THAN_SIGN || cp === $.EOF) {\n            this._leaveAttrName(AFTER_ATTRIBUTE_NAME_STATE);\n            this._unconsume();\n        } else if (cp === $.EQUALS_SIGN) {\n            this._leaveAttrName(BEFORE_ATTRIBUTE_VALUE_STATE);\n        } else if (isAsciiUpper(cp)) {\n            this.currentAttr.name += toAsciiLowerChar(cp);\n        } else if (cp === $.QUOTATION_MARK || cp === $.APOSTROPHE || cp === $.LESS_THAN_SIGN) {\n            this._err(ERR.unexpectedCharacterInAttributeName);\n            this.currentAttr.name += toChar(cp);\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this.currentAttr.name += unicode.REPLACEMENT_CHARACTER;\n        } else {\n            this.currentAttr.name += toChar(cp);\n        }\n    }\n\n    // After attribute name state\n    //------------------------------------------------------------------\n    [AFTER_ATTRIBUTE_NAME_STATE](cp) {\n        if (isWhitespace(cp)) {\n            return;\n        }\n\n        if (cp === $.SOLIDUS) {\n            this.state = SELF_CLOSING_START_TAG_STATE;\n        } else if (cp === $.EQUALS_SIGN) {\n            this.state = BEFORE_ATTRIBUTE_VALUE_STATE;\n        } else if (cp === $.GREATER_THAN_SIGN) {\n            this.state = DATA_STATE;\n            this._emitCurrentToken();\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInTag);\n            this._emitEOFToken();\n        } else {\n            this._createAttr('');\n            this._reconsumeInState(ATTRIBUTE_NAME_STATE);\n        }\n    }\n\n    // Before attribute value state\n    //------------------------------------------------------------------\n    [BEFORE_ATTRIBUTE_VALUE_STATE](cp) {\n        if (isWhitespace(cp)) {\n            return;\n        }\n\n        if (cp === $.QUOTATION_MARK) {\n            this.state = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;\n        } else if (cp === $.APOSTROPHE) {\n            this.state = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;\n        } else if (cp === $.GREATER_THAN_SIGN) {\n            this._err(ERR.missingAttributeValue);\n            this.state = DATA_STATE;\n            this._emitCurrentToken();\n        } else {\n            this._reconsumeInState(ATTRIBUTE_VALUE_UNQUOTED_STATE);\n        }\n    }\n\n    // Attribute value (double-quoted) state\n    //------------------------------------------------------------------\n    [ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE](cp) {\n        if (cp === $.QUOTATION_MARK) {\n            this.state = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;\n        } else if (cp === $.AMPERSAND) {\n            this.returnState = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;\n            this.state = CHARACTER_REFERENCE_STATE;\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this.currentAttr.value += unicode.REPLACEMENT_CHARACTER;\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInTag);\n            this._emitEOFToken();\n        } else {\n            this.currentAttr.value += toChar(cp);\n        }\n    }\n\n    // Attribute value (single-quoted) state\n    //------------------------------------------------------------------\n    [ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE](cp) {\n        if (cp === $.APOSTROPHE) {\n            this.state = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;\n        } else if (cp === $.AMPERSAND) {\n            this.returnState = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;\n            this.state = CHARACTER_REFERENCE_STATE;\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this.currentAttr.value += unicode.REPLACEMENT_CHARACTER;\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInTag);\n            this._emitEOFToken();\n        } else {\n            this.currentAttr.value += toChar(cp);\n        }\n    }\n\n    // Attribute value (unquoted) state\n    //------------------------------------------------------------------\n    [ATTRIBUTE_VALUE_UNQUOTED_STATE](cp) {\n        if (isWhitespace(cp)) {\n            this._leaveAttrValue(BEFORE_ATTRIBUTE_NAME_STATE);\n        } else if (cp === $.AMPERSAND) {\n            this.returnState = ATTRIBUTE_VALUE_UNQUOTED_STATE;\n            this.state = CHARACTER_REFERENCE_STATE;\n        } else if (cp === $.GREATER_THAN_SIGN) {\n            this._leaveAttrValue(DATA_STATE);\n            this._emitCurrentToken();\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this.currentAttr.value += unicode.REPLACEMENT_CHARACTER;\n        } else if (\n            cp === $.QUOTATION_MARK ||\n            cp === $.APOSTROPHE ||\n            cp === $.LESS_THAN_SIGN ||\n            cp === $.EQUALS_SIGN ||\n            cp === $.GRAVE_ACCENT\n        ) {\n            this._err(ERR.unexpectedCharacterInUnquotedAttributeValue);\n            this.currentAttr.value += toChar(cp);\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInTag);\n            this._emitEOFToken();\n        } else {\n            this.currentAttr.value += toChar(cp);\n        }\n    }\n\n    // After attribute value (quoted) state\n    //------------------------------------------------------------------\n    [AFTER_ATTRIBUTE_VALUE_QUOTED_STATE](cp) {\n        if (isWhitespace(cp)) {\n            this._leaveAttrValue(BEFORE_ATTRIBUTE_NAME_STATE);\n        } else if (cp === $.SOLIDUS) {\n            this._leaveAttrValue(SELF_CLOSING_START_TAG_STATE);\n        } else if (cp === $.GREATER_THAN_SIGN) {\n            this._leaveAttrValue(DATA_STATE);\n            this._emitCurrentToken();\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInTag);\n            this._emitEOFToken();\n        } else {\n            this._err(ERR.missingWhitespaceBetweenAttributes);\n            this._reconsumeInState(BEFORE_ATTRIBUTE_NAME_STATE);\n        }\n    }\n\n    // Self-closing start tag state\n    //------------------------------------------------------------------\n    [SELF_CLOSING_START_TAG_STATE](cp) {\n        if (cp === $.GREATER_THAN_SIGN) {\n            this.currentToken.selfClosing = true;\n            this.state = DATA_STATE;\n            this._emitCurrentToken();\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInTag);\n            this._emitEOFToken();\n        } else {\n            this._err(ERR.unexpectedSolidusInTag);\n            this._reconsumeInState(BEFORE_ATTRIBUTE_NAME_STATE);\n        }\n    }\n\n    // Bogus comment state\n    //------------------------------------------------------------------\n    [BOGUS_COMMENT_STATE](cp) {\n        if (cp === $.GREATER_THAN_SIGN) {\n            this.state = DATA_STATE;\n            this._emitCurrentToken();\n        } else if (cp === $.EOF) {\n            this._emitCurrentToken();\n            this._emitEOFToken();\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this.currentToken.data += unicode.REPLACEMENT_CHARACTER;\n        } else {\n            this.currentToken.data += toChar(cp);\n        }\n    }\n\n    // Markup declaration open state\n    //------------------------------------------------------------------\n    [MARKUP_DECLARATION_OPEN_STATE](cp) {\n        if (this._consumeSequenceIfMatch($$.DASH_DASH_STRING, cp, true)) {\n            this._createCommentToken();\n            this.state = COMMENT_START_STATE;\n        } else if (this._consumeSequenceIfMatch($$.DOCTYPE_STRING, cp, false)) {\n            this.state = DOCTYPE_STATE;\n        } else if (this._consumeSequenceIfMatch($$.CDATA_START_STRING, cp, true)) {\n            if (this.allowCDATA) {\n                this.state = CDATA_SECTION_STATE;\n            } else {\n                this._err(ERR.cdataInHtmlContent);\n                this._createCommentToken();\n                this.currentToken.data = '[CDATA[';\n                this.state = BOGUS_COMMENT_STATE;\n            }\n        }\n\n        //NOTE: sequence lookup can be abrupted by hibernation. In that case lookup\n        //results are no longer valid and we will need to start over.\n        else if (!this._ensureHibernation()) {\n            this._err(ERR.incorrectlyOpenedComment);\n            this._createCommentToken();\n            this._reconsumeInState(BOGUS_COMMENT_STATE);\n        }\n    }\n\n    // Comment start state\n    //------------------------------------------------------------------\n    [COMMENT_START_STATE](cp) {\n        if (cp === $.HYPHEN_MINUS) {\n            this.state = COMMENT_START_DASH_STATE;\n        } else if (cp === $.GREATER_THAN_SIGN) {\n            this._err(ERR.abruptClosingOfEmptyComment);\n            this.state = DATA_STATE;\n            this._emitCurrentToken();\n        } else {\n            this._reconsumeInState(COMMENT_STATE);\n        }\n    }\n\n    // Comment start dash state\n    //------------------------------------------------------------------\n    [COMMENT_START_DASH_STATE](cp) {\n        if (cp === $.HYPHEN_MINUS) {\n            this.state = COMMENT_END_STATE;\n        } else if (cp === $.GREATER_THAN_SIGN) {\n            this._err(ERR.abruptClosingOfEmptyComment);\n            this.state = DATA_STATE;\n            this._emitCurrentToken();\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInComment);\n            this._emitCurrentToken();\n            this._emitEOFToken();\n        } else {\n            this.currentToken.data += '-';\n            this._reconsumeInState(COMMENT_STATE);\n        }\n    }\n\n    // Comment state\n    //------------------------------------------------------------------\n    [COMMENT_STATE](cp) {\n        if (cp === $.HYPHEN_MINUS) {\n            this.state = COMMENT_END_DASH_STATE;\n        } else if (cp === $.LESS_THAN_SIGN) {\n            this.currentToken.data += '<';\n            this.state = COMMENT_LESS_THAN_SIGN_STATE;\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this.currentToken.data += unicode.REPLACEMENT_CHARACTER;\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInComment);\n            this._emitCurrentToken();\n            this._emitEOFToken();\n        } else {\n            this.currentToken.data += toChar(cp);\n        }\n    }\n\n    // Comment less-than sign state\n    //------------------------------------------------------------------\n    [COMMENT_LESS_THAN_SIGN_STATE](cp) {\n        if (cp === $.EXCLAMATION_MARK) {\n            this.currentToken.data += '!';\n            this.state = COMMENT_LESS_THAN_SIGN_BANG_STATE;\n        } else if (cp === $.LESS_THAN_SIGN) {\n            this.currentToken.data += '!';\n        } else {\n            this._reconsumeInState(COMMENT_STATE);\n        }\n    }\n\n    // Comment less-than sign bang state\n    //------------------------------------------------------------------\n    [COMMENT_LESS_THAN_SIGN_BANG_STATE](cp) {\n        if (cp === $.HYPHEN_MINUS) {\n            this.state = COMMENT_LESS_THAN_SIGN_BANG_DASH_STATE;\n        } else {\n            this._reconsumeInState(COMMENT_STATE);\n        }\n    }\n\n    // Comment less-than sign bang dash state\n    //------------------------------------------------------------------\n    [COMMENT_LESS_THAN_SIGN_BANG_DASH_STATE](cp) {\n        if (cp === $.HYPHEN_MINUS) {\n            this.state = COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH_STATE;\n        } else {\n            this._reconsumeInState(COMMENT_END_DASH_STATE);\n        }\n    }\n\n    // Comment less-than sign bang dash dash state\n    //------------------------------------------------------------------\n    [COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH_STATE](cp) {\n        if (cp !== $.GREATER_THAN_SIGN && cp !== $.EOF) {\n            this._err(ERR.nestedComment);\n        }\n\n        this._reconsumeInState(COMMENT_END_STATE);\n    }\n\n    // Comment end dash state\n    //------------------------------------------------------------------\n    [COMMENT_END_DASH_STATE](cp) {\n        if (cp === $.HYPHEN_MINUS) {\n            this.state = COMMENT_END_STATE;\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInComment);\n            this._emitCurrentToken();\n            this._emitEOFToken();\n        } else {\n            this.currentToken.data += '-';\n            this._reconsumeInState(COMMENT_STATE);\n        }\n    }\n\n    // Comment end state\n    //------------------------------------------------------------------\n    [COMMENT_END_STATE](cp) {\n        if (cp === $.GREATER_THAN_SIGN) {\n            this.state = DATA_STATE;\n            this._emitCurrentToken();\n        } else if (cp === $.EXCLAMATION_MARK) {\n            this.state = COMMENT_END_BANG_STATE;\n        } else if (cp === $.HYPHEN_MINUS) {\n            this.currentToken.data += '-';\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInComment);\n            this._emitCurrentToken();\n            this._emitEOFToken();\n        } else {\n            this.currentToken.data += '--';\n            this._reconsumeInState(COMMENT_STATE);\n        }\n    }\n\n    // Comment end bang state\n    //------------------------------------------------------------------\n    [COMMENT_END_BANG_STATE](cp) {\n        if (cp === $.HYPHEN_MINUS) {\n            this.currentToken.data += '--!';\n            this.state = COMMENT_END_DASH_STATE;\n        } else if (cp === $.GREATER_THAN_SIGN) {\n            this._err(ERR.incorrectlyClosedComment);\n            this.state = DATA_STATE;\n            this._emitCurrentToken();\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInComment);\n            this._emitCurrentToken();\n            this._emitEOFToken();\n        } else {\n            this.currentToken.data += '--!';\n            this._reconsumeInState(COMMENT_STATE);\n        }\n    }\n\n    // DOCTYPE state\n    //------------------------------------------------------------------\n    [DOCTYPE_STATE](cp) {\n        if (isWhitespace(cp)) {\n            this.state = BEFORE_DOCTYPE_NAME_STATE;\n        } else if (cp === $.GREATER_THAN_SIGN) {\n            this._reconsumeInState(BEFORE_DOCTYPE_NAME_STATE);\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInDoctype);\n            this._createDoctypeToken(null);\n            this.currentToken.forceQuirks = true;\n            this._emitCurrentToken();\n            this._emitEOFToken();\n        } else {\n            this._err(ERR.missingWhitespaceBeforeDoctypeName);\n            this._reconsumeInState(BEFORE_DOCTYPE_NAME_STATE);\n        }\n    }\n\n    // Before DOCTYPE name state\n    //------------------------------------------------------------------\n    [BEFORE_DOCTYPE_NAME_STATE](cp) {\n        if (isWhitespace(cp)) {\n            return;\n        }\n\n        if (isAsciiUpper(cp)) {\n            this._createDoctypeToken(toAsciiLowerChar(cp));\n            this.state = DOCTYPE_NAME_STATE;\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this._createDoctypeToken(unicode.REPLACEMENT_CHARACTER);\n            this.state = DOCTYPE_NAME_STATE;\n        } else if (cp === $.GREATER_THAN_SIGN) {\n            this._err(ERR.missingDoctypeName);\n            this._createDoctypeToken(null);\n            this.currentToken.forceQuirks = true;\n            this._emitCurrentToken();\n            this.state = DATA_STATE;\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInDoctype);\n            this._createDoctypeToken(null);\n            this.currentToken.forceQuirks = true;\n            this._emitCurrentToken();\n            this._emitEOFToken();\n        } else {\n            this._createDoctypeToken(toChar(cp));\n            this.state = DOCTYPE_NAME_STATE;\n        }\n    }\n\n    // DOCTYPE name state\n    //------------------------------------------------------------------\n    [DOCTYPE_NAME_STATE](cp) {\n        if (isWhitespace(cp)) {\n            this.state = AFTER_DOCTYPE_NAME_STATE;\n        } else if (cp === $.GREATER_THAN_SIGN) {\n            this.state = DATA_STATE;\n            this._emitCurrentToken();\n        } else if (isAsciiUpper(cp)) {\n            this.currentToken.name += toAsciiLowerChar(cp);\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this.currentToken.name += unicode.REPLACEMENT_CHARACTER;\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInDoctype);\n            this.currentToken.forceQuirks = true;\n            this._emitCurrentToken();\n            this._emitEOFToken();\n        } else {\n            this.currentToken.name += toChar(cp);\n        }\n    }\n\n    // After DOCTYPE name state\n    //------------------------------------------------------------------\n    [AFTER_DOCTYPE_NAME_STATE](cp) {\n        if (isWhitespace(cp)) {\n            return;\n        }\n\n        if (cp === $.GREATER_THAN_SIGN) {\n            this.state = DATA_STATE;\n            this._emitCurrentToken();\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInDoctype);\n            this.currentToken.forceQuirks = true;\n            this._emitCurrentToken();\n            this._emitEOFToken();\n        } else if (this._consumeSequenceIfMatch($$.PUBLIC_STRING, cp, false)) {\n            this.state = AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE;\n        } else if (this._consumeSequenceIfMatch($$.SYSTEM_STRING, cp, false)) {\n            this.state = AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE;\n        }\n        //NOTE: sequence lookup can be abrupted by hibernation. In that case lookup\n        //results are no longer valid and we will need to start over.\n        else if (!this._ensureHibernation()) {\n            this._err(ERR.invalidCharacterSequenceAfterDoctypeName);\n            this.currentToken.forceQuirks = true;\n            this._reconsumeInState(BOGUS_DOCTYPE_STATE);\n        }\n    }\n\n    // After DOCTYPE public keyword state\n    //------------------------------------------------------------------\n    [AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE](cp) {\n        if (isWhitespace(cp)) {\n            this.state = BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE;\n        } else if (cp === $.QUOTATION_MARK) {\n            this._err(ERR.missingWhitespaceAfterDoctypePublicKeyword);\n            this.currentToken.publicId = '';\n            this.state = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;\n        } else if (cp === $.APOSTROPHE) {\n            this._err(ERR.missingWhitespaceAfterDoctypePublicKeyword);\n            this.currentToken.publicId = '';\n            this.state = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;\n        } else if (cp === $.GREATER_THAN_SIGN) {\n            this._err(ERR.missingDoctypePublicIdentifier);\n            this.currentToken.forceQuirks = true;\n            this.state = DATA_STATE;\n            this._emitCurrentToken();\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInDoctype);\n            this.currentToken.forceQuirks = true;\n            this._emitCurrentToken();\n            this._emitEOFToken();\n        } else {\n            this._err(ERR.missingQuoteBeforeDoctypePublicIdentifier);\n            this.currentToken.forceQuirks = true;\n            this._reconsumeInState(BOGUS_DOCTYPE_STATE);\n        }\n    }\n\n    // Before DOCTYPE public identifier state\n    //------------------------------------------------------------------\n    [BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE](cp) {\n        if (isWhitespace(cp)) {\n            return;\n        }\n\n        if (cp === $.QUOTATION_MARK) {\n            this.currentToken.publicId = '';\n            this.state = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;\n        } else if (cp === $.APOSTROPHE) {\n            this.currentToken.publicId = '';\n            this.state = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;\n        } else if (cp === $.GREATER_THAN_SIGN) {\n            this._err(ERR.missingDoctypePublicIdentifier);\n            this.currentToken.forceQuirks = true;\n            this.state = DATA_STATE;\n            this._emitCurrentToken();\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInDoctype);\n            this.currentToken.forceQuirks = true;\n            this._emitCurrentToken();\n            this._emitEOFToken();\n        } else {\n            this._err(ERR.missingQuoteBeforeDoctypePublicIdentifier);\n            this.currentToken.forceQuirks = true;\n            this._reconsumeInState(BOGUS_DOCTYPE_STATE);\n        }\n    }\n\n    // DOCTYPE public identifier (double-quoted) state\n    //------------------------------------------------------------------\n    [DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE](cp) {\n        if (cp === $.QUOTATION_MARK) {\n            this.state = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE;\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this.currentToken.publicId += unicode.REPLACEMENT_CHARACTER;\n        } else if (cp === $.GREATER_THAN_SIGN) {\n            this._err(ERR.abruptDoctypePublicIdentifier);\n            this.currentToken.forceQuirks = true;\n            this._emitCurrentToken();\n            this.state = DATA_STATE;\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInDoctype);\n            this.currentToken.forceQuirks = true;\n            this._emitCurrentToken();\n            this._emitEOFToken();\n        } else {\n            this.currentToken.publicId += toChar(cp);\n        }\n    }\n\n    // DOCTYPE public identifier (single-quoted) state\n    //------------------------------------------------------------------\n    [DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE](cp) {\n        if (cp === $.APOSTROPHE) {\n            this.state = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE;\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this.currentToken.publicId += unicode.REPLACEMENT_CHARACTER;\n        } else if (cp === $.GREATER_THAN_SIGN) {\n            this._err(ERR.abruptDoctypePublicIdentifier);\n            this.currentToken.forceQuirks = true;\n            this._emitCurrentToken();\n            this.state = DATA_STATE;\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInDoctype);\n            this.currentToken.forceQuirks = true;\n            this._emitCurrentToken();\n            this._emitEOFToken();\n        } else {\n            this.currentToken.publicId += toChar(cp);\n        }\n    }\n\n    // After DOCTYPE public identifier state\n    //------------------------------------------------------------------\n    [AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE](cp) {\n        if (isWhitespace(cp)) {\n            this.state = BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE;\n        } else if (cp === $.GREATER_THAN_SIGN) {\n            this.state = DATA_STATE;\n            this._emitCurrentToken();\n        } else if (cp === $.QUOTATION_MARK) {\n            this._err(ERR.missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers);\n            this.currentToken.systemId = '';\n            this.state = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;\n        } else if (cp === $.APOSTROPHE) {\n            this._err(ERR.missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers);\n            this.currentToken.systemId = '';\n            this.state = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInDoctype);\n            this.currentToken.forceQuirks = true;\n            this._emitCurrentToken();\n            this._emitEOFToken();\n        } else {\n            this._err(ERR.missingQuoteBeforeDoctypeSystemIdentifier);\n            this.currentToken.forceQuirks = true;\n            this._reconsumeInState(BOGUS_DOCTYPE_STATE);\n        }\n    }\n\n    // Between DOCTYPE public and system identifiers state\n    //------------------------------------------------------------------\n    [BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE](cp) {\n        if (isWhitespace(cp)) {\n            return;\n        }\n\n        if (cp === $.GREATER_THAN_SIGN) {\n            this._emitCurrentToken();\n            this.state = DATA_STATE;\n        } else if (cp === $.QUOTATION_MARK) {\n            this.currentToken.systemId = '';\n            this.state = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;\n        } else if (cp === $.APOSTROPHE) {\n            this.currentToken.systemId = '';\n            this.state = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInDoctype);\n            this.currentToken.forceQuirks = true;\n            this._emitCurrentToken();\n            this._emitEOFToken();\n        } else {\n            this._err(ERR.missingQuoteBeforeDoctypeSystemIdentifier);\n            this.currentToken.forceQuirks = true;\n            this._reconsumeInState(BOGUS_DOCTYPE_STATE);\n        }\n    }\n\n    // After DOCTYPE system keyword state\n    //------------------------------------------------------------------\n    [AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE](cp) {\n        if (isWhitespace(cp)) {\n            this.state = BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE;\n        } else if (cp === $.QUOTATION_MARK) {\n            this._err(ERR.missingWhitespaceAfterDoctypeSystemKeyword);\n            this.currentToken.systemId = '';\n            this.state = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;\n        } else if (cp === $.APOSTROPHE) {\n            this._err(ERR.missingWhitespaceAfterDoctypeSystemKeyword);\n            this.currentToken.systemId = '';\n            this.state = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;\n        } else if (cp === $.GREATER_THAN_SIGN) {\n            this._err(ERR.missingDoctypeSystemIdentifier);\n            this.currentToken.forceQuirks = true;\n            this.state = DATA_STATE;\n            this._emitCurrentToken();\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInDoctype);\n            this.currentToken.forceQuirks = true;\n            this._emitCurrentToken();\n            this._emitEOFToken();\n        } else {\n            this._err(ERR.missingQuoteBeforeDoctypeSystemIdentifier);\n            this.currentToken.forceQuirks = true;\n            this._reconsumeInState(BOGUS_DOCTYPE_STATE);\n        }\n    }\n\n    // Before DOCTYPE system identifier state\n    //------------------------------------------------------------------\n    [BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE](cp) {\n        if (isWhitespace(cp)) {\n            return;\n        }\n\n        if (cp === $.QUOTATION_MARK) {\n            this.currentToken.systemId = '';\n            this.state = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;\n        } else if (cp === $.APOSTROPHE) {\n            this.currentToken.systemId = '';\n            this.state = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;\n        } else if (cp === $.GREATER_THAN_SIGN) {\n            this._err(ERR.missingDoctypeSystemIdentifier);\n            this.currentToken.forceQuirks = true;\n            this.state = DATA_STATE;\n            this._emitCurrentToken();\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInDoctype);\n            this.currentToken.forceQuirks = true;\n            this._emitCurrentToken();\n            this._emitEOFToken();\n        } else {\n            this._err(ERR.missingQuoteBeforeDoctypeSystemIdentifier);\n            this.currentToken.forceQuirks = true;\n            this._reconsumeInState(BOGUS_DOCTYPE_STATE);\n        }\n    }\n\n    // DOCTYPE system identifier (double-quoted) state\n    //------------------------------------------------------------------\n    [DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE](cp) {\n        if (cp === $.QUOTATION_MARK) {\n            this.state = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this.currentToken.systemId += unicode.REPLACEMENT_CHARACTER;\n        } else if (cp === $.GREATER_THAN_SIGN) {\n            this._err(ERR.abruptDoctypeSystemIdentifier);\n            this.currentToken.forceQuirks = true;\n            this._emitCurrentToken();\n            this.state = DATA_STATE;\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInDoctype);\n            this.currentToken.forceQuirks = true;\n            this._emitCurrentToken();\n            this._emitEOFToken();\n        } else {\n            this.currentToken.systemId += toChar(cp);\n        }\n    }\n\n    // DOCTYPE system identifier (single-quoted) state\n    //------------------------------------------------------------------\n    [DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE](cp) {\n        if (cp === $.APOSTROPHE) {\n            this.state = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this.currentToken.systemId += unicode.REPLACEMENT_CHARACTER;\n        } else if (cp === $.GREATER_THAN_SIGN) {\n            this._err(ERR.abruptDoctypeSystemIdentifier);\n            this.currentToken.forceQuirks = true;\n            this._emitCurrentToken();\n            this.state = DATA_STATE;\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInDoctype);\n            this.currentToken.forceQuirks = true;\n            this._emitCurrentToken();\n            this._emitEOFToken();\n        } else {\n            this.currentToken.systemId += toChar(cp);\n        }\n    }\n\n    // After DOCTYPE system identifier state\n    //------------------------------------------------------------------\n    [AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE](cp) {\n        if (isWhitespace(cp)) {\n            return;\n        }\n\n        if (cp === $.GREATER_THAN_SIGN) {\n            this._emitCurrentToken();\n            this.state = DATA_STATE;\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInDoctype);\n            this.currentToken.forceQuirks = true;\n            this._emitCurrentToken();\n            this._emitEOFToken();\n        } else {\n            this._err(ERR.unexpectedCharacterAfterDoctypeSystemIdentifier);\n            this._reconsumeInState(BOGUS_DOCTYPE_STATE);\n        }\n    }\n\n    // Bogus DOCTYPE state\n    //------------------------------------------------------------------\n    [BOGUS_DOCTYPE_STATE](cp) {\n        if (cp === $.GREATER_THAN_SIGN) {\n            this._emitCurrentToken();\n            this.state = DATA_STATE;\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n        } else if (cp === $.EOF) {\n            this._emitCurrentToken();\n            this._emitEOFToken();\n        }\n    }\n\n    // CDATA section state\n    //------------------------------------------------------------------\n    [CDATA_SECTION_STATE](cp) {\n        if (cp === $.RIGHT_SQUARE_BRACKET) {\n            this.state = CDATA_SECTION_BRACKET_STATE;\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInCdata);\n            this._emitEOFToken();\n        } else {\n            this._emitCodePoint(cp);\n        }\n    }\n\n    // CDATA section bracket state\n    //------------------------------------------------------------------\n    [CDATA_SECTION_BRACKET_STATE](cp) {\n        if (cp === $.RIGHT_SQUARE_BRACKET) {\n            this.state = CDATA_SECTION_END_STATE;\n        } else {\n            this._emitChars(']');\n            this._reconsumeInState(CDATA_SECTION_STATE);\n        }\n    }\n\n    // CDATA section end state\n    //------------------------------------------------------------------\n    [CDATA_SECTION_END_STATE](cp) {\n        if (cp === $.GREATER_THAN_SIGN) {\n            this.state = DATA_STATE;\n        } else if (cp === $.RIGHT_SQUARE_BRACKET) {\n            this._emitChars(']');\n        } else {\n            this._emitChars(']]');\n            this._reconsumeInState(CDATA_SECTION_STATE);\n        }\n    }\n\n    // Character reference state\n    //------------------------------------------------------------------\n    [CHARACTER_REFERENCE_STATE](cp) {\n        this.tempBuff = [$.AMPERSAND];\n\n        if (cp === $.NUMBER_SIGN) {\n            this.tempBuff.push(cp);\n            this.state = NUMERIC_CHARACTER_REFERENCE_STATE;\n        } else if (isAsciiAlphaNumeric(cp)) {\n            this._reconsumeInState(NAMED_CHARACTER_REFERENCE_STATE);\n        } else {\n            this._flushCodePointsConsumedAsCharacterReference();\n            this._reconsumeInState(this.returnState);\n        }\n    }\n\n    // Named character reference state\n    //------------------------------------------------------------------\n    [NAMED_CHARACTER_REFERENCE_STATE](cp) {\n        const matchResult = this._matchNamedCharacterReference(cp);\n\n        //NOTE: matching can be abrupted by hibernation. In that case match\n        //results are no longer valid and we will need to start over.\n        if (this._ensureHibernation()) {\n            this.tempBuff = [$.AMPERSAND];\n        } else if (matchResult) {\n            const withSemicolon = this.tempBuff[this.tempBuff.length - 1] === $.SEMICOLON;\n\n            if (!this._isCharacterReferenceAttributeQuirk(withSemicolon)) {\n                if (!withSemicolon) {\n                    this._errOnNextCodePoint(ERR.missingSemicolonAfterCharacterReference);\n                }\n\n                this.tempBuff = matchResult;\n            }\n\n            this._flushCodePointsConsumedAsCharacterReference();\n            this.state = this.returnState;\n        } else {\n            this._flushCodePointsConsumedAsCharacterReference();\n            this.state = AMBIGUOUS_AMPERSAND_STATE;\n        }\n    }\n\n    // Ambiguos ampersand state\n    //------------------------------------------------------------------\n    [AMBIGUOUS_AMPERSAND_STATE](cp) {\n        if (isAsciiAlphaNumeric(cp)) {\n            if (this._isCharacterReferenceInAttribute()) {\n                this.currentAttr.value += toChar(cp);\n            } else {\n                this._emitCodePoint(cp);\n            }\n        } else {\n            if (cp === $.SEMICOLON) {\n                this._err(ERR.unknownNamedCharacterReference);\n            }\n\n            this._reconsumeInState(this.returnState);\n        }\n    }\n\n    // Numeric character reference state\n    //------------------------------------------------------------------\n    [NUMERIC_CHARACTER_REFERENCE_STATE](cp) {\n        this.charRefCode = 0;\n\n        if (cp === $.LATIN_SMALL_X || cp === $.LATIN_CAPITAL_X) {\n            this.tempBuff.push(cp);\n            this.state = HEXADEMICAL_CHARACTER_REFERENCE_START_STATE;\n        } else {\n            this._reconsumeInState(DECIMAL_CHARACTER_REFERENCE_START_STATE);\n        }\n    }\n\n    // Hexademical character reference start state\n    //------------------------------------------------------------------\n    [HEXADEMICAL_CHARACTER_REFERENCE_START_STATE](cp) {\n        if (isAsciiHexDigit(cp)) {\n            this._reconsumeInState(HEXADEMICAL_CHARACTER_REFERENCE_STATE);\n        } else {\n            this._err(ERR.absenceOfDigitsInNumericCharacterReference);\n            this._flushCodePointsConsumedAsCharacterReference();\n            this._reconsumeInState(this.returnState);\n        }\n    }\n\n    // Decimal character reference start state\n    //------------------------------------------------------------------\n    [DECIMAL_CHARACTER_REFERENCE_START_STATE](cp) {\n        if (isAsciiDigit(cp)) {\n            this._reconsumeInState(DECIMAL_CHARACTER_REFERENCE_STATE);\n        } else {\n            this._err(ERR.absenceOfDigitsInNumericCharacterReference);\n            this._flushCodePointsConsumedAsCharacterReference();\n            this._reconsumeInState(this.returnState);\n        }\n    }\n\n    // Hexademical character reference state\n    //------------------------------------------------------------------\n    [HEXADEMICAL_CHARACTER_REFERENCE_STATE](cp) {\n        if (isAsciiUpperHexDigit(cp)) {\n            this.charRefCode = this.charRefCode * 16 + cp - 0x37;\n        } else if (isAsciiLowerHexDigit(cp)) {\n            this.charRefCode = this.charRefCode * 16 + cp - 0x57;\n        } else if (isAsciiDigit(cp)) {\n            this.charRefCode = this.charRefCode * 16 + cp - 0x30;\n        } else if (cp === $.SEMICOLON) {\n            this.state = NUMERIC_CHARACTER_REFERENCE_END_STATE;\n        } else {\n            this._err(ERR.missingSemicolonAfterCharacterReference);\n            this._reconsumeInState(NUMERIC_CHARACTER_REFERENCE_END_STATE);\n        }\n    }\n\n    // Decimal character reference state\n    //------------------------------------------------------------------\n    [DECIMAL_CHARACTER_REFERENCE_STATE](cp) {\n        if (isAsciiDigit(cp)) {\n            this.charRefCode = this.charRefCode * 10 + cp - 0x30;\n        } else if (cp === $.SEMICOLON) {\n            this.state = NUMERIC_CHARACTER_REFERENCE_END_STATE;\n        } else {\n            this._err(ERR.missingSemicolonAfterCharacterReference);\n            this._reconsumeInState(NUMERIC_CHARACTER_REFERENCE_END_STATE);\n        }\n    }\n\n    // Numeric character reference end state\n    //------------------------------------------------------------------\n    [NUMERIC_CHARACTER_REFERENCE_END_STATE]() {\n        if (this.charRefCode === $.NULL) {\n            this._err(ERR.nullCharacterReference);\n            this.charRefCode = $.REPLACEMENT_CHARACTER;\n        } else if (this.charRefCode > 0x10ffff) {\n            this._err(ERR.characterReferenceOutsideUnicodeRange);\n            this.charRefCode = $.REPLACEMENT_CHARACTER;\n        } else if (unicode.isSurrogate(this.charRefCode)) {\n            this._err(ERR.surrogateCharacterReference);\n            this.charRefCode = $.REPLACEMENT_CHARACTER;\n        } else if (unicode.isUndefinedCodePoint(this.charRefCode)) {\n            this._err(ERR.noncharacterCharacterReference);\n        } else if (unicode.isControlCodePoint(this.charRefCode) || this.charRefCode === $.CARRIAGE_RETURN) {\n            this._err(ERR.controlCharacterReference);\n\n            const replacement = C1_CONTROLS_REFERENCE_REPLACEMENTS[this.charRefCode];\n\n            if (replacement) {\n                this.charRefCode = replacement;\n            }\n        }\n\n        this.tempBuff = [this.charRefCode];\n\n        this._flushCodePointsConsumedAsCharacterReference();\n        this._reconsumeInState(this.returnState);\n    }\n}\n\n//Token types\nTokenizer.CHARACTER_TOKEN = 'CHARACTER_TOKEN';\nTokenizer.NULL_CHARACTER_TOKEN = 'NULL_CHARACTER_TOKEN';\nTokenizer.WHITESPACE_CHARACTER_TOKEN = 'WHITESPACE_CHARACTER_TOKEN';\nTokenizer.START_TAG_TOKEN = 'START_TAG_TOKEN';\nTokenizer.END_TAG_TOKEN = 'END_TAG_TOKEN';\nTokenizer.COMMENT_TOKEN = 'COMMENT_TOKEN';\nTokenizer.DOCTYPE_TOKEN = 'DOCTYPE_TOKEN';\nTokenizer.EOF_TOKEN = 'EOF_TOKEN';\nTokenizer.HIBERNATION_TOKEN = 'HIBERNATION_TOKEN';\n\n//Tokenizer initial states for different modes\nTokenizer.MODE = {\n    DATA: DATA_STATE,\n    RCDATA: RCDATA_STATE,\n    RAWTEXT: RAWTEXT_STATE,\n    SCRIPT_DATA: SCRIPT_DATA_STATE,\n    PLAINTEXT: PLAINTEXT_STATE\n};\n\n//Static\nTokenizer.getTokenAttr = function(token, attrName) {\n    for (let i = token.attrs.length - 1; i >= 0; i--) {\n        if (token.attrs[i].name === attrName) {\n            return token.attrs[i].value;\n        }\n    }\n\n    return null;\n};\n\nmodule.exports = Tokenizer;\n"]},"metadata":{},"sourceType":"script"}