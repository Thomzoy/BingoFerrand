{"ast":null,"code":"\"use strict\";\n\nrequire(\"core-js/modules/es.object.define-property.js\");\n\nrequire(\"core-js/modules/es.regexp.exec.js\");\n\nrequire(\"core-js/modules/es.string.replace.js\");\n\nrequire(\"core-js/modules/es.array.map.js\");\n\nrequire(\"core-js/modules/es.array.for-each.js\");\n\nrequire(\"core-js/modules/es.object.to-string.js\");\n\nrequire(\"core-js/modules/web.dom-collections.for-each.js\");\n\nrequire(\"core-js/modules/es.regexp.test.js\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isHtml = exports.cloneDom = exports.domEach = exports.cssCase = exports.camelCase = exports.isCheerio = exports.isTag = void 0;\n\nvar htmlparser2_1 = require(\"htmlparser2\");\n\nvar domhandler_1 = require(\"domhandler\");\n/**\n * Check if the DOM element is a tag.\n *\n * `isTag(type)` includes `<script>` and `<style>` tags.\n *\n * @private\n * @category Utils\n * @param type - DOM node to check.\n * @returns Whether the node is a tag.\n */\n\n\nexports.isTag = htmlparser2_1.DomUtils.isTag;\n/**\n * Checks if an object is a Cheerio instance.\n *\n * @category Utils\n * @param maybeCheerio - The object to check.\n * @returns Whether the object is a Cheerio instance.\n */\n\nfunction isCheerio(maybeCheerio) {\n  return maybeCheerio.cheerio != null;\n}\n\nexports.isCheerio = isCheerio;\n/**\n * Convert a string to camel case notation.\n *\n * @private\n * @category Utils\n * @param str - String to be converted.\n * @returns String in camel case notation.\n */\n\nfunction camelCase(str) {\n  return str.replace(/[_.-](\\w|$)/g, function (_, x) {\n    return x.toUpperCase();\n  });\n}\n\nexports.camelCase = camelCase;\n/**\n * Convert a string from camel case to \"CSS case\", where word boundaries are\n * described by hyphens (\"-\") and all characters are lower-case.\n *\n * @private\n * @category Utils\n * @param str - String to be converted.\n * @returns String in \"CSS case\".\n */\n\nfunction cssCase(str) {\n  return str.replace(/[A-Z]/g, '-$&').toLowerCase();\n}\n\nexports.cssCase = cssCase;\n/**\n * Iterate over each DOM element without creating intermediary Cheerio instances.\n *\n * This is indented for use internally to avoid otherwise unnecessary memory\n * pressure introduced by _make.\n *\n * @category Utils\n * @param array - Array to iterate over.\n * @param fn - Function to call.\n * @returns The original instance.\n */\n\nfunction domEach(array, fn) {\n  var len = array.length;\n\n  for (var i = 0; i < len; i++) {\n    fn(array[i], i);\n  }\n\n  return array;\n}\n\nexports.domEach = domEach;\n/**\n * Create a deep copy of the given DOM structure. Sets the parents of the copies\n * of the passed nodes to `null`.\n *\n * @private\n * @category Utils\n * @param dom - The htmlparser2-compliant DOM structure.\n * @returns - The cloned DOM.\n */\n\nfunction cloneDom(dom) {\n  var clone = 'length' in dom ? Array.prototype.map.call(dom, function (el) {\n    return domhandler_1.cloneNode(el, true);\n  }) : [domhandler_1.cloneNode(dom, true)]; // Add a root node around the cloned nodes\n\n  var root = new domhandler_1.Document(clone);\n  clone.forEach(function (node) {\n    node.parent = root;\n  });\n  return clone;\n}\n\nexports.cloneDom = cloneDom;\n/**\n * A simple way to check for HTML strings. Tests for a `<` within a string,\n * immediate followed by a letter and eventually followed by a `>`.\n *\n * @private\n */\n\nvar quickExpr = /<[a-zA-Z][^]*>/;\n/**\n * Check if string is HTML.\n *\n * @private\n * @category Utils\n * @param str - String to check.\n * @returns Indicates if `str` is HTML.\n */\n\nfunction isHtml(str) {\n  // Run the regex\n  return quickExpr.test(str);\n}\n\nexports.isHtml = isHtml;","map":{"version":3,"sources":["/home/thomas/Code/BingoFerrand/node_modules/cheerio/lib/utils.js"],"names":["Object","defineProperty","exports","value","isHtml","cloneDom","domEach","cssCase","camelCase","isCheerio","isTag","htmlparser2_1","require","domhandler_1","DomUtils","maybeCheerio","cheerio","str","replace","_","x","toUpperCase","toLowerCase","array","fn","len","length","i","dom","clone","Array","prototype","map","call","el","cloneNode","root","Document","forEach","node","parent","quickExpr","test"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,MAAR,GAAiBF,OAAO,CAACG,QAAR,GAAmBH,OAAO,CAACI,OAAR,GAAkBJ,OAAO,CAACK,OAAR,GAAkBL,OAAO,CAACM,SAAR,GAAoBN,OAAO,CAACO,SAAR,GAAoBP,OAAO,CAACQ,KAAR,GAAgB,KAAK,CAArI;;AACA,IAAIC,aAAa,GAAGC,OAAO,CAAC,aAAD,CAA3B;;AACA,IAAIC,YAAY,GAAGD,OAAO,CAAC,YAAD,CAA1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAV,OAAO,CAACQ,KAAR,GAAgBC,aAAa,CAACG,QAAd,CAAuBJ,KAAvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASD,SAAT,CAAmBM,YAAnB,EAAiC;AAC7B,SAAOA,YAAY,CAACC,OAAb,IAAwB,IAA/B;AACH;;AACDd,OAAO,CAACO,SAAR,GAAoBA,SAApB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASD,SAAT,CAAmBS,GAAnB,EAAwB;AACpB,SAAOA,GAAG,CAACC,OAAJ,CAAY,cAAZ,EAA4B,UAAUC,CAAV,EAAaC,CAAb,EAAgB;AAAE,WAAOA,CAAC,CAACC,WAAF,EAAP;AAAyB,GAAvE,CAAP;AACH;;AACDnB,OAAO,CAACM,SAAR,GAAoBA,SAApB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASD,OAAT,CAAiBU,GAAjB,EAAsB;AAClB,SAAOA,GAAG,CAACC,OAAJ,CAAY,QAAZ,EAAsB,KAAtB,EAA6BI,WAA7B,EAAP;AACH;;AACDpB,OAAO,CAACK,OAAR,GAAkBA,OAAlB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASD,OAAT,CAAiBiB,KAAjB,EAAwBC,EAAxB,EAA4B;AACxB,MAAIC,GAAG,GAAGF,KAAK,CAACG,MAAhB;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,GAApB,EAAyBE,CAAC,EAA1B;AACIH,IAAAA,EAAE,CAACD,KAAK,CAACI,CAAD,CAAN,EAAWA,CAAX,CAAF;AADJ;;AAEA,SAAOJ,KAAP;AACH;;AACDrB,OAAO,CAACI,OAAR,GAAkBA,OAAlB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASD,QAAT,CAAkBuB,GAAlB,EAAuB;AACnB,MAAIC,KAAK,GAAG,YAAYD,GAAZ,GACNE,KAAK,CAACC,SAAN,CAAgBC,GAAhB,CAAoBC,IAApB,CAAyBL,GAAzB,EAA8B,UAAUM,EAAV,EAAc;AAAE,WAAOrB,YAAY,CAACsB,SAAb,CAAuBD,EAAvB,EAA2B,IAA3B,CAAP;AAA0C,GAAxF,CADM,GAEN,CAACrB,YAAY,CAACsB,SAAb,CAAuBP,GAAvB,EAA4B,IAA5B,CAAD,CAFN,CADmB,CAInB;;AACA,MAAIQ,IAAI,GAAG,IAAIvB,YAAY,CAACwB,QAAjB,CAA0BR,KAA1B,CAAX;AACAA,EAAAA,KAAK,CAACS,OAAN,CAAc,UAAUC,IAAV,EAAgB;AAC1BA,IAAAA,IAAI,CAACC,MAAL,GAAcJ,IAAd;AACH,GAFD;AAGA,SAAOP,KAAP;AACH;;AACD3B,OAAO,CAACG,QAAR,GAAmBA,QAAnB;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIoC,SAAS,GAAG,gBAAhB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASrC,MAAT,CAAgBa,GAAhB,EAAqB;AACjB;AACA,SAAOwB,SAAS,CAACC,IAAV,CAAezB,GAAf,CAAP;AACH;;AACDf,OAAO,CAACE,MAAR,GAAiBA,MAAjB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.isHtml = exports.cloneDom = exports.domEach = exports.cssCase = exports.camelCase = exports.isCheerio = exports.isTag = void 0;\nvar htmlparser2_1 = require(\"htmlparser2\");\nvar domhandler_1 = require(\"domhandler\");\n/**\n * Check if the DOM element is a tag.\n *\n * `isTag(type)` includes `<script>` and `<style>` tags.\n *\n * @private\n * @category Utils\n * @param type - DOM node to check.\n * @returns Whether the node is a tag.\n */\nexports.isTag = htmlparser2_1.DomUtils.isTag;\n/**\n * Checks if an object is a Cheerio instance.\n *\n * @category Utils\n * @param maybeCheerio - The object to check.\n * @returns Whether the object is a Cheerio instance.\n */\nfunction isCheerio(maybeCheerio) {\n    return maybeCheerio.cheerio != null;\n}\nexports.isCheerio = isCheerio;\n/**\n * Convert a string to camel case notation.\n *\n * @private\n * @category Utils\n * @param str - String to be converted.\n * @returns String in camel case notation.\n */\nfunction camelCase(str) {\n    return str.replace(/[_.-](\\w|$)/g, function (_, x) { return x.toUpperCase(); });\n}\nexports.camelCase = camelCase;\n/**\n * Convert a string from camel case to \"CSS case\", where word boundaries are\n * described by hyphens (\"-\") and all characters are lower-case.\n *\n * @private\n * @category Utils\n * @param str - String to be converted.\n * @returns String in \"CSS case\".\n */\nfunction cssCase(str) {\n    return str.replace(/[A-Z]/g, '-$&').toLowerCase();\n}\nexports.cssCase = cssCase;\n/**\n * Iterate over each DOM element without creating intermediary Cheerio instances.\n *\n * This is indented for use internally to avoid otherwise unnecessary memory\n * pressure introduced by _make.\n *\n * @category Utils\n * @param array - Array to iterate over.\n * @param fn - Function to call.\n * @returns The original instance.\n */\nfunction domEach(array, fn) {\n    var len = array.length;\n    for (var i = 0; i < len; i++)\n        fn(array[i], i);\n    return array;\n}\nexports.domEach = domEach;\n/**\n * Create a deep copy of the given DOM structure. Sets the parents of the copies\n * of the passed nodes to `null`.\n *\n * @private\n * @category Utils\n * @param dom - The htmlparser2-compliant DOM structure.\n * @returns - The cloned DOM.\n */\nfunction cloneDom(dom) {\n    var clone = 'length' in dom\n        ? Array.prototype.map.call(dom, function (el) { return domhandler_1.cloneNode(el, true); })\n        : [domhandler_1.cloneNode(dom, true)];\n    // Add a root node around the cloned nodes\n    var root = new domhandler_1.Document(clone);\n    clone.forEach(function (node) {\n        node.parent = root;\n    });\n    return clone;\n}\nexports.cloneDom = cloneDom;\n/**\n * A simple way to check for HTML strings. Tests for a `<` within a string,\n * immediate followed by a letter and eventually followed by a `>`.\n *\n * @private\n */\nvar quickExpr = /<[a-zA-Z][^]*>/;\n/**\n * Check if string is HTML.\n *\n * @private\n * @category Utils\n * @param str - String to check.\n * @returns Indicates if `str` is HTML.\n */\nfunction isHtml(str) {\n    // Run the regex\n    return quickExpr.test(str);\n}\nexports.isHtml = isHtml;\n"]},"metadata":{},"sourceType":"script"}