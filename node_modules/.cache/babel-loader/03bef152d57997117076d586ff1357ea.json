{"ast":null,"code":"import _slicedToArray from \"/home/thomas/Code/BingoFerrand/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport \"core-js/modules/es.map.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/es.set.js\";\nimport \"core-js/modules/es.parse-int.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.replace.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.string.match.js\";\nimport \"core-js/modules/es.string.starts-with.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.index-of.js\";\nimport \"core-js/modules/es.regexp.test.js\";\nimport { SelectorType, AttributeAction } from \"./types\";\nvar reName = /^[^\\\\#]?(?:\\\\(?:[\\da-f]{1,6}\\s?|.)|[\\w\\-\\u00b0-\\uFFFF])+/;\nvar reEscape = /\\\\([\\da-f]{1,6}\\s?|(\\s)|.)/gi;\nvar actionTypes = new Map([[126\n/* Tilde */\n, AttributeAction.Element], [94\n/* Circumflex */\n, AttributeAction.Start], [36\n/* Dollar */\n, AttributeAction.End], [42\n/* Asterisk */\n, AttributeAction.Any], [33\n/* ExclamationMark */\n, AttributeAction.Not], [124\n/* Pipe */\n, AttributeAction.Hyphen]]); // Pseudos, whose data property is parsed as well.\n\nvar unpackPseudos = new Set([\"has\", \"not\", \"matches\", \"is\", \"where\", \"host\", \"host-context\"]);\n/**\n * Checks whether a specific selector is a traversal.\n * This is useful eg. in swapping the order of elements that\n * are not traversals.\n *\n * @param selector Selector to check.\n */\n\nexport function isTraversal(selector) {\n  switch (selector.type) {\n    case SelectorType.Adjacent:\n    case SelectorType.Child:\n    case SelectorType.Descendant:\n    case SelectorType.Parent:\n    case SelectorType.Sibling:\n    case SelectorType.ColumnCombinator:\n      return true;\n\n    default:\n      return false;\n  }\n}\nvar stripQuotesFromPseudos = new Set([\"contains\", \"icontains\"]); // Unescape function taken from https://github.com/jquery/sizzle/blob/master/src/sizzle.js#L152\n\nfunction funescape(_, escaped, escapedWhitespace) {\n  var high = parseInt(escaped, 16) - 0x10000; // NaN means non-codepoint\n\n  return high !== high || escapedWhitespace ? escaped : high < 0 ? // BMP codepoint\n  String.fromCharCode(high + 0x10000) : // Supplemental Plane codepoint (surrogate pair)\n  String.fromCharCode(high >> 10 | 0xd800, high & 0x3ff | 0xdc00);\n}\n\nfunction unescapeCSS(str) {\n  return str.replace(reEscape, funescape);\n}\n\nfunction isQuote(c) {\n  return c === 39\n  /* SingleQuote */\n  || c === 34\n  /* DoubleQuote */\n  ;\n}\n\nfunction isWhitespace(c) {\n  return c === 32\n  /* Space */\n  || c === 9\n  /* Tab */\n  || c === 10\n  /* NewLine */\n  || c === 12\n  /* FormFeed */\n  || c === 13\n  /* CarriageReturn */\n  ;\n}\n/**\n * Parses `selector`, optionally with the passed `options`.\n *\n * @param selector Selector to parse.\n * @param options Options for parsing.\n * @returns Returns a two-dimensional array.\n * The first dimension represents selectors separated by commas (eg. `sub1, sub2`),\n * the second contains the relevant tokens for that selector.\n */\n\n\nexport function parse(selector) {\n  var subselects = [];\n  var endIndex = parseSelector(subselects, \"\".concat(selector), 0);\n\n  if (endIndex < selector.length) {\n    throw new Error(\"Unmatched selector: \".concat(selector.slice(endIndex)));\n  }\n\n  return subselects;\n}\n\nfunction parseSelector(subselects, selector, selectorIndex) {\n  var tokens = [];\n\n  function getName(offset) {\n    var match = selector.slice(selectorIndex + offset).match(reName);\n\n    if (!match) {\n      throw new Error(\"Expected name, found \".concat(selector.slice(selectorIndex)));\n    }\n\n    var _match = _slicedToArray(match, 1),\n        name = _match[0];\n\n    selectorIndex += offset + name.length;\n    return unescapeCSS(name);\n  }\n\n  function stripWhitespace(offset) {\n    selectorIndex += offset;\n\n    while (selectorIndex < selector.length && isWhitespace(selector.charCodeAt(selectorIndex))) {\n      selectorIndex++;\n    }\n  }\n\n  function readValueWithParenthesis() {\n    selectorIndex += 1;\n    var start = selectorIndex;\n    var counter = 1;\n\n    for (; counter > 0 && selectorIndex < selector.length; selectorIndex++) {\n      if (selector.charCodeAt(selectorIndex) === 40\n      /* LeftParenthesis */\n      && !isEscaped(selectorIndex)) {\n        counter++;\n      } else if (selector.charCodeAt(selectorIndex) === 41\n      /* RightParenthesis */\n      && !isEscaped(selectorIndex)) {\n        counter--;\n      }\n    }\n\n    if (counter) {\n      throw new Error(\"Parenthesis not matched\");\n    }\n\n    return unescapeCSS(selector.slice(start, selectorIndex - 1));\n  }\n\n  function isEscaped(pos) {\n    var slashCount = 0;\n\n    while (selector.charCodeAt(--pos) === 92\n    /* BackSlash */\n    ) {\n      slashCount++;\n    }\n\n    return (slashCount & 1) === 1;\n  }\n\n  function ensureNotTraversal() {\n    if (tokens.length > 0 && isTraversal(tokens[tokens.length - 1])) {\n      throw new Error(\"Did not expect successive traversals.\");\n    }\n  }\n\n  function addTraversal(type) {\n    if (tokens.length > 0 && tokens[tokens.length - 1].type === SelectorType.Descendant) {\n      tokens[tokens.length - 1].type = type;\n      return;\n    }\n\n    ensureNotTraversal();\n    tokens.push({\n      type: type\n    });\n  }\n\n  function addSpecialAttribute(name, action) {\n    tokens.push({\n      type: SelectorType.Attribute,\n      name: name,\n      action: action,\n      value: getName(1),\n      namespace: null,\n      ignoreCase: \"quirks\"\n    });\n  }\n  /**\n   * We have finished parsing the current part of the selector.\n   *\n   * Remove descendant tokens at the end if they exist,\n   * and return the last index, so that parsing can be\n   * picked up from here.\n   */\n\n\n  function finalizeSubselector() {\n    if (tokens.length && tokens[tokens.length - 1].type === SelectorType.Descendant) {\n      tokens.pop();\n    }\n\n    if (tokens.length === 0) {\n      throw new Error(\"Empty sub-selector\");\n    }\n\n    subselects.push(tokens);\n  }\n\n  stripWhitespace(0);\n\n  if (selector.length === selectorIndex) {\n    return selectorIndex;\n  }\n\n  loop: while (selectorIndex < selector.length) {\n    var firstChar = selector.charCodeAt(selectorIndex);\n\n    switch (firstChar) {\n      // Whitespace\n      case 32\n      /* Space */\n      :\n      case 9\n      /* Tab */\n      :\n      case 10\n      /* NewLine */\n      :\n      case 12\n      /* FormFeed */\n      :\n      case 13\n      /* CarriageReturn */\n      :\n        {\n          if (tokens.length === 0 || tokens[0].type !== SelectorType.Descendant) {\n            ensureNotTraversal();\n            tokens.push({\n              type: SelectorType.Descendant\n            });\n          }\n\n          stripWhitespace(1);\n          break;\n        }\n      // Traversals\n\n      case 62\n      /* GreaterThan */\n      :\n        {\n          addTraversal(SelectorType.Child);\n          stripWhitespace(1);\n          break;\n        }\n\n      case 60\n      /* LessThan */\n      :\n        {\n          addTraversal(SelectorType.Parent);\n          stripWhitespace(1);\n          break;\n        }\n\n      case 126\n      /* Tilde */\n      :\n        {\n          addTraversal(SelectorType.Sibling);\n          stripWhitespace(1);\n          break;\n        }\n\n      case 43\n      /* Plus */\n      :\n        {\n          addTraversal(SelectorType.Adjacent);\n          stripWhitespace(1);\n          break;\n        }\n      // Special attribute selectors: .class, #id\n\n      case 46\n      /* Period */\n      :\n        {\n          addSpecialAttribute(\"class\", AttributeAction.Element);\n          break;\n        }\n\n      case 35\n      /* Hash */\n      :\n        {\n          addSpecialAttribute(\"id\", AttributeAction.Equals);\n          break;\n        }\n\n      case 91\n      /* LeftSquareBracket */\n      :\n        {\n          stripWhitespace(1); // Determine attribute name and namespace\n\n          var name = void 0;\n          var namespace = null;\n\n          if (selector.charCodeAt(selectorIndex) === 124\n          /* Pipe */\n          ) {\n            // Equivalent to no namespace\n            name = getName(1);\n          } else if (selector.startsWith(\"*|\", selectorIndex)) {\n            namespace = \"*\";\n            name = getName(2);\n          } else {\n            name = getName(0);\n\n            if (selector.charCodeAt(selectorIndex) === 124\n            /* Pipe */\n            && selector.charCodeAt(selectorIndex + 1) !== 61\n            /* Equal */\n            ) {\n              namespace = name;\n              name = getName(1);\n            }\n          }\n\n          stripWhitespace(0); // Determine comparison operation\n\n          var action = AttributeAction.Exists;\n          var possibleAction = actionTypes.get(selector.charCodeAt(selectorIndex));\n\n          if (possibleAction) {\n            action = possibleAction;\n\n            if (selector.charCodeAt(selectorIndex + 1) !== 61\n            /* Equal */\n            ) {\n              throw new Error(\"Expected `=`\");\n            }\n\n            stripWhitespace(2);\n          } else if (selector.charCodeAt(selectorIndex) === 61\n          /* Equal */\n          ) {\n            action = AttributeAction.Equals;\n            stripWhitespace(1);\n          } // Determine value\n\n\n          var value = \"\";\n          var ignoreCase = null;\n\n          if (action !== \"exists\") {\n            if (isQuote(selector.charCodeAt(selectorIndex))) {\n              var quote = selector.charCodeAt(selectorIndex);\n              var sectionEnd = selectorIndex + 1;\n\n              while (sectionEnd < selector.length && (selector.charCodeAt(sectionEnd) !== quote || isEscaped(sectionEnd))) {\n                sectionEnd += 1;\n              }\n\n              if (selector.charCodeAt(sectionEnd) !== quote) {\n                throw new Error(\"Attribute value didn't end\");\n              }\n\n              value = unescapeCSS(selector.slice(selectorIndex + 1, sectionEnd));\n              selectorIndex = sectionEnd + 1;\n            } else {\n              var valueStart = selectorIndex;\n\n              while (selectorIndex < selector.length && (!isWhitespace(selector.charCodeAt(selectorIndex)) && selector.charCodeAt(selectorIndex) !== 93\n              /* RightSquareBracket */\n              || isEscaped(selectorIndex))) {\n                selectorIndex += 1;\n              }\n\n              value = unescapeCSS(selector.slice(valueStart, selectorIndex));\n            }\n\n            stripWhitespace(0); // See if we have a force ignore flag\n\n            var forceIgnore = selector.charCodeAt(selectorIndex) | 0x20; // If the forceIgnore flag is set (either `i` or `s`), use that value\n\n            if (forceIgnore === 115\n            /* LowerS */\n            ) {\n              ignoreCase = false;\n              stripWhitespace(1);\n            } else if (forceIgnore === 105\n            /* LowerI */\n            ) {\n              ignoreCase = true;\n              stripWhitespace(1);\n            }\n          }\n\n          if (selector.charCodeAt(selectorIndex) !== 93\n          /* RightSquareBracket */\n          ) {\n            throw new Error(\"Attribute selector didn't terminate\");\n          }\n\n          selectorIndex += 1;\n          var attributeSelector = {\n            type: SelectorType.Attribute,\n            name: name,\n            action: action,\n            value: value,\n            namespace: namespace,\n            ignoreCase: ignoreCase\n          };\n          tokens.push(attributeSelector);\n          break;\n        }\n\n      case 58\n      /* Colon */\n      :\n        {\n          if (selector.charCodeAt(selectorIndex + 1) === 58\n          /* Colon */\n          ) {\n            tokens.push({\n              type: SelectorType.PseudoElement,\n              name: getName(2).toLowerCase(),\n              data: selector.charCodeAt(selectorIndex) === 40\n              /* LeftParenthesis */\n              ? readValueWithParenthesis() : null\n            });\n            continue;\n          }\n\n          var _name = getName(1).toLowerCase();\n\n          var data = null;\n\n          if (selector.charCodeAt(selectorIndex) === 40\n          /* LeftParenthesis */\n          ) {\n            if (unpackPseudos.has(_name)) {\n              if (isQuote(selector.charCodeAt(selectorIndex + 1))) {\n                throw new Error(\"Pseudo-selector \".concat(_name, \" cannot be quoted\"));\n              }\n\n              data = [];\n              selectorIndex = parseSelector(data, selector, selectorIndex + 1);\n\n              if (selector.charCodeAt(selectorIndex) !== 41\n              /* RightParenthesis */\n              ) {\n                throw new Error(\"Missing closing parenthesis in :\".concat(_name, \" (\").concat(selector, \")\"));\n              }\n\n              selectorIndex += 1;\n            } else {\n              data = readValueWithParenthesis();\n\n              if (stripQuotesFromPseudos.has(_name)) {\n                var quot = data.charCodeAt(0);\n\n                if (quot === data.charCodeAt(data.length - 1) && isQuote(quot)) {\n                  data = data.slice(1, -1);\n                }\n              }\n\n              data = unescapeCSS(data);\n            }\n          }\n\n          tokens.push({\n            type: SelectorType.Pseudo,\n            name: _name,\n            data: data\n          });\n          break;\n        }\n\n      case 44\n      /* Comma */\n      :\n        {\n          finalizeSubselector();\n          tokens = [];\n          stripWhitespace(1);\n          break;\n        }\n\n      default:\n        {\n          if (selector.startsWith(\"/*\", selectorIndex)) {\n            var endIndex = selector.indexOf(\"*/\", selectorIndex + 2);\n\n            if (endIndex < 0) {\n              throw new Error(\"Comment was not terminated\");\n            }\n\n            selectorIndex = endIndex + 2; // Remove leading whitespace\n\n            if (tokens.length === 0) {\n              stripWhitespace(0);\n            }\n\n            break;\n          }\n\n          var _namespace = null;\n\n          var _name2 = void 0;\n\n          if (firstChar === 42\n          /* Asterisk */\n          ) {\n            selectorIndex += 1;\n            _name2 = \"*\";\n          } else if (firstChar === 124\n          /* Pipe */\n          ) {\n            _name2 = \"\";\n\n            if (selector.charCodeAt(selectorIndex + 1) === 124\n            /* Pipe */\n            ) {\n              addTraversal(SelectorType.ColumnCombinator);\n              stripWhitespace(2);\n              break;\n            }\n          } else if (reName.test(selector.slice(selectorIndex))) {\n            _name2 = getName(0);\n          } else {\n            break loop;\n          }\n\n          if (selector.charCodeAt(selectorIndex) === 124\n          /* Pipe */\n          && selector.charCodeAt(selectorIndex + 1) !== 124\n          /* Pipe */\n          ) {\n            _namespace = _name2;\n\n            if (selector.charCodeAt(selectorIndex + 1) === 42\n            /* Asterisk */\n            ) {\n              _name2 = \"*\";\n              selectorIndex += 2;\n            } else {\n              _name2 = getName(1);\n            }\n          }\n\n          tokens.push(_name2 === \"*\" ? {\n            type: SelectorType.Universal,\n            namespace: _namespace\n          } : {\n            type: SelectorType.Tag,\n            name: _name2,\n            namespace: _namespace\n          });\n        }\n    }\n  }\n\n  finalizeSubselector();\n  return selectorIndex;\n}","map":{"version":3,"sources":["/home/thomas/Code/BingoFerrand/node_modules/css-what/lib/es/parse.js"],"names":["SelectorType","AttributeAction","reName","reEscape","actionTypes","Map","Element","Start","End","Any","Not","Hyphen","unpackPseudos","Set","isTraversal","selector","type","Adjacent","Child","Descendant","Parent","Sibling","ColumnCombinator","stripQuotesFromPseudos","funescape","_","escaped","escapedWhitespace","high","parseInt","String","fromCharCode","unescapeCSS","str","replace","isQuote","c","isWhitespace","parse","subselects","endIndex","parseSelector","length","Error","slice","selectorIndex","tokens","getName","offset","match","name","stripWhitespace","charCodeAt","readValueWithParenthesis","start","counter","isEscaped","pos","slashCount","ensureNotTraversal","addTraversal","push","addSpecialAttribute","action","Attribute","value","namespace","ignoreCase","finalizeSubselector","pop","loop","firstChar","Equals","startsWith","Exists","possibleAction","get","quote","sectionEnd","valueStart","forceIgnore","attributeSelector","PseudoElement","toLowerCase","data","has","quot","Pseudo","indexOf","test","Universal","Tag"],"mappings":"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","sourcesContent":["import { SelectorType, AttributeAction, } from \"./types\";\nconst reName = /^[^\\\\#]?(?:\\\\(?:[\\da-f]{1,6}\\s?|.)|[\\w\\-\\u00b0-\\uFFFF])+/;\nconst reEscape = /\\\\([\\da-f]{1,6}\\s?|(\\s)|.)/gi;\nconst actionTypes = new Map([\n    [126 /* Tilde */, AttributeAction.Element],\n    [94 /* Circumflex */, AttributeAction.Start],\n    [36 /* Dollar */, AttributeAction.End],\n    [42 /* Asterisk */, AttributeAction.Any],\n    [33 /* ExclamationMark */, AttributeAction.Not],\n    [124 /* Pipe */, AttributeAction.Hyphen],\n]);\n// Pseudos, whose data property is parsed as well.\nconst unpackPseudos = new Set([\n    \"has\",\n    \"not\",\n    \"matches\",\n    \"is\",\n    \"where\",\n    \"host\",\n    \"host-context\",\n]);\n/**\n * Checks whether a specific selector is a traversal.\n * This is useful eg. in swapping the order of elements that\n * are not traversals.\n *\n * @param selector Selector to check.\n */\nexport function isTraversal(selector) {\n    switch (selector.type) {\n        case SelectorType.Adjacent:\n        case SelectorType.Child:\n        case SelectorType.Descendant:\n        case SelectorType.Parent:\n        case SelectorType.Sibling:\n        case SelectorType.ColumnCombinator:\n            return true;\n        default:\n            return false;\n    }\n}\nconst stripQuotesFromPseudos = new Set([\"contains\", \"icontains\"]);\n// Unescape function taken from https://github.com/jquery/sizzle/blob/master/src/sizzle.js#L152\nfunction funescape(_, escaped, escapedWhitespace) {\n    const high = parseInt(escaped, 16) - 0x10000;\n    // NaN means non-codepoint\n    return high !== high || escapedWhitespace\n        ? escaped\n        : high < 0\n            ? // BMP codepoint\n                String.fromCharCode(high + 0x10000)\n            : // Supplemental Plane codepoint (surrogate pair)\n                String.fromCharCode((high >> 10) | 0xd800, (high & 0x3ff) | 0xdc00);\n}\nfunction unescapeCSS(str) {\n    return str.replace(reEscape, funescape);\n}\nfunction isQuote(c) {\n    return c === 39 /* SingleQuote */ || c === 34 /* DoubleQuote */;\n}\nfunction isWhitespace(c) {\n    return (c === 32 /* Space */ ||\n        c === 9 /* Tab */ ||\n        c === 10 /* NewLine */ ||\n        c === 12 /* FormFeed */ ||\n        c === 13 /* CarriageReturn */);\n}\n/**\n * Parses `selector`, optionally with the passed `options`.\n *\n * @param selector Selector to parse.\n * @param options Options for parsing.\n * @returns Returns a two-dimensional array.\n * The first dimension represents selectors separated by commas (eg. `sub1, sub2`),\n * the second contains the relevant tokens for that selector.\n */\nexport function parse(selector) {\n    const subselects = [];\n    const endIndex = parseSelector(subselects, `${selector}`, 0);\n    if (endIndex < selector.length) {\n        throw new Error(`Unmatched selector: ${selector.slice(endIndex)}`);\n    }\n    return subselects;\n}\nfunction parseSelector(subselects, selector, selectorIndex) {\n    let tokens = [];\n    function getName(offset) {\n        const match = selector.slice(selectorIndex + offset).match(reName);\n        if (!match) {\n            throw new Error(`Expected name, found ${selector.slice(selectorIndex)}`);\n        }\n        const [name] = match;\n        selectorIndex += offset + name.length;\n        return unescapeCSS(name);\n    }\n    function stripWhitespace(offset) {\n        selectorIndex += offset;\n        while (selectorIndex < selector.length &&\n            isWhitespace(selector.charCodeAt(selectorIndex))) {\n            selectorIndex++;\n        }\n    }\n    function readValueWithParenthesis() {\n        selectorIndex += 1;\n        const start = selectorIndex;\n        let counter = 1;\n        for (; counter > 0 && selectorIndex < selector.length; selectorIndex++) {\n            if (selector.charCodeAt(selectorIndex) ===\n                40 /* LeftParenthesis */ &&\n                !isEscaped(selectorIndex)) {\n                counter++;\n            }\n            else if (selector.charCodeAt(selectorIndex) ===\n                41 /* RightParenthesis */ &&\n                !isEscaped(selectorIndex)) {\n                counter--;\n            }\n        }\n        if (counter) {\n            throw new Error(\"Parenthesis not matched\");\n        }\n        return unescapeCSS(selector.slice(start, selectorIndex - 1));\n    }\n    function isEscaped(pos) {\n        let slashCount = 0;\n        while (selector.charCodeAt(--pos) === 92 /* BackSlash */)\n            slashCount++;\n        return (slashCount & 1) === 1;\n    }\n    function ensureNotTraversal() {\n        if (tokens.length > 0 && isTraversal(tokens[tokens.length - 1])) {\n            throw new Error(\"Did not expect successive traversals.\");\n        }\n    }\n    function addTraversal(type) {\n        if (tokens.length > 0 &&\n            tokens[tokens.length - 1].type === SelectorType.Descendant) {\n            tokens[tokens.length - 1].type = type;\n            return;\n        }\n        ensureNotTraversal();\n        tokens.push({ type });\n    }\n    function addSpecialAttribute(name, action) {\n        tokens.push({\n            type: SelectorType.Attribute,\n            name,\n            action,\n            value: getName(1),\n            namespace: null,\n            ignoreCase: \"quirks\",\n        });\n    }\n    /**\n     * We have finished parsing the current part of the selector.\n     *\n     * Remove descendant tokens at the end if they exist,\n     * and return the last index, so that parsing can be\n     * picked up from here.\n     */\n    function finalizeSubselector() {\n        if (tokens.length &&\n            tokens[tokens.length - 1].type === SelectorType.Descendant) {\n            tokens.pop();\n        }\n        if (tokens.length === 0) {\n            throw new Error(\"Empty sub-selector\");\n        }\n        subselects.push(tokens);\n    }\n    stripWhitespace(0);\n    if (selector.length === selectorIndex) {\n        return selectorIndex;\n    }\n    loop: while (selectorIndex < selector.length) {\n        const firstChar = selector.charCodeAt(selectorIndex);\n        switch (firstChar) {\n            // Whitespace\n            case 32 /* Space */:\n            case 9 /* Tab */:\n            case 10 /* NewLine */:\n            case 12 /* FormFeed */:\n            case 13 /* CarriageReturn */: {\n                if (tokens.length === 0 ||\n                    tokens[0].type !== SelectorType.Descendant) {\n                    ensureNotTraversal();\n                    tokens.push({ type: SelectorType.Descendant });\n                }\n                stripWhitespace(1);\n                break;\n            }\n            // Traversals\n            case 62 /* GreaterThan */: {\n                addTraversal(SelectorType.Child);\n                stripWhitespace(1);\n                break;\n            }\n            case 60 /* LessThan */: {\n                addTraversal(SelectorType.Parent);\n                stripWhitespace(1);\n                break;\n            }\n            case 126 /* Tilde */: {\n                addTraversal(SelectorType.Sibling);\n                stripWhitespace(1);\n                break;\n            }\n            case 43 /* Plus */: {\n                addTraversal(SelectorType.Adjacent);\n                stripWhitespace(1);\n                break;\n            }\n            // Special attribute selectors: .class, #id\n            case 46 /* Period */: {\n                addSpecialAttribute(\"class\", AttributeAction.Element);\n                break;\n            }\n            case 35 /* Hash */: {\n                addSpecialAttribute(\"id\", AttributeAction.Equals);\n                break;\n            }\n            case 91 /* LeftSquareBracket */: {\n                stripWhitespace(1);\n                // Determine attribute name and namespace\n                let name;\n                let namespace = null;\n                if (selector.charCodeAt(selectorIndex) === 124 /* Pipe */) {\n                    // Equivalent to no namespace\n                    name = getName(1);\n                }\n                else if (selector.startsWith(\"*|\", selectorIndex)) {\n                    namespace = \"*\";\n                    name = getName(2);\n                }\n                else {\n                    name = getName(0);\n                    if (selector.charCodeAt(selectorIndex) === 124 /* Pipe */ &&\n                        selector.charCodeAt(selectorIndex + 1) !==\n                            61 /* Equal */) {\n                        namespace = name;\n                        name = getName(1);\n                    }\n                }\n                stripWhitespace(0);\n                // Determine comparison operation\n                let action = AttributeAction.Exists;\n                const possibleAction = actionTypes.get(selector.charCodeAt(selectorIndex));\n                if (possibleAction) {\n                    action = possibleAction;\n                    if (selector.charCodeAt(selectorIndex + 1) !==\n                        61 /* Equal */) {\n                        throw new Error(\"Expected `=`\");\n                    }\n                    stripWhitespace(2);\n                }\n                else if (selector.charCodeAt(selectorIndex) === 61 /* Equal */) {\n                    action = AttributeAction.Equals;\n                    stripWhitespace(1);\n                }\n                // Determine value\n                let value = \"\";\n                let ignoreCase = null;\n                if (action !== \"exists\") {\n                    if (isQuote(selector.charCodeAt(selectorIndex))) {\n                        const quote = selector.charCodeAt(selectorIndex);\n                        let sectionEnd = selectorIndex + 1;\n                        while (sectionEnd < selector.length &&\n                            (selector.charCodeAt(sectionEnd) !== quote ||\n                                isEscaped(sectionEnd))) {\n                            sectionEnd += 1;\n                        }\n                        if (selector.charCodeAt(sectionEnd) !== quote) {\n                            throw new Error(\"Attribute value didn't end\");\n                        }\n                        value = unescapeCSS(selector.slice(selectorIndex + 1, sectionEnd));\n                        selectorIndex = sectionEnd + 1;\n                    }\n                    else {\n                        const valueStart = selectorIndex;\n                        while (selectorIndex < selector.length &&\n                            ((!isWhitespace(selector.charCodeAt(selectorIndex)) &&\n                                selector.charCodeAt(selectorIndex) !==\n                                    93 /* RightSquareBracket */) ||\n                                isEscaped(selectorIndex))) {\n                            selectorIndex += 1;\n                        }\n                        value = unescapeCSS(selector.slice(valueStart, selectorIndex));\n                    }\n                    stripWhitespace(0);\n                    // See if we have a force ignore flag\n                    const forceIgnore = selector.charCodeAt(selectorIndex) | 0x20;\n                    // If the forceIgnore flag is set (either `i` or `s`), use that value\n                    if (forceIgnore === 115 /* LowerS */) {\n                        ignoreCase = false;\n                        stripWhitespace(1);\n                    }\n                    else if (forceIgnore === 105 /* LowerI */) {\n                        ignoreCase = true;\n                        stripWhitespace(1);\n                    }\n                }\n                if (selector.charCodeAt(selectorIndex) !==\n                    93 /* RightSquareBracket */) {\n                    throw new Error(\"Attribute selector didn't terminate\");\n                }\n                selectorIndex += 1;\n                const attributeSelector = {\n                    type: SelectorType.Attribute,\n                    name,\n                    action,\n                    value,\n                    namespace,\n                    ignoreCase,\n                };\n                tokens.push(attributeSelector);\n                break;\n            }\n            case 58 /* Colon */: {\n                if (selector.charCodeAt(selectorIndex + 1) === 58 /* Colon */) {\n                    tokens.push({\n                        type: SelectorType.PseudoElement,\n                        name: getName(2).toLowerCase(),\n                        data: selector.charCodeAt(selectorIndex) ===\n                            40 /* LeftParenthesis */\n                            ? readValueWithParenthesis()\n                            : null,\n                    });\n                    continue;\n                }\n                const name = getName(1).toLowerCase();\n                let data = null;\n                if (selector.charCodeAt(selectorIndex) ===\n                    40 /* LeftParenthesis */) {\n                    if (unpackPseudos.has(name)) {\n                        if (isQuote(selector.charCodeAt(selectorIndex + 1))) {\n                            throw new Error(`Pseudo-selector ${name} cannot be quoted`);\n                        }\n                        data = [];\n                        selectorIndex = parseSelector(data, selector, selectorIndex + 1);\n                        if (selector.charCodeAt(selectorIndex) !==\n                            41 /* RightParenthesis */) {\n                            throw new Error(`Missing closing parenthesis in :${name} (${selector})`);\n                        }\n                        selectorIndex += 1;\n                    }\n                    else {\n                        data = readValueWithParenthesis();\n                        if (stripQuotesFromPseudos.has(name)) {\n                            const quot = data.charCodeAt(0);\n                            if (quot === data.charCodeAt(data.length - 1) &&\n                                isQuote(quot)) {\n                                data = data.slice(1, -1);\n                            }\n                        }\n                        data = unescapeCSS(data);\n                    }\n                }\n                tokens.push({ type: SelectorType.Pseudo, name, data });\n                break;\n            }\n            case 44 /* Comma */: {\n                finalizeSubselector();\n                tokens = [];\n                stripWhitespace(1);\n                break;\n            }\n            default: {\n                if (selector.startsWith(\"/*\", selectorIndex)) {\n                    const endIndex = selector.indexOf(\"*/\", selectorIndex + 2);\n                    if (endIndex < 0) {\n                        throw new Error(\"Comment was not terminated\");\n                    }\n                    selectorIndex = endIndex + 2;\n                    // Remove leading whitespace\n                    if (tokens.length === 0) {\n                        stripWhitespace(0);\n                    }\n                    break;\n                }\n                let namespace = null;\n                let name;\n                if (firstChar === 42 /* Asterisk */) {\n                    selectorIndex += 1;\n                    name = \"*\";\n                }\n                else if (firstChar === 124 /* Pipe */) {\n                    name = \"\";\n                    if (selector.charCodeAt(selectorIndex + 1) === 124 /* Pipe */) {\n                        addTraversal(SelectorType.ColumnCombinator);\n                        stripWhitespace(2);\n                        break;\n                    }\n                }\n                else if (reName.test(selector.slice(selectorIndex))) {\n                    name = getName(0);\n                }\n                else {\n                    break loop;\n                }\n                if (selector.charCodeAt(selectorIndex) === 124 /* Pipe */ &&\n                    selector.charCodeAt(selectorIndex + 1) !== 124 /* Pipe */) {\n                    namespace = name;\n                    if (selector.charCodeAt(selectorIndex + 1) ===\n                        42 /* Asterisk */) {\n                        name = \"*\";\n                        selectorIndex += 2;\n                    }\n                    else {\n                        name = getName(1);\n                    }\n                }\n                tokens.push(name === \"*\"\n                    ? { type: SelectorType.Universal, namespace }\n                    : { type: SelectorType.Tag, name, namespace });\n            }\n        }\n    }\n    finalizeSubselector();\n    return selectorIndex;\n}\n"]},"metadata":{},"sourceType":"module"}