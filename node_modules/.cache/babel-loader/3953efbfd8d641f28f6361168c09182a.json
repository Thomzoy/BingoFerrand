{"ast":null,"code":"\"use strict\";\n\nrequire(\"core-js/modules/es.object.define-property.js\");\n\nrequire(\"core-js/modules/es.array.map.js\");\n\nrequire(\"core-js/modules/es.function.name.js\");\n\nrequire(\"core-js/modules/es.regexp.exec.js\");\n\nrequire(\"core-js/modules/es.string.replace.js\");\n\nrequire(\"core-js/modules/es.array.join.js\");\n\nrequire(\"core-js/modules/es.object.to-string.js\");\n\nrequire(\"core-js/modules/es.array.filter.js\");\n\nrequire(\"core-js/modules/es.array.find.js\");\n\nrequire(\"core-js/modules/es.array.is-array.js\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.serializeArray = exports.serialize = void 0;\n\nvar utils_1 = require(\"../utils\");\n/*\n * https://github.com/jquery/jquery/blob/2.1.3/src/manipulation/var/rcheckableType.js\n * https://github.com/jquery/jquery/blob/2.1.3/src/serialize.js\n */\n\n\nvar submittableSelector = 'input,select,textarea,keygen';\nvar r20 = /%20/g;\nvar rCRLF = /\\r?\\n/g;\n/**\n * Encode a set of form elements as a string for submission.\n *\n * @category Forms\n * @returns The serialized form.\n * @see {@link https://api.jquery.com/serialize/}\n */\n\nfunction serialize() {\n  // Convert form elements into name/value objects\n  var arr = this.serializeArray(); // Serialize each element into a key/value string\n\n  var retArr = arr.map(function (data) {\n    return encodeURIComponent(data.name) + \"=\" + encodeURIComponent(data.value);\n  }); // Return the resulting serialization\n\n  return retArr.join('&').replace(r20, '+');\n}\n\nexports.serialize = serialize;\n/**\n * Encode a set of form elements as an array of names and values.\n *\n * @category Forms\n * @example\n *\n * ```js\n * $('<form><input name=\"foo\" value=\"bar\" /></form>').serializeArray();\n * //=> [ { name: 'foo', value: 'bar' } ]\n * ```\n *\n * @returns The serialized form.\n * @see {@link https://api.jquery.com/serializeArray/}\n */\n\nfunction serializeArray() {\n  var _this = this; // Resolve all form elements from either forms or collections of form elements\n\n\n  return this.map(function (_, elem) {\n    var $elem = _this._make(elem);\n\n    if (utils_1.isTag(elem) && elem.name === 'form') {\n      return $elem.find(submittableSelector).toArray();\n    }\n\n    return $elem.filter(submittableSelector).toArray();\n  }).filter( // Verify elements have a name (`attr.name`) and are not disabled (`:enabled`)\n  '[name!=\"\"]:enabled' + // And cannot be clicked (`[type=submit]`) or are used in `x-www-form-urlencoded` (`[type=file]`)\n  ':not(:submit, :button, :image, :reset, :file)' + // And are either checked/don't have a checkable state\n  ':matches([checked], :not(:checkbox, :radio))' // Convert each of the elements to its value(s)\n  ).map(function (_, elem) {\n    var _a;\n\n    var $elem = _this._make(elem);\n\n    var name = $elem.attr('name'); // We have filtered for elements with a name before.\n    // If there is no value set (e.g. `undefined`, `null`), then default value to empty\n\n    var value = (_a = $elem.val()) !== null && _a !== void 0 ? _a : ''; // If we have an array of values (e.g. `<select multiple>`), return an array of key/value pairs\n\n    if (Array.isArray(value)) {\n      return value.map(function (val) {\n        /*\n         * We trim replace any line endings (e.g. `\\r` or `\\r\\n` with `\\r\\n`) to guarantee consistency across platforms\n         * These can occur inside of `<textarea>'s`\n         */\n        return {\n          name: name,\n          value: val.replace(rCRLF, '\\r\\n')\n        };\n      });\n    } // Otherwise (e.g. `<input type=\"text\">`, return only one key/value pair\n\n\n    return {\n      name: name,\n      value: value.replace(rCRLF, '\\r\\n')\n    };\n  }).toArray();\n}\n\nexports.serializeArray = serializeArray;","map":{"version":3,"sources":["/home/thomas/Code/BingoFerrand/node_modules/cheerio/lib/api/forms.js"],"names":["Object","defineProperty","exports","value","serializeArray","serialize","utils_1","require","submittableSelector","r20","rCRLF","arr","retArr","map","data","encodeURIComponent","name","join","replace","_this","_","elem","$elem","_make","isTag","find","toArray","filter","_a","attr","val","Array","isArray"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.serializeArray = exports.serialize = void 0;\nvar utils_1 = require(\"../utils\");\n/*\n * https://github.com/jquery/jquery/blob/2.1.3/src/manipulation/var/rcheckableType.js\n * https://github.com/jquery/jquery/blob/2.1.3/src/serialize.js\n */\nvar submittableSelector = 'input,select,textarea,keygen';\nvar r20 = /%20/g;\nvar rCRLF = /\\r?\\n/g;\n/**\n * Encode a set of form elements as a string for submission.\n *\n * @category Forms\n * @returns The serialized form.\n * @see {@link https://api.jquery.com/serialize/}\n */\nfunction serialize() {\n    // Convert form elements into name/value objects\n    var arr = this.serializeArray();\n    // Serialize each element into a key/value string\n    var retArr = arr.map(function (data) {\n        return encodeURIComponent(data.name) + \"=\" + encodeURIComponent(data.value);\n    });\n    // Return the resulting serialization\n    return retArr.join('&').replace(r20, '+');\n}\nexports.serialize = serialize;\n/**\n * Encode a set of form elements as an array of names and values.\n *\n * @category Forms\n * @example\n *\n * ```js\n * $('<form><input name=\"foo\" value=\"bar\" /></form>').serializeArray();\n * //=> [ { name: 'foo', value: 'bar' } ]\n * ```\n *\n * @returns The serialized form.\n * @see {@link https://api.jquery.com/serializeArray/}\n */\nfunction serializeArray() {\n    var _this = this;\n    // Resolve all form elements from either forms or collections of form elements\n    return this.map(function (_, elem) {\n        var $elem = _this._make(elem);\n        if (utils_1.isTag(elem) && elem.name === 'form') {\n            return $elem.find(submittableSelector).toArray();\n        }\n        return $elem.filter(submittableSelector).toArray();\n    })\n        .filter(\n    // Verify elements have a name (`attr.name`) and are not disabled (`:enabled`)\n    '[name!=\"\"]:enabled' +\n        // And cannot be clicked (`[type=submit]`) or are used in `x-www-form-urlencoded` (`[type=file]`)\n        ':not(:submit, :button, :image, :reset, :file)' +\n        // And are either checked/don't have a checkable state\n        ':matches([checked], :not(:checkbox, :radio))'\n    // Convert each of the elements to its value(s)\n    )\n        .map(function (_, elem) {\n        var _a;\n        var $elem = _this._make(elem);\n        var name = $elem.attr('name'); // We have filtered for elements with a name before.\n        // If there is no value set (e.g. `undefined`, `null`), then default value to empty\n        var value = (_a = $elem.val()) !== null && _a !== void 0 ? _a : '';\n        // If we have an array of values (e.g. `<select multiple>`), return an array of key/value pairs\n        if (Array.isArray(value)) {\n            return value.map(function (val) {\n                /*\n                 * We trim replace any line endings (e.g. `\\r` or `\\r\\n` with `\\r\\n`) to guarantee consistency across platforms\n                 * These can occur inside of `<textarea>'s`\n                 */\n                return ({ name: name, value: val.replace(rCRLF, '\\r\\n') });\n            });\n        }\n        // Otherwise (e.g. `<input type=\"text\">`, return only one key/value pair\n        return { name: name, value: value.replace(rCRLF, '\\r\\n') };\n    })\n        .toArray();\n}\nexports.serializeArray = serializeArray;\n"]},"metadata":{},"sourceType":"script"}