{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/home/thomas/Code/BingoFerrand/node_modules/@babel/runtime/helpers/classCallCheck.js\")[\"default\"];\n\nvar _createClass = require(\"/home/thomas/Code/BingoFerrand/node_modules/@babel/runtime/helpers/createClass.js\")[\"default\"];\n\nrequire(\"core-js/modules/es.function.name.js\");\n\nrequire(\"core-js/modules/es.regexp.exec.js\");\n\nrequire(\"core-js/modules/es.string.replace.js\");\n\nvar defaultTreeAdapter = require('../tree-adapters/default');\n\nvar mergeOptions = require('../utils/merge-options');\n\nvar doctype = require('../common/doctype');\n\nvar HTML = require('../common/html'); //Aliases\n\n\nvar $ = HTML.TAG_NAMES;\nvar NS = HTML.NAMESPACES; //Default serializer options\n\nvar DEFAULT_OPTIONS = {\n  treeAdapter: defaultTreeAdapter\n}; //Escaping regexes\n\nvar AMP_REGEX = /&/g;\nvar NBSP_REGEX = /\\u00a0/g;\nvar DOUBLE_QUOTE_REGEX = /\"/g;\nvar LT_REGEX = /</g;\nvar GT_REGEX = />/g; //Serializer\n\nvar Serializer = /*#__PURE__*/function () {\n  function Serializer(node, options) {\n    _classCallCheck(this, Serializer);\n\n    this.options = mergeOptions(DEFAULT_OPTIONS, options);\n    this.treeAdapter = this.options.treeAdapter;\n    this.html = '';\n    this.startNode = node;\n  } //API\n\n\n  _createClass(Serializer, [{\n    key: \"serialize\",\n    value: function serialize() {\n      this._serializeChildNodes(this.startNode);\n\n      return this.html;\n    } //Internals\n\n  }, {\n    key: \"_serializeChildNodes\",\n    value: function _serializeChildNodes(parentNode) {\n      var childNodes = this.treeAdapter.getChildNodes(parentNode);\n\n      if (childNodes) {\n        for (var i = 0, cnLength = childNodes.length; i < cnLength; i++) {\n          var currentNode = childNodes[i];\n\n          if (this.treeAdapter.isElementNode(currentNode)) {\n            this._serializeElement(currentNode);\n          } else if (this.treeAdapter.isTextNode(currentNode)) {\n            this._serializeTextNode(currentNode);\n          } else if (this.treeAdapter.isCommentNode(currentNode)) {\n            this._serializeCommentNode(currentNode);\n          } else if (this.treeAdapter.isDocumentTypeNode(currentNode)) {\n            this._serializeDocumentTypeNode(currentNode);\n          }\n        }\n      }\n    }\n  }, {\n    key: \"_serializeElement\",\n    value: function _serializeElement(node) {\n      var tn = this.treeAdapter.getTagName(node);\n      var ns = this.treeAdapter.getNamespaceURI(node);\n      this.html += '<' + tn;\n\n      this._serializeAttributes(node);\n\n      this.html += '>';\n\n      if (tn !== $.AREA && tn !== $.BASE && tn !== $.BASEFONT && tn !== $.BGSOUND && tn !== $.BR && tn !== $.COL && tn !== $.EMBED && tn !== $.FRAME && tn !== $.HR && tn !== $.IMG && tn !== $.INPUT && tn !== $.KEYGEN && tn !== $.LINK && tn !== $.META && tn !== $.PARAM && tn !== $.SOURCE && tn !== $.TRACK && tn !== $.WBR) {\n        var childNodesHolder = tn === $.TEMPLATE && ns === NS.HTML ? this.treeAdapter.getTemplateContent(node) : node;\n\n        this._serializeChildNodes(childNodesHolder);\n\n        this.html += '</' + tn + '>';\n      }\n    }\n  }, {\n    key: \"_serializeAttributes\",\n    value: function _serializeAttributes(node) {\n      var attrs = this.treeAdapter.getAttrList(node);\n\n      for (var i = 0, attrsLength = attrs.length; i < attrsLength; i++) {\n        var attr = attrs[i];\n        var value = Serializer.escapeString(attr.value, true);\n        this.html += ' ';\n\n        if (!attr.namespace) {\n          this.html += attr.name;\n        } else if (attr.namespace === NS.XML) {\n          this.html += 'xml:' + attr.name;\n        } else if (attr.namespace === NS.XMLNS) {\n          if (attr.name !== 'xmlns') {\n            this.html += 'xmlns:';\n          }\n\n          this.html += attr.name;\n        } else if (attr.namespace === NS.XLINK) {\n          this.html += 'xlink:' + attr.name;\n        } else {\n          this.html += attr.prefix + ':' + attr.name;\n        }\n\n        this.html += '=\"' + value + '\"';\n      }\n    }\n  }, {\n    key: \"_serializeTextNode\",\n    value: function _serializeTextNode(node) {\n      var content = this.treeAdapter.getTextNodeContent(node);\n      var parent = this.treeAdapter.getParentNode(node);\n      var parentTn = void 0;\n\n      if (parent && this.treeAdapter.isElementNode(parent)) {\n        parentTn = this.treeAdapter.getTagName(parent);\n      }\n\n      if (parentTn === $.STYLE || parentTn === $.SCRIPT || parentTn === $.XMP || parentTn === $.IFRAME || parentTn === $.NOEMBED || parentTn === $.NOFRAMES || parentTn === $.PLAINTEXT || parentTn === $.NOSCRIPT) {\n        this.html += content;\n      } else {\n        this.html += Serializer.escapeString(content, false);\n      }\n    }\n  }, {\n    key: \"_serializeCommentNode\",\n    value: function _serializeCommentNode(node) {\n      this.html += '<!--' + this.treeAdapter.getCommentNodeContent(node) + '-->';\n    }\n  }, {\n    key: \"_serializeDocumentTypeNode\",\n    value: function _serializeDocumentTypeNode(node) {\n      var name = this.treeAdapter.getDocumentTypeNodeName(node);\n      this.html += '<' + doctype.serializeContent(name, null, null) + '>';\n    }\n  }]);\n\n  return Serializer;\n}(); // NOTE: used in tests and by rewriting stream\n\n\nSerializer.escapeString = function (str, attrMode) {\n  str = str.replace(AMP_REGEX, '&amp;').replace(NBSP_REGEX, '&nbsp;');\n\n  if (attrMode) {\n    str = str.replace(DOUBLE_QUOTE_REGEX, '&quot;');\n  } else {\n    str = str.replace(LT_REGEX, '&lt;').replace(GT_REGEX, '&gt;');\n  }\n\n  return str;\n};\n\nmodule.exports = Serializer;","map":{"version":3,"sources":["/home/thomas/Code/BingoFerrand/node_modules/cheerio/node_modules/parse5/lib/serializer/index.js"],"names":["defaultTreeAdapter","require","mergeOptions","doctype","HTML","$","TAG_NAMES","NS","NAMESPACES","DEFAULT_OPTIONS","treeAdapter","AMP_REGEX","NBSP_REGEX","DOUBLE_QUOTE_REGEX","LT_REGEX","GT_REGEX","Serializer","node","options","html","startNode","_serializeChildNodes","parentNode","childNodes","getChildNodes","i","cnLength","length","currentNode","isElementNode","_serializeElement","isTextNode","_serializeTextNode","isCommentNode","_serializeCommentNode","isDocumentTypeNode","_serializeDocumentTypeNode","tn","getTagName","ns","getNamespaceURI","_serializeAttributes","AREA","BASE","BASEFONT","BGSOUND","BR","COL","EMBED","FRAME","HR","IMG","INPUT","KEYGEN","LINK","META","PARAM","SOURCE","TRACK","WBR","childNodesHolder","TEMPLATE","getTemplateContent","attrs","getAttrList","attrsLength","attr","value","escapeString","namespace","name","XML","XMLNS","XLINK","prefix","content","getTextNodeContent","parent","getParentNode","parentTn","STYLE","SCRIPT","XMP","IFRAME","NOEMBED","NOFRAMES","PLAINTEXT","NOSCRIPT","getCommentNodeContent","getDocumentTypeNodeName","serializeContent","str","attrMode","replace","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nconst defaultTreeAdapter = require('../tree-adapters/default');\nconst mergeOptions = require('../utils/merge-options');\nconst doctype = require('../common/doctype');\nconst HTML = require('../common/html');\n\n//Aliases\nconst $ = HTML.TAG_NAMES;\nconst NS = HTML.NAMESPACES;\n\n//Default serializer options\nconst DEFAULT_OPTIONS = {\n    treeAdapter: defaultTreeAdapter\n};\n\n//Escaping regexes\nconst AMP_REGEX = /&/g;\nconst NBSP_REGEX = /\\u00a0/g;\nconst DOUBLE_QUOTE_REGEX = /\"/g;\nconst LT_REGEX = /</g;\nconst GT_REGEX = />/g;\n\n//Serializer\nclass Serializer {\n    constructor(node, options) {\n        this.options = mergeOptions(DEFAULT_OPTIONS, options);\n        this.treeAdapter = this.options.treeAdapter;\n\n        this.html = '';\n        this.startNode = node;\n    }\n\n    //API\n    serialize() {\n        this._serializeChildNodes(this.startNode);\n\n        return this.html;\n    }\n\n    //Internals\n    _serializeChildNodes(parentNode) {\n        const childNodes = this.treeAdapter.getChildNodes(parentNode);\n\n        if (childNodes) {\n            for (let i = 0, cnLength = childNodes.length; i < cnLength; i++) {\n                const currentNode = childNodes[i];\n\n                if (this.treeAdapter.isElementNode(currentNode)) {\n                    this._serializeElement(currentNode);\n                } else if (this.treeAdapter.isTextNode(currentNode)) {\n                    this._serializeTextNode(currentNode);\n                } else if (this.treeAdapter.isCommentNode(currentNode)) {\n                    this._serializeCommentNode(currentNode);\n                } else if (this.treeAdapter.isDocumentTypeNode(currentNode)) {\n                    this._serializeDocumentTypeNode(currentNode);\n                }\n            }\n        }\n    }\n\n    _serializeElement(node) {\n        const tn = this.treeAdapter.getTagName(node);\n        const ns = this.treeAdapter.getNamespaceURI(node);\n\n        this.html += '<' + tn;\n        this._serializeAttributes(node);\n        this.html += '>';\n\n        if (\n            tn !== $.AREA &&\n            tn !== $.BASE &&\n            tn !== $.BASEFONT &&\n            tn !== $.BGSOUND &&\n            tn !== $.BR &&\n            tn !== $.COL &&\n            tn !== $.EMBED &&\n            tn !== $.FRAME &&\n            tn !== $.HR &&\n            tn !== $.IMG &&\n            tn !== $.INPUT &&\n            tn !== $.KEYGEN &&\n            tn !== $.LINK &&\n            tn !== $.META &&\n            tn !== $.PARAM &&\n            tn !== $.SOURCE &&\n            tn !== $.TRACK &&\n            tn !== $.WBR\n        ) {\n            const childNodesHolder =\n                tn === $.TEMPLATE && ns === NS.HTML ? this.treeAdapter.getTemplateContent(node) : node;\n\n            this._serializeChildNodes(childNodesHolder);\n            this.html += '</' + tn + '>';\n        }\n    }\n\n    _serializeAttributes(node) {\n        const attrs = this.treeAdapter.getAttrList(node);\n\n        for (let i = 0, attrsLength = attrs.length; i < attrsLength; i++) {\n            const attr = attrs[i];\n            const value = Serializer.escapeString(attr.value, true);\n\n            this.html += ' ';\n\n            if (!attr.namespace) {\n                this.html += attr.name;\n            } else if (attr.namespace === NS.XML) {\n                this.html += 'xml:' + attr.name;\n            } else if (attr.namespace === NS.XMLNS) {\n                if (attr.name !== 'xmlns') {\n                    this.html += 'xmlns:';\n                }\n\n                this.html += attr.name;\n            } else if (attr.namespace === NS.XLINK) {\n                this.html += 'xlink:' + attr.name;\n            } else {\n                this.html += attr.prefix + ':' + attr.name;\n            }\n\n            this.html += '=\"' + value + '\"';\n        }\n    }\n\n    _serializeTextNode(node) {\n        const content = this.treeAdapter.getTextNodeContent(node);\n        const parent = this.treeAdapter.getParentNode(node);\n        let parentTn = void 0;\n\n        if (parent && this.treeAdapter.isElementNode(parent)) {\n            parentTn = this.treeAdapter.getTagName(parent);\n        }\n\n        if (\n            parentTn === $.STYLE ||\n            parentTn === $.SCRIPT ||\n            parentTn === $.XMP ||\n            parentTn === $.IFRAME ||\n            parentTn === $.NOEMBED ||\n            parentTn === $.NOFRAMES ||\n            parentTn === $.PLAINTEXT ||\n            parentTn === $.NOSCRIPT\n        ) {\n            this.html += content;\n        } else {\n            this.html += Serializer.escapeString(content, false);\n        }\n    }\n\n    _serializeCommentNode(node) {\n        this.html += '<!--' + this.treeAdapter.getCommentNodeContent(node) + '-->';\n    }\n\n    _serializeDocumentTypeNode(node) {\n        const name = this.treeAdapter.getDocumentTypeNodeName(node);\n\n        this.html += '<' + doctype.serializeContent(name, null, null) + '>';\n    }\n}\n\n// NOTE: used in tests and by rewriting stream\nSerializer.escapeString = function(str, attrMode) {\n    str = str.replace(AMP_REGEX, '&amp;').replace(NBSP_REGEX, '&nbsp;');\n\n    if (attrMode) {\n        str = str.replace(DOUBLE_QUOTE_REGEX, '&quot;');\n    } else {\n        str = str.replace(LT_REGEX, '&lt;').replace(GT_REGEX, '&gt;');\n    }\n\n    return str;\n};\n\nmodule.exports = Serializer;\n"]},"metadata":{},"sourceType":"script"}