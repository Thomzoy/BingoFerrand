{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/home/thomas/Code/BingoFerrand/node_modules/@babel/runtime/helpers/classCallCheck.js\")[\"default\"];\n\nvar _createClass = require(\"/home/thomas/Code/BingoFerrand/node_modules/@babel/runtime/helpers/createClass.js\")[\"default\"];\n\nvar unicode = require('../common/unicode');\n\nvar ERR = require('../common/error-codes'); //Aliases\n\n\nvar $ = unicode.CODE_POINTS; //Const\n\nvar DEFAULT_BUFFER_WATERLINE = 1 << 16; //Preprocessor\n//NOTE: HTML input preprocessing\n//(see: http://www.whatwg.org/specs/web-apps/current-work/multipage/parsing.html#preprocessing-the-input-stream)\n\nvar Preprocessor = /*#__PURE__*/function () {\n  function Preprocessor() {\n    _classCallCheck(this, Preprocessor);\n\n    this.html = null;\n    this.pos = -1;\n    this.lastGapPos = -1;\n    this.lastCharPos = -1;\n    this.gapStack = [];\n    this.skipNextNewLine = false;\n    this.lastChunkWritten = false;\n    this.endOfChunkHit = false;\n    this.bufferWaterline = DEFAULT_BUFFER_WATERLINE;\n  }\n\n  _createClass(Preprocessor, [{\n    key: \"_err\",\n    value: function _err() {// NOTE: err reporting is noop by default. Enabled by mixin.\n    }\n  }, {\n    key: \"_addGap\",\n    value: function _addGap() {\n      this.gapStack.push(this.lastGapPos);\n      this.lastGapPos = this.pos;\n    }\n  }, {\n    key: \"_processSurrogate\",\n    value: function _processSurrogate(cp) {\n      //NOTE: try to peek a surrogate pair\n      if (this.pos !== this.lastCharPos) {\n        var nextCp = this.html.charCodeAt(this.pos + 1);\n\n        if (unicode.isSurrogatePair(nextCp)) {\n          //NOTE: we have a surrogate pair. Peek pair character and recalculate code point.\n          this.pos++; //NOTE: add gap that should be avoided during retreat\n\n          this._addGap();\n\n          return unicode.getSurrogatePairCodePoint(cp, nextCp);\n        }\n      } //NOTE: we are at the end of a chunk, therefore we can't infer surrogate pair yet.\n      else if (!this.lastChunkWritten) {\n        this.endOfChunkHit = true;\n        return $.EOF;\n      } //NOTE: isolated surrogate\n\n\n      this._err(ERR.surrogateInInputStream);\n\n      return cp;\n    }\n  }, {\n    key: \"dropParsedChunk\",\n    value: function dropParsedChunk() {\n      if (this.pos > this.bufferWaterline) {\n        this.lastCharPos -= this.pos;\n        this.html = this.html.substring(this.pos);\n        this.pos = 0;\n        this.lastGapPos = -1;\n        this.gapStack = [];\n      }\n    }\n  }, {\n    key: \"write\",\n    value: function write(chunk, isLastChunk) {\n      if (this.html) {\n        this.html += chunk;\n      } else {\n        this.html = chunk;\n      }\n\n      this.lastCharPos = this.html.length - 1;\n      this.endOfChunkHit = false;\n      this.lastChunkWritten = isLastChunk;\n    }\n  }, {\n    key: \"insertHtmlAtCurrentPos\",\n    value: function insertHtmlAtCurrentPos(chunk) {\n      this.html = this.html.substring(0, this.pos + 1) + chunk + this.html.substring(this.pos + 1, this.html.length);\n      this.lastCharPos = this.html.length - 1;\n      this.endOfChunkHit = false;\n    }\n  }, {\n    key: \"advance\",\n    value: function advance() {\n      this.pos++;\n\n      if (this.pos > this.lastCharPos) {\n        this.endOfChunkHit = !this.lastChunkWritten;\n        return $.EOF;\n      }\n\n      var cp = this.html.charCodeAt(this.pos); //NOTE: any U+000A LINE FEED (LF) characters that immediately follow a U+000D CARRIAGE RETURN (CR) character\n      //must be ignored.\n\n      if (this.skipNextNewLine && cp === $.LINE_FEED) {\n        this.skipNextNewLine = false;\n\n        this._addGap();\n\n        return this.advance();\n      } //NOTE: all U+000D CARRIAGE RETURN (CR) characters must be converted to U+000A LINE FEED (LF) characters\n\n\n      if (cp === $.CARRIAGE_RETURN) {\n        this.skipNextNewLine = true;\n        return $.LINE_FEED;\n      }\n\n      this.skipNextNewLine = false;\n\n      if (unicode.isSurrogate(cp)) {\n        cp = this._processSurrogate(cp);\n      } //OPTIMIZATION: first check if code point is in the common allowed\n      //range (ASCII alphanumeric, whitespaces, big chunk of BMP)\n      //before going into detailed performance cost validation.\n\n\n      var isCommonValidRange = cp > 0x1f && cp < 0x7f || cp === $.LINE_FEED || cp === $.CARRIAGE_RETURN || cp > 0x9f && cp < 0xfdd0;\n\n      if (!isCommonValidRange) {\n        this._checkForProblematicCharacters(cp);\n      }\n\n      return cp;\n    }\n  }, {\n    key: \"_checkForProblematicCharacters\",\n    value: function _checkForProblematicCharacters(cp) {\n      if (unicode.isControlCodePoint(cp)) {\n        this._err(ERR.controlCharacterInInputStream);\n      } else if (unicode.isUndefinedCodePoint(cp)) {\n        this._err(ERR.noncharacterInInputStream);\n      }\n    }\n  }, {\n    key: \"retreat\",\n    value: function retreat() {\n      if (this.pos === this.lastGapPos) {\n        this.lastGapPos = this.gapStack.pop();\n        this.pos--;\n      }\n\n      this.pos--;\n    }\n  }]);\n\n  return Preprocessor;\n}();\n\nmodule.exports = Preprocessor;","map":{"version":3,"sources":["/home/thomas/Code/BingoFerrand/node_modules/cheerio/node_modules/parse5/lib/tokenizer/preprocessor.js"],"names":["unicode","require","ERR","$","CODE_POINTS","DEFAULT_BUFFER_WATERLINE","Preprocessor","html","pos","lastGapPos","lastCharPos","gapStack","skipNextNewLine","lastChunkWritten","endOfChunkHit","bufferWaterline","push","cp","nextCp","charCodeAt","isSurrogatePair","_addGap","getSurrogatePairCodePoint","EOF","_err","surrogateInInputStream","substring","chunk","isLastChunk","length","LINE_FEED","advance","CARRIAGE_RETURN","isSurrogate","_processSurrogate","isCommonValidRange","_checkForProblematicCharacters","isControlCodePoint","controlCharacterInInputStream","isUndefinedCodePoint","noncharacterInInputStream","pop","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nconst unicode = require('../common/unicode');\nconst ERR = require('../common/error-codes');\n\n//Aliases\nconst $ = unicode.CODE_POINTS;\n\n//Const\nconst DEFAULT_BUFFER_WATERLINE = 1 << 16;\n\n//Preprocessor\n//NOTE: HTML input preprocessing\n//(see: http://www.whatwg.org/specs/web-apps/current-work/multipage/parsing.html#preprocessing-the-input-stream)\nclass Preprocessor {\n    constructor() {\n        this.html = null;\n\n        this.pos = -1;\n        this.lastGapPos = -1;\n        this.lastCharPos = -1;\n\n        this.gapStack = [];\n\n        this.skipNextNewLine = false;\n\n        this.lastChunkWritten = false;\n        this.endOfChunkHit = false;\n        this.bufferWaterline = DEFAULT_BUFFER_WATERLINE;\n    }\n\n    _err() {\n        // NOTE: err reporting is noop by default. Enabled by mixin.\n    }\n\n    _addGap() {\n        this.gapStack.push(this.lastGapPos);\n        this.lastGapPos = this.pos;\n    }\n\n    _processSurrogate(cp) {\n        //NOTE: try to peek a surrogate pair\n        if (this.pos !== this.lastCharPos) {\n            const nextCp = this.html.charCodeAt(this.pos + 1);\n\n            if (unicode.isSurrogatePair(nextCp)) {\n                //NOTE: we have a surrogate pair. Peek pair character and recalculate code point.\n                this.pos++;\n\n                //NOTE: add gap that should be avoided during retreat\n                this._addGap();\n\n                return unicode.getSurrogatePairCodePoint(cp, nextCp);\n            }\n        }\n\n        //NOTE: we are at the end of a chunk, therefore we can't infer surrogate pair yet.\n        else if (!this.lastChunkWritten) {\n            this.endOfChunkHit = true;\n            return $.EOF;\n        }\n\n        //NOTE: isolated surrogate\n        this._err(ERR.surrogateInInputStream);\n\n        return cp;\n    }\n\n    dropParsedChunk() {\n        if (this.pos > this.bufferWaterline) {\n            this.lastCharPos -= this.pos;\n            this.html = this.html.substring(this.pos);\n            this.pos = 0;\n            this.lastGapPos = -1;\n            this.gapStack = [];\n        }\n    }\n\n    write(chunk, isLastChunk) {\n        if (this.html) {\n            this.html += chunk;\n        } else {\n            this.html = chunk;\n        }\n\n        this.lastCharPos = this.html.length - 1;\n        this.endOfChunkHit = false;\n        this.lastChunkWritten = isLastChunk;\n    }\n\n    insertHtmlAtCurrentPos(chunk) {\n        this.html = this.html.substring(0, this.pos + 1) + chunk + this.html.substring(this.pos + 1, this.html.length);\n\n        this.lastCharPos = this.html.length - 1;\n        this.endOfChunkHit = false;\n    }\n\n    advance() {\n        this.pos++;\n\n        if (this.pos > this.lastCharPos) {\n            this.endOfChunkHit = !this.lastChunkWritten;\n            return $.EOF;\n        }\n\n        let cp = this.html.charCodeAt(this.pos);\n\n        //NOTE: any U+000A LINE FEED (LF) characters that immediately follow a U+000D CARRIAGE RETURN (CR) character\n        //must be ignored.\n        if (this.skipNextNewLine && cp === $.LINE_FEED) {\n            this.skipNextNewLine = false;\n            this._addGap();\n            return this.advance();\n        }\n\n        //NOTE: all U+000D CARRIAGE RETURN (CR) characters must be converted to U+000A LINE FEED (LF) characters\n        if (cp === $.CARRIAGE_RETURN) {\n            this.skipNextNewLine = true;\n            return $.LINE_FEED;\n        }\n\n        this.skipNextNewLine = false;\n\n        if (unicode.isSurrogate(cp)) {\n            cp = this._processSurrogate(cp);\n        }\n\n        //OPTIMIZATION: first check if code point is in the common allowed\n        //range (ASCII alphanumeric, whitespaces, big chunk of BMP)\n        //before going into detailed performance cost validation.\n        const isCommonValidRange =\n            (cp > 0x1f && cp < 0x7f) || cp === $.LINE_FEED || cp === $.CARRIAGE_RETURN || (cp > 0x9f && cp < 0xfdd0);\n\n        if (!isCommonValidRange) {\n            this._checkForProblematicCharacters(cp);\n        }\n\n        return cp;\n    }\n\n    _checkForProblematicCharacters(cp) {\n        if (unicode.isControlCodePoint(cp)) {\n            this._err(ERR.controlCharacterInInputStream);\n        } else if (unicode.isUndefinedCodePoint(cp)) {\n            this._err(ERR.noncharacterInInputStream);\n        }\n    }\n\n    retreat() {\n        if (this.pos === this.lastGapPos) {\n            this.lastGapPos = this.gapStack.pop();\n            this.pos--;\n        }\n\n        this.pos--;\n    }\n}\n\nmodule.exports = Preprocessor;\n"]},"metadata":{},"sourceType":"script"}