{"ast":null,"code":"\"use strict\"; // Following http://www.w3.org/TR/css3-selectors/#nth-child-pseudo\n\nrequire(\"core-js/modules/es.object.define-property.js\");\n\nrequire(\"core-js/modules/es.object.to-string.js\");\n\nrequire(\"core-js/modules/es.set.js\");\n\nrequire(\"core-js/modules/es.string.iterator.js\");\n\nrequire(\"core-js/modules/web.dom-collections.iterator.js\");\n\nrequire(\"core-js/modules/es.string.trim.js\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.parse = void 0; // Whitespace as per https://www.w3.org/TR/selectors-3/#lex is \" \\t\\r\\n\\f\"\n\nvar whitespace = new Set([9, 10, 12, 13, 32]);\nvar ZERO = \"0\".charCodeAt(0);\nvar NINE = \"9\".charCodeAt(0);\n/**\n * Parses an expression.\n *\n * @throws An `Error` if parsing fails.\n * @returns An array containing the integer step size and the integer offset of the nth rule.\n * @example nthCheck.parse(\"2n+3\"); // returns [2, 3]\n */\n\nfunction parse(formula) {\n  formula = formula.trim().toLowerCase();\n\n  if (formula === \"even\") {\n    return [2, 0];\n  } else if (formula === \"odd\") {\n    return [2, 1];\n  } // Parse [ ['-'|'+']? INTEGER? {N} [ S* ['-'|'+'] S* INTEGER ]?\n\n\n  var idx = 0;\n  var a = 0;\n  var sign = readSign();\n  var number = readNumber();\n\n  if (idx < formula.length && formula.charAt(idx) === \"n\") {\n    idx++;\n    a = sign * (number !== null && number !== void 0 ? number : 1);\n    skipWhitespace();\n\n    if (idx < formula.length) {\n      sign = readSign();\n      skipWhitespace();\n      number = readNumber();\n    } else {\n      sign = number = 0;\n    }\n  } // Throw if there is anything else\n\n\n  if (number === null || idx < formula.length) {\n    throw new Error(\"n-th rule couldn't be parsed ('\" + formula + \"')\");\n  }\n\n  return [a, sign * number];\n\n  function readSign() {\n    if (formula.charAt(idx) === \"-\") {\n      idx++;\n      return -1;\n    }\n\n    if (formula.charAt(idx) === \"+\") {\n      idx++;\n    }\n\n    return 1;\n  }\n\n  function readNumber() {\n    var start = idx;\n    var value = 0;\n\n    while (idx < formula.length && formula.charCodeAt(idx) >= ZERO && formula.charCodeAt(idx) <= NINE) {\n      value = value * 10 + (formula.charCodeAt(idx) - ZERO);\n      idx++;\n    } // Return `null` if we didn't read anything.\n\n\n    return idx === start ? null : value;\n  }\n\n  function skipWhitespace() {\n    while (idx < formula.length && whitespace.has(formula.charCodeAt(idx))) {\n      idx++;\n    }\n  }\n}\n\nexports.parse = parse;","map":{"version":3,"sources":["/home/thomas/Code/BingoFerrand/node_modules/nth-check/lib/parse.js"],"names":["Object","defineProperty","exports","value","parse","whitespace","Set","ZERO","charCodeAt","NINE","formula","trim","toLowerCase","idx","a","sign","readSign","number","readNumber","length","charAt","skipWhitespace","Error","start","has"],"mappings":"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","sourcesContent":["\"use strict\";\n// Following http://www.w3.org/TR/css3-selectors/#nth-child-pseudo\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.parse = void 0;\n// Whitespace as per https://www.w3.org/TR/selectors-3/#lex is \" \\t\\r\\n\\f\"\nvar whitespace = new Set([9, 10, 12, 13, 32]);\nvar ZERO = \"0\".charCodeAt(0);\nvar NINE = \"9\".charCodeAt(0);\n/**\n * Parses an expression.\n *\n * @throws An `Error` if parsing fails.\n * @returns An array containing the integer step size and the integer offset of the nth rule.\n * @example nthCheck.parse(\"2n+3\"); // returns [2, 3]\n */\nfunction parse(formula) {\n    formula = formula.trim().toLowerCase();\n    if (formula === \"even\") {\n        return [2, 0];\n    }\n    else if (formula === \"odd\") {\n        return [2, 1];\n    }\n    // Parse [ ['-'|'+']? INTEGER? {N} [ S* ['-'|'+'] S* INTEGER ]?\n    var idx = 0;\n    var a = 0;\n    var sign = readSign();\n    var number = readNumber();\n    if (idx < formula.length && formula.charAt(idx) === \"n\") {\n        idx++;\n        a = sign * (number !== null && number !== void 0 ? number : 1);\n        skipWhitespace();\n        if (idx < formula.length) {\n            sign = readSign();\n            skipWhitespace();\n            number = readNumber();\n        }\n        else {\n            sign = number = 0;\n        }\n    }\n    // Throw if there is anything else\n    if (number === null || idx < formula.length) {\n        throw new Error(\"n-th rule couldn't be parsed ('\" + formula + \"')\");\n    }\n    return [a, sign * number];\n    function readSign() {\n        if (formula.charAt(idx) === \"-\") {\n            idx++;\n            return -1;\n        }\n        if (formula.charAt(idx) === \"+\") {\n            idx++;\n        }\n        return 1;\n    }\n    function readNumber() {\n        var start = idx;\n        var value = 0;\n        while (idx < formula.length &&\n            formula.charCodeAt(idx) >= ZERO &&\n            formula.charCodeAt(idx) <= NINE) {\n            value = value * 10 + (formula.charCodeAt(idx) - ZERO);\n            idx++;\n        }\n        // Return `null` if we didn't read anything.\n        return idx === start ? null : value;\n    }\n    function skipWhitespace() {\n        while (idx < formula.length &&\n            whitespace.has(formula.charCodeAt(idx))) {\n            idx++;\n        }\n    }\n}\nexports.parse = parse;\n"]},"metadata":{},"sourceType":"script"}